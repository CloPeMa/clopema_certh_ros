/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 61 generated on 2013-07-21 16:06:36.306656
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==61);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#define IKFAST_STRINGIZE2(s) #s
#define IKFAST_STRINGIZE(s) IKFAST_STRINGIZE2(s)

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)0.000001)
#endif

// used to check input to atan2 for degenerate cases
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)2e-6)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53,x54,x55;
x0=IKcos(j[0]);
x1=IKsin(j[0]);
x2=IKsin(j[3]);
x3=IKcos(j[3]);
x4=IKcos(j[1]);
x5=IKcos(j[2]);
x6=IKsin(j[1]);
x7=IKsin(j[2]);
x8=IKcos(j[5]);
x9=IKsin(j[5]);
x10=IKsin(j[4]);
x11=IKcos(j[4]);
x12=((IkReal(0.200000000000000))*(x5));
x13=((IkReal(0.0300000000000000))*(x7));
x14=((IkReal(0.200000000000000))*(x3));
x15=((IkReal(1.00000000000000))*(x11));
x16=((IkReal(1.00000000000000))*(x7));
x17=((IkReal(0.0300000000000000))*(x3));
x18=((IkReal(1.00000000000000))*(x1));
x19=((IkReal(0.640000000000000))*(x7));
x20=((IkReal(0.200000000000000))*(x7));
x21=((IkReal(1.00000000000000))*(x3));
x22=((IkReal(1.00000000000000))*(x0));
x23=((x0)*(x2));
x24=((x0)*(x6));
x25=((x11)*(x3));
x26=((x4)*(x7));
x27=((x4)*(x5));
x28=((x1)*(x6));
x29=((x6)*(x7));
x30=((x5)*(x6));
x31=((x10)*(x3));
x32=((IkReal(-1.00000000000000))*(x3));
x33=((x1)*(x2));
x34=((x16)*(x4));
x35=((x20)*(x6));
x36=((x12)*(x4));
x37=((((IkReal(-1.00000000000000))*(x34)))+(x30));
x38=((x27)+(x29));
x39=((((IkReal(-1.00000000000000))*(x27)))+(((IkReal(-1.00000000000000))*(x16)*(x6))));
x40=((x36)+(x35));
x41=((x11)*(x37));
x42=((x2)*(x38));
x43=((((IkReal(-1.00000000000000))*(x0)*(x34)))+(((x24)*(x5))));
x44=((((IkReal(-1.00000000000000))*(x1)*(x34)))+(((x28)*(x5))));
x45=((((IkReal(-1.00000000000000))*(x16)*(x24)))+(((IkReal(-1.00000000000000))*(x22)*(x27))));
x46=((((x22)*(x27)))+(((x16)*(x24))));
x47=((x2)*(x44));
x48=((((IkReal(-1.00000000000000))*(x16)*(x28)))+(((IkReal(-1.00000000000000))*(x18)*(x27))));
x49=((((x18)*(x27)))+(((x16)*(x28))));
x50=((x3)*(x43));
x51=((x11)*(x48));
x52=((((x1)*(x3)))+(((x2)*(x43))));
x53=((((x18)*(x2)))+(((IkReal(-1.00000000000000))*(x21)*(x43))));
x54=((((IkReal(-1.00000000000000))*(x2)*(x22)))+(((IkReal(-1.00000000000000))*(x21)*(x44))));
x55=((x10)*(x53));
eerot[0]=((((x52)*(x9)))+(((x8)*(((((IkReal(-1.00000000000000))*(x15)*(x45)))+(((IkReal(-1.00000000000000))*(x55))))))));
eerot[1]=((((x9)*(((((x11)*(x45)))+(x55)))))+(((x52)*(x8))));
eerot[2]=((((x10)*(x46)))+(((x11)*(x53))));
IkReal x56=((x0)*(x27));
eetrans[0]=((((x19)*(x24)))+(((x11)*(((((IkReal(0.0300000000000000))*(x56)))+(((x13)*(x24)))))))+(((IkReal(0.150000000000000))*(x0)))+(((IkReal(0.614000000000000))*(x24)))+(((x10)*(((((x0)*(x36)))+(((x20)*(x24)))))))+(((IkReal(-1.00000000000000))*(x0)*(x20)*(x4)))+(((x10)*(((((IkReal(-0.0300000000000000))*(x33)))+(((x17)*(x43)))))))+(((x12)*(x24)))+(((x11)*(((((IkReal(0.200000000000000))*(x33)))+(((IkReal(-1.00000000000000))*(x14)*(x43)))))))+(((IkReal(0.640000000000000))*(x56))));
eerot[3]=((((x9)*(((((IkReal(-1.00000000000000))*(x0)*(x21)))+(x47)))))+(((IkReal(-1.00000000000000))*(x8)*(((((IkReal(1.00000000000000))*(x10)*(((((IkReal(-1.00000000000000))*(x23)))+(((x32)*(x44)))))))+(((IkReal(1.00000000000000))*(x51))))))));
eerot[4]=((((x9)*(((((x10)*(x54)))+(x51)))))+(((x8)*(((x47)+(((x0)*(x32))))))));
eerot[5]=((((x10)*(x49)))+(((x11)*(x54))));
IkReal x57=((x1)*(x27));
eetrans[1]=((((x19)*(x28)))+(((x11)*(((((IkReal(-1.00000000000000))*(x14)*(x44)))+(((IkReal(-0.200000000000000))*(x23)))))))+(((IkReal(0.150000000000000))*(x1)))+(((IkReal(0.614000000000000))*(x28)))+(((x10)*(((((IkReal(0.0300000000000000))*(x23)))+(((x17)*(x44)))))))+(((x11)*(((((IkReal(0.0300000000000000))*(x57)))+(((x13)*(x28)))))))+(((x12)*(x28)))+(((x10)*(((((x1)*(x36)))+(((x20)*(x28)))))))+(((IkReal(-1.00000000000000))*(x1)*(x20)*(x4)))+(((IkReal(0.640000000000000))*(x57))));
eerot[6]=((((x42)*(x9)))+(((x8)*(((((IkReal(-1.00000000000000))*(x10)*(x21)*(x39)))+(((IkReal(-1.00000000000000))*(x15)*(x37))))))));
eerot[7]=((((x9)*(((x41)+(((x31)*(x39)))))))+(((x42)*(x8))));
eerot[8]=((((x10)*(((((IkReal(-1.00000000000000))*(x30)))+(x34)))))+(((x25)*(x39))));
eetrans[2]=((IkReal(0.450000000000000))+(((x10)*(((((IkReal(-1.00000000000000))*(x12)*(x6)))+(((x20)*(x4)))))))+(((x19)*(x4)))+(((x11)*(((((IkReal(-0.0300000000000000))*(x30)))+(((x13)*(x4)))))))+(((IkReal(-1.00000000000000))*(x25)*(x40)))+(x40)+(((IkReal(0.614000000000000))*(x4)))+(((x31)*(((((IkReal(0.0300000000000000))*(x27)))+(((x13)*(x6)))))))+(((IkReal(-0.640000000000000))*(x30))));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 6; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j1,cj1,sj1,htj1,j2,cj2,sj2,htj2,j3,cj3,sj3,htj3,j4,cj4,sj4,htj4,j5,cj5,sj5,htj5,j6,cj6,sj6,htj6,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5,_ij6[2], _nj6;

bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; j6=numeric_limits<IkReal>::quiet_NaN(); _ij6[0] = -1; _ij6[1] = -1; _nj6 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=r01;
new_r01=((IkReal(-1.00000000000000))*(r00));
new_r02=r02;
new_px=((((IkReal(-0.200000000000000))*(r02)))+(px));
new_r10=r11;
new_r11=((IkReal(-1.00000000000000))*(r10));
new_r12=r12;
new_py=((((IkReal(-0.200000000000000))*(r12)))+(py));
new_r20=r21;
new_r21=((IkReal(-1.00000000000000))*(r20));
new_r22=r22;
new_pz=((IkReal(-0.450000000000000))+(((IkReal(-0.200000000000000))*(r22)))+(pz));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
pp=(((px)*(px))+((py)*(py))+((pz)*(pz)));
npx=((((px)*(r00)))+(((py)*(r10)))+(((pz)*(r20))));
npy=((((px)*(r01)))+(((py)*(r11)))+(((pz)*(r21))));
npz=((((px)*(r02)))+(((py)*(r12)))+(((pz)*(r22))));
rxp0_0=((((IkReal(-1.00000000000000))*(py)*(r20)))+(((pz)*(r10))));
rxp0_1=((((px)*(r20)))+(((IkReal(-1.00000000000000))*(pz)*(r00))));
rxp0_2=((((IkReal(-1.00000000000000))*(px)*(r10)))+(((py)*(r00))));
rxp1_0=((((IkReal(-1.00000000000000))*(py)*(r21)))+(((pz)*(r11))));
rxp1_1=((((px)*(r21)))+(((IkReal(-1.00000000000000))*(pz)*(r01))));
rxp1_2=((((IkReal(-1.00000000000000))*(px)*(r11)))+(((py)*(r01))));
rxp2_0=((((IkReal(-1.00000000000000))*(py)*(r22)))+(((pz)*(r12))));
rxp2_1=((((px)*(r22)))+(((IkReal(-1.00000000000000))*(pz)*(r02))));
rxp2_2=((((IkReal(-1.00000000000000))*(px)*(r12)))+(((py)*(r02))));
IkReal op[72], zeror[48];
int numroots;
IkReal x58=((IkReal(0.0300000000000000))*(r11));
IkReal x59=((IkReal(0.0600000000000000))*(r10));
IkReal x60=((py)+(((IkReal(-1.00000000000000))*(x58))));
IkReal x61=((IkReal(0.133726419928826))*(r00));
IkReal x62=((IkReal(0.0335624199288256))*(r12));
IkReal x63=((IkReal(0.126471743772242))*(r20));
IkReal x64=((IkReal(1.11874733096085))*(rxp0_1));
IkReal x65=((IkReal(0.649608540925267))*(npx));
IkReal x66=((IkReal(0.0600000000000000))*(rxp2_0));
IkReal x67=((IkReal(0.0161561423487544))*(r20));
IkReal x68=((IkReal(0.0194882562277580))*(r12));
IkReal x69=((IkReal(0.0600000000000000))*(rxp2_2));
IkReal x70=((IkReal(0.0249524555160142))*(r00));
IkReal x71=((IkReal(0.649608540925267))*(rxp0_1));
IkReal x72=((IkReal(0.109252669039146))*(npx));
IkReal x73=((IkReal(0.218505338078292))*(npy));
IkReal x74=((IkReal(2.23749466192171))*(rxp1_1));
IkReal x75=((pp)*(r20));
IkReal x76=((IkReal(0.0496085409252669))*(rxp0_1));
IkReal x77=((IkReal(0.00148825622775801))*(r12));
IkReal x78=((IkReal(0.0887264199288256))*(r20));
IkReal x79=((IkReal(0.0577282562277580))*(r00));
IkReal x80=((pp)*(r00));
IkReal x81=((IkReal(0.209152455516014))*(r20));
IkReal x82=((IkReal(0.0288438576512456))*(r00));
IkReal x83=((IkReal(0.0496085409252669))*(npx));
IkReal x84=((IkReal(0.0600000000000000))*(r01));
IkReal x85=((IkReal(2.00000000000000))*(px));
IkReal x86=((IkReal(2.23749466192171))*(rxp0_0));
IkReal x87=((IkReal(0.267452839857651))*(r10));
IkReal x88=((IkReal(0.0671248398576512))*(r02));
IkReal x89=((IkReal(0.120000000000000))*(rxp2_1));
IkReal x90=((IkReal(1.29921708185053))*(rxp0_0));
IkReal x91=((IkReal(0.0499049110320285))*(r10));
IkReal x92=((IkReal(0.0389765124555160))*(r02));
IkReal x93=((IkReal(4.47498932384342))*(rxp1_0));
IkReal x94=((IkReal(0.00297651245551601))*(r02));
IkReal x95=((IkReal(0.0992170818505338))*(rxp0_0));
IkReal x96=((IkReal(0.115456512455516))*(r10));
IkReal x97=((IkReal(0.0576877153024911))*(r10));
IkReal x98=((IkReal(1.00000000000000))*(py));
IkReal x99=((IkReal(0.252943487544484))*(r21));
IkReal x100=((IkReal(1.29921708185053))*(npy));
IkReal x101=((IkReal(0.267452839857651))*(r01));
IkReal x102=((IkReal(0.0499049110320285))*(r01));
IkReal x103=((IkReal(1.29921708185053))*(rxp1_1));
IkReal x104=((IkReal(0.0323122846975089))*(r21));
IkReal x105=((IkReal(0.115456512455516))*(r01));
IkReal x106=((IkReal(0.0992170818505338))*(rxp1_1));
IkReal x107=((IkReal(0.177452839857651))*(r21));
IkReal x108=((IkReal(0.0576877153024911))*(r01));
IkReal x109=((IkReal(0.418304911032028))*(r21));
IkReal x110=((IkReal(0.0992170818505338))*(npy));
IkReal x111=((IkReal(2.00000000000000))*(npx));
IkReal x112=((IkReal(1.00000000000000))*(pp));
IkReal x113=((IkReal(2.00000000000000))*(pp));
IkReal x114=((IkReal(4.00000000000000))*(npy));
IkReal x115=((py)+(x58));
IkReal x116=((npx)*(x85));
IkReal x117=((pz)*(x111));
IkReal x118=((IkReal(1.00000000000000))*(x75));
IkReal x119=((IkReal(1.00000000000000))*(x80));
IkReal x120=((r21)*(x113));
IkReal x121=((pz)*(x114));
IkReal x122=((r01)*(x113));
IkReal x123=((px)*(x114));
IkReal x124=((IkReal(-0.120000000000000))*(r00));
IkReal x125=((x84)+(((IkReal(-1.00000000000000))*(x85))));
IkReal x126=((IkReal(4.00000000000000))*(npx)*(py));
IkReal x127=((r10)*(x113));
IkReal x128=((IkReal(4.00000000000000))*(pp)*(r11));
IkReal x129=((IkReal(8.00000000000000))*(npy)*(py));
IkReal x130=((IkReal(-0.0600000000000000))*(r10));
IkReal x131=((x58)+(((IkReal(-1.00000000000000))*(x98))));
IkReal x132=((((IkReal(-1.00000000000000))*(x84)))+(((IkReal(-1.00000000000000))*(x85))));
IkReal x133=((((IkReal(-1.00000000000000))*(x98)))+(((IkReal(-1.00000000000000))*(x58))));
IkReal x134=((x61)+(x65));
IkReal x135=((x62)+(x66));
IkReal x136=((x75)+(x69));
IkReal x137=((x76)+(x72));
IkReal x138=((x102)+(x103));
IkReal x139=((x67)+(x68));
IkReal x140=((x71)+(x70));
IkReal x141=((x95)+(x96));
IkReal x142=((x61)+(x63));
IkReal x143=((x88)+(x89));
IkReal x144=((x64)+(x80));
IkReal x145=((x72)+(x79));
IkReal x146=((x121)+(x73));
IkReal x147=((x116)+(x62));
IkReal x148=((x121)+(x107));
IkReal x149=((x120)+(x73));
IkReal x150=((x123)+(x101));
IkReal x151=((x127)+(x86));
IkReal x152=((x120)+(x104));
IkReal x153=((x126)+(x97));
IkReal x154=((x116)+(x66));
IkReal x155=((x119)+(x64));
IkReal x156=((x117)+(x72));
IkReal x157=((x122)+(x74));
IkReal x158=((x64)+(x66)+(x82));
IkReal x159=((x117)+(x79)+(x78));
IkReal x160=((x123)+(x108)+(x74));
IkReal x161=((x116)+(x64)+(x82));
IkReal x162=((x117)+(x76)+(x78));
IkReal x163=((x156)+(x68));
IkReal x164=((x126)+(x86)+(x87));
op[0]=x115;
op[1]=IkReal(0);
op[2]=x59;
op[3]=IkReal(0);
op[4]=x60;
op[5]=IkReal(0);
op[6]=IkReal(0);
op[7]=x115;
op[8]=IkReal(0);
op[9]=x59;
op[10]=IkReal(0);
op[11]=x60;
op[12]=((((IkReal(-1.00000000000000))*(x142)))+(((IkReal(-1.00000000000000))*(x154)))+(x144)+(x62)+(x65));
op[13]=((((IkReal(-1.00000000000000))*(x118)))+(x163)+(x140)+(x69)+(((IkReal(-1.00000000000000))*(x67))));
op[14]=((((IkReal(-1.00000000000000))*(x157)))+(((IkReal(-1.00000000000000))*(x100)))+(x150)+(x99));
op[15]=((((IkReal(-1.00000000000000))*(x146)))+(x152)+(((IkReal(-1.00000000000000))*(x138))));
op[16]=((((IkReal(-1.00000000000000))*(x155)))+(x142)+(x147)+(((IkReal(-1.00000000000000))*(x66)))+(((IkReal(-1.00000000000000))*(x65))));
op[17]=((((IkReal(-1.00000000000000))*(x140)))+(((IkReal(-1.00000000000000))*(x156)))+(x136)+(x139));
op[18]=((((IkReal(-1.00000000000000))*(x77)))+(((IkReal(-1.00000000000000))*(x118)))+(x159)+(((IkReal(-1.00000000000000))*(x137)))+(x69));
op[19]=((((IkReal(-1.00000000000000))*(x119)))+(x161)+(x135)+(x83)+(((IkReal(-1.00000000000000))*(x81))));
op[20]=((((IkReal(-1.00000000000000))*(x148)))+(((IkReal(-1.00000000000000))*(x105)))+(x149)+(x106));
op[21]=((((IkReal(-1.00000000000000))*(x160)))+(((IkReal(-1.00000000000000))*(x110)))+(x122)+(x109));
op[22]=((((IkReal(-1.00000000000000))*(x159)))+(((IkReal(-1.00000000000000))*(x77)))+(x137)+(x136));
op[23]=((((IkReal(-1.00000000000000))*(x161)))+(x135)+(x80)+(x81)+(((IkReal(-1.00000000000000))*(x83))));
op[24]=x132;
op[25]=IkReal(0);
op[26]=x124;
op[27]=IkReal(0);
op[28]=x125;
op[29]=IkReal(0);
op[30]=IkReal(0);
op[31]=x132;
op[32]=IkReal(0);
op[33]=x124;
op[34]=IkReal(0);
op[35]=x125;
op[36]=((((IkReal(-1.00000000000000))*(x143)))+(((IkReal(-1.00000000000000))*(x164)))+(x127));
op[37]=((x91)+(((IkReal(-1.00000000000000))*(x90)))+(((IkReal(-1.00000000000000))*(x92))));
op[38]=((((IkReal(-1.00000000000000))*(x128)))+(x129)+(((IkReal(0.534905679715302))*(r11)))+(x93));
op[39]=((((IkReal(2.59843416370107))*(rxp1_0)))+(((IkReal(-0.0998098220640569))*(r11))));
op[40]=((((IkReal(-1.00000000000000))*(x143)))+(((IkReal(-1.00000000000000))*(x127)))+(x164));
op[41]=((x90)+(((IkReal(-1.00000000000000))*(x91)))+(((IkReal(-1.00000000000000))*(x92))));
op[42]=((x141)+(x94));
op[43]=((((IkReal(-1.00000000000000))*(x151)))+(x153)+(x89)+(((IkReal(-1.00000000000000))*(x88))));
op[44]=((((IkReal(-0.230913024911032))*(r11)))+(((IkReal(-0.198434163701068))*(rxp1_0))));
op[45]=((((IkReal(-1.00000000000000))*(x129)))+(x128)+(x93)+(((IkReal(-0.115375430604982))*(r11))));
op[46]=((((IkReal(-1.00000000000000))*(x141)))+(x94));
op[47]=((((IkReal(-1.00000000000000))*(x153)))+(x151)+(x89)+(((IkReal(-1.00000000000000))*(x88))));
op[48]=x133;
op[49]=IkReal(0);
op[50]=x130;
op[51]=IkReal(0);
op[52]=x131;
op[53]=IkReal(0);
op[54]=IkReal(0);
op[55]=x133;
op[56]=IkReal(0);
op[57]=x130;
op[58]=IkReal(0);
op[59]=x131;
op[60]=((((IkReal(-1.00000000000000))*(x155)))+(x154)+(x134)+(((IkReal(-1.00000000000000))*(x63)))+(((IkReal(-1.00000000000000))*(x62))));
op[61]=((((IkReal(-1.00000000000000))*(x140)))+(((IkReal(-1.00000000000000))*(x118)))+(x156)+(((IkReal(-1.00000000000000))*(x139)))+(x69));
op[62]=((((IkReal(-1.00000000000000))*(x150)))+(((IkReal(-1.00000000000000))*(x100)))+(x157)+(x99));
op[63]=((((IkReal(-1.00000000000000))*(x146)))+(x152)+(x138));
op[64]=((((IkReal(-1.00000000000000))*(x147)))+(x144)+(((IkReal(-1.00000000000000))*(x134)))+(x63)+(x66));
op[65]=((((IkReal(-1.00000000000000))*(x163)))+(x140)+(x136)+(x67));
op[66]=((((IkReal(-1.00000000000000))*(x145)))+(((IkReal(-1.00000000000000))*(x118)))+(x162)+(x77)+(x69));
op[67]=((((IkReal(-1.00000000000000))*(x161)))+(((IkReal(-1.00000000000000))*(x135)))+(x83)+(x80)+(((IkReal(-1.00000000000000))*(x81))));
op[68]=((((IkReal(-1.00000000000000))*(x148)))+(((IkReal(-1.00000000000000))*(x106)))+(x149)+(x105));
op[69]=((((IkReal(-1.00000000000000))*(x110)))+(((IkReal(-1.00000000000000))*(x122)))+(x160)+(x109));
op[70]=((((IkReal(-1.00000000000000))*(x162)))+(x145)+(x136)+(x77));
op[71]=((((IkReal(-1.00000000000000))*(x119)))+(x161)+(((IkReal(-1.00000000000000))*(x135)))+(x81)+(((IkReal(-1.00000000000000))*(x83))));
solvedialyticpoly8qep(op,zeror,numroots);
IkReal j1array[16], cj1array[16], sj1array[16], j6array[16], cj6array[16], sj6array[16], j2array[16], cj2array[16], sj2array[16];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ij1 += 3)
{
IkReal htj1 = zeror[ij1+0], htj6 = zeror[ij1+1], htj2 = zeror[ij1+2];
j1array[numsolutions]=((IkReal(2.00000000000000))*(atan(htj1)));
j6array[numsolutions]=((IkReal(2.00000000000000))*(atan(htj6)));
j2array[numsolutions]=((IkReal(2.00000000000000))*(atan(htj2)));
IkReal x165=(htj1)*(htj1);
IkReal x166=(htj6)*(htj6);
IkReal x167=(htj2)*(htj2);
cj1array[numsolutions]=((((IKabs(((IkReal(1.00000000000000))+(x165))) != 0)?((IkReal)1/(((IkReal(1.00000000000000))+(x165)))):(IkReal)1.0e30))*(((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(x165))))));
cj6array[numsolutions]=((((IKabs(((IkReal(1.00000000000000))+(x166))) != 0)?((IkReal)1/(((IkReal(1.00000000000000))+(x166)))):(IkReal)1.0e30))*(((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(x166))))));
cj2array[numsolutions]=((((IKabs(((IkReal(1.00000000000000))+(x167))) != 0)?((IkReal)1/(((IkReal(1.00000000000000))+(x167)))):(IkReal)1.0e30))*(((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(x167))))));
sj1array[numsolutions]=((IkReal(2.00000000000000))*(htj1)*(((IKabs(((IkReal(1.00000000000000))+((htj1)*(htj1)))) != 0)?((IkReal)1/(((IkReal(1.00000000000000))+((htj1)*(htj1))))):(IkReal)1.0e30)));
sj6array[numsolutions]=((IkReal(2.00000000000000))*(htj6)*(((IKabs(((IkReal(1.00000000000000))+((htj6)*(htj6)))) != 0)?((IkReal)1/(((IkReal(1.00000000000000))+((htj6)*(htj6))))):(IkReal)1.0e30)));
sj2array[numsolutions]=((IkReal(2.00000000000000))*(htj2)*(((IKabs(((IkReal(1.00000000000000))+((htj2)*(htj2)))) != 0)?((IkReal)1/(((IkReal(1.00000000000000))+((htj2)*(htj2))))):(IkReal)1.0e30)));
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
if( j6array[numsolutions] > IKPI )
{
    j6array[numsolutions]-=IK2PI;
}
else if( j6array[numsolutions] < -IKPI )
{
    j6array[numsolutions]+=IK2PI;
}
if( j2array[numsolutions] > IKPI )
{
    j2array[numsolutions]-=IK2PI;
}
else if( j2array[numsolutions] < -IKPI )
{
    j2array[numsolutions]+=IK2PI;
}
numsolutions++;
}
bool j1valid[16]={true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true};
_nj1 = 16;
_nj6 = 1;
_nj2 = 1;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
_ij6[0] = 0; _ij6[1] = -1;
_ij2[0] = 0; _ij2[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( !j1valid[iij1] ) { continue; }
if( IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(cj6array[ij1]-cj6array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij1]-sj6array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(cj2array[ij1]-cj2array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij1]-sj2array[iij1]) < IKFAST_SOLUTION_THRESH &&  1 )
{
    j1valid[iij1]=false; _ij1[1] = iij1; _ij6[1] = 0; _ij2[1] = 0;  break; 
}
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

    j6 = j6array[ij1]; cj6 = cj6array[ij1]; sj6 = sj6array[ij1];

    j2 = j2array[ij1]; cj2 = cj2array[ij1]; sj2 = sj2array[ij1];

{
IkReal dummyeval[1];
IkReal gconst0;
gconst0=IKsign(((((IkReal(0.449600000000000))*((sj2)*(sj2))))+(((IkReal(0.449600000000000))*((cj2)*(cj2))))));
dummyeval[0]=(((sj2)*(sj2))+((cj2)*(cj2)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
cj4array[0]=((((cj6)*(r00)*(sj1)))+(((IkReal(-1.00000000000000))*(cj1)*(cj6)*(r10)))+(((cj1)*(r11)*(sj6)))+(((IkReal(-1.00000000000000))*(r01)*(sj1)*(sj6))));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
IkReal dummyeval[1];
IkReal gconst1;
gconst1=IKsign(((((sj4)*((sj2)*(sj2))))+(((sj4)*((cj2)*(cj2))))));
dummyeval[0]=((((sj4)*((sj2)*(sj2))))+(((sj4)*((cj2)*(cj2)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst2;
IkReal x168=((IkReal(0.640000000000000))*(sj4));
gconst2=IKsign(((((IkReal(-1.00000000000000))*(x168)*((sj2)*(sj2))))+(((IkReal(-1.00000000000000))*(x168)*((cj2)*(cj2))))));
IkReal x169=((IkReal(1.00000000000000))*(sj4));
dummyeval[0]=((((IkReal(-1.00000000000000))*(x169)*((sj2)*(sj2))))+(((IkReal(-1.00000000000000))*(x169)*((cj2)*(cj2)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst3;
IkReal x170=(cj1)*(cj1);
IkReal x171=(sj1)*(sj1);
IkReal x172=(sj6)*(sj6);
IkReal x173=(cj6)*(cj6);
IkReal x174=((cj1)*(sj1));
IkReal x175=((IkReal(2.00000000000000))*(cj6)*(r01)*(sj6));
IkReal x176=((IkReal(2.00000000000000))*(cj6)*(r11)*(sj6));
gconst3=IKsign(((((x170)*(x173)*((r11)*(r11))))+(((IkReal(-2.00000000000000))*(r00)*(r10)*(x172)*(x174)))+(((IkReal(-1.00000000000000))*(r10)*(x174)*(x175)))+(((x171)*(x173)*((r01)*(r01))))+(((IkReal(-2.00000000000000))*(r02)*(r12)*(x174)))+(((x171)*(x172)*((r00)*(r00))))+(((IkReal(-1.00000000000000))*(r00)*(x174)*(x176)))+(((r10)*(x170)*(x176)))+(((x171)*((r02)*(r02))))+(((r00)*(x171)*(x175)))+(((x170)*(x172)*((r10)*(r10))))+(((x170)*((r12)*(r12))))+(((IkReal(-2.00000000000000))*(r01)*(r11)*(x173)*(x174)))));
IkReal x177=(cj1)*(cj1);
IkReal x178=(sj1)*(sj1);
IkReal x179=(sj6)*(sj6);
IkReal x180=(cj6)*(cj6);
IkReal x181=((cj1)*(sj1));
IkReal x182=x175;
IkReal x183=x176;
dummyeval[0]=((((x177)*(x179)*((r10)*(r10))))+(((IkReal(-2.00000000000000))*(r01)*(r11)*(x180)*(x181)))+(((IkReal(-2.00000000000000))*(r00)*(r10)*(x179)*(x181)))+(((x178)*((r02)*(r02))))+(((x177)*(x180)*((r11)*(r11))))+(((IkReal(-1.00000000000000))*(r00)*(x181)*(x183)))+(((IkReal(-1.00000000000000))*(r10)*(x181)*(x182)))+(((r00)*(x178)*(x182)))+(((x177)*((r12)*(r12))))+(((IkReal(-2.00000000000000))*(r02)*(r12)*(x181)))+(((x178)*(x179)*((r00)*(r00))))+(((r10)*(x177)*(x183)))+(((x178)*(x180)*((r01)*(r01)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
IkReal x184=((cj6)*(r10));
IkReal x185=((cj6)*(r00));
IkReal x186=((IkReal(0.0300000000000000))*(sj1));
IkReal x187=((IkReal(1.00000000000000))*(sj1));
IkReal x188=((IkReal(0.0300000000000000))*(cj1));
IkReal x189=((IkReal(1.00000000000000))*(cj1)*(sj6));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j4)), IkReal(6.28318530717959))));
evalcond[1]=((((IkReal(-1.00000000000000))*(cj6)*(r20)))+(((r21)*(sj6))));
evalcond[2]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(r11)*(x189)))+(((cj1)*(x184)))+(((IkReal(-1.00000000000000))*(x185)*(x187)))+(((r01)*(sj1)*(sj6))));
evalcond[3]=((((IkReal(-1.00000000000000))*(cj6)*(r11)*(x188)))+(((cj6)*(r01)*(x186)))+(((r00)*(sj6)*(x186)))+(((IkReal(-1.00000000000000))*(cj1)*(py)))+(((px)*(sj1)))+(((IkReal(-1.00000000000000))*(r10)*(sj6)*(x188))));
evalcond[4]=((((IkReal(-1.00000000000000))*(r01)*(x189)))+(((sj1)*(x184)))+(((IkReal(-1.00000000000000))*(r11)*(sj6)*(x187)))+(((cj1)*(x185))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst12;
gconst12=IKsign(((((IkReal(0.449600000000000))*((sj2)*(sj2))))+(((IkReal(0.449600000000000))*((cj2)*(cj2))))));
dummyeval[0]=(((sj2)*(sj2))+((cj2)*(cj2)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
IkReal x190=((IkReal(1.00000000000000))*(cj1));
if( IKabs(((((IkReal(-1.00000000000000))*(cj6)*(r11)*(x190)))+(((cj6)*(r01)*(sj1)))+(((IkReal(-1.00000000000000))*(r10)*(sj6)*(x190)))+(((r00)*(sj1)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((cj1)*(r12)))+(((IkReal(-1.00000000000000))*(r02)*(sj1))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x191=IKatan2(((((IkReal(-1.00000000000000))*(cj6)*(r11)*(x190)))+(((cj6)*(r01)*(sj1)))+(((IkReal(-1.00000000000000))*(r10)*(sj6)*(x190)))+(((r00)*(sj1)*(sj6)))), ((((cj1)*(r12)))+(((IkReal(-1.00000000000000))*(r02)*(sj1)))));
j5array[0]=((IkReal(-1.00000000000000))*(x191));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x191))));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
IkReal x192=IKsin(j5);
IkReal x193=IKcos(j5);
IkReal x194=((IkReal(1.00000000000000))*(sj1));
IkReal x195=((sj6)*(x192));
IkReal x196=((cj6)*(x192));
evalcond[0]=((((cj1)*(r11)*(x196)))+(((IkReal(-1.00000000000000))*(r00)*(x194)*(x195)))+(((cj1)*(r12)*(x193)))+(((cj1)*(r10)*(x195)))+(((IkReal(-1.00000000000000))*(r01)*(x194)*(x196)))+(((IkReal(-1.00000000000000))*(r02)*(x193)*(x194))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst13;
gconst13=IKsign((((sj2)*(sj2))+((cj2)*(cj2))));
dummyeval[0]=(((sj2)*(sj2))+((cj2)*(cj2)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst14;
gconst14=IKsign(((((IkReal(0.200000000000000))*((cj2)*(cj2))))+(((IkReal(0.200000000000000))*((sj2)*(sj2))))));
dummyeval[0]=(((sj2)*(sj2))+((cj2)*(cj2)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x197=((IkReal(0.200000000000000))*(cj5));
IkReal x198=((IkReal(0.640000000000000))*(cj5));
IkReal x199=((cj2)*(cj6)*(r21));
IkReal x200=((r20)*(sj2)*(sj6));
IkReal x201=((r22)*(sj2)*(sj5));
IkReal x202=((cj6)*(r21)*(sj2));
IkReal x203=((cj2)*(r22)*(sj5));
IkReal x204=((cj2)*(r20)*(sj6));
if( IKabs(((gconst14)*(((((IkReal(0.200000000000000))*(x203)))+(((IkReal(-0.640000000000000))*(x201)))+(((x198)*(x202)))+(((x198)*(x200)))+(((IkReal(-1.00000000000000))*(x197)*(x204)))+(((IkReal(0.0300000000000000))*(x200)))+(((IkReal(0.0300000000000000))*(x202)))+(((IkReal(-1.00000000000000))*(x197)*(x199)))+(((IkReal(-0.614000000000000))*(cj2)*(sj2)))+(((pz)*(sj2))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst14)*(((((IkReal(-0.640000000000000))*(x203)))+(((x198)*(x204)))+(((IkReal(-0.614000000000000))*((cj2)*(cj2))))+(((x198)*(x199)))+(((IkReal(0.0300000000000000))*(x199)))+(((IkReal(0.0300000000000000))*(x204)))+(((x197)*(x202)))+(((x197)*(x200)))+(((cj2)*(pz)))+(((IkReal(-0.200000000000000))*(x201))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j3array[0]=IKatan2(((gconst14)*(((((IkReal(0.200000000000000))*(x203)))+(((IkReal(-0.640000000000000))*(x201)))+(((x198)*(x202)))+(((x198)*(x200)))+(((IkReal(-1.00000000000000))*(x197)*(x204)))+(((IkReal(0.0300000000000000))*(x200)))+(((IkReal(0.0300000000000000))*(x202)))+(((IkReal(-1.00000000000000))*(x197)*(x199)))+(((IkReal(-0.614000000000000))*(cj2)*(sj2)))+(((pz)*(sj2)))))), ((gconst14)*(((((IkReal(-0.640000000000000))*(x203)))+(((x198)*(x204)))+(((IkReal(-0.614000000000000))*((cj2)*(cj2))))+(((x198)*(x199)))+(((IkReal(0.0300000000000000))*(x199)))+(((IkReal(0.0300000000000000))*(x204)))+(((x197)*(x202)))+(((x197)*(x200)))+(((cj2)*(pz)))+(((IkReal(-0.200000000000000))*(x201)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x205=IKcos(j3);
IkReal x206=IKsin(j3);
IkReal x207=((cj6)*(r21));
IkReal x208=((IkReal(0.0300000000000000))*(sj6));
IkReal x209=((IkReal(1.00000000000000))*(r22));
IkReal x210=((r10)*(sj1));
IkReal x211=((cj5)*(sj1));
IkReal x212=((r20)*(sj6));
IkReal x213=((cj1)*(r02));
IkReal x214=((IkReal(1.00000000000000))*(sj5));
IkReal x215=((IkReal(1.00000000000000))*(cj5));
IkReal x216=((sj5)*(sj6));
IkReal x217=((cj1)*(r00));
IkReal x218=((cj1)*(cj6)*(r01));
IkReal x219=((sj2)*(x205));
IkReal x220=((cj2)*(x205));
IkReal x221=((cj2)*(x206));
IkReal x222=((sj2)*(x206));
IkReal x223=((cj6)*(r11)*(sj1));
IkReal x224=((IkReal(1.00000000000000))*(x220));
IkReal x225=((IkReal(1.00000000000000))*(x222));
IkReal x226=((x225)+(x224));
evalcond[0]=((((cj5)*(x212)))+(x221)+(((cj5)*(x207)))+(((IkReal(-1.00000000000000))*(x219)))+(((IkReal(-1.00000000000000))*(sj5)*(x209))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x207)*(x214)))+(((IkReal(-1.00000000000000))*(cj5)*(x209)))+(((IkReal(-1.00000000000000))*(x212)*(x214)))+(((IkReal(-1.00000000000000))*(x226))));
evalcond[2]=((((IkReal(-0.614000000000000))*(cj2)))+(((IkReal(0.0300000000000000))*(x207)))+(pz)+(((r20)*(x208)))+(((IkReal(-0.640000000000000))*(x221)))+(((IkReal(0.640000000000000))*(x219)))+(((IkReal(-0.200000000000000))*(x222)))+(((IkReal(-0.200000000000000))*(x220))));
evalcond[3]=((((IkReal(-1.00000000000000))*(sj6)*(x210)*(x215)))+(((sj5)*(x213)))+(((IkReal(-1.00000000000000))*(sj6)*(x215)*(x217)))+(((r12)*(sj1)*(sj5)))+(((IkReal(-1.00000000000000))*(cj6)*(r11)*(x211)))+(((IkReal(-1.00000000000000))*(x226)))+(((IkReal(-1.00000000000000))*(x215)*(x218))));
evalcond[4]=((((x210)*(x216)))+(((cj5)*(x213)))+(((sj5)*(x218)))+(((x216)*(x217)))+(((r12)*(x211)))+(x219)+(((sj5)*(x223)))+(((IkReal(-1.00000000000000))*(x221))));
evalcond[5]=((IkReal(0.150000000000000))+(((IkReal(-0.0300000000000000))*(x223)))+(((IkReal(0.200000000000000))*(x219)))+(((IkReal(0.614000000000000))*(sj2)))+(((IkReal(-1.00000000000000))*(cj1)*(px)))+(((IkReal(-0.0300000000000000))*(x218)))+(((IkReal(0.640000000000000))*(x222)))+(((IkReal(0.640000000000000))*(x220)))+(((IkReal(-1.00000000000000))*(py)*(sj1)))+(((IkReal(-0.200000000000000))*(x221)))+(((IkReal(-1.00000000000000))*(x208)*(x217)))+(((IkReal(-1.00000000000000))*(x208)*(x210))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x227=((IkReal(1.00000000000000))*(sj5));
IkReal x228=((r22)*(sj2));
IkReal x229=((cj6)*(r21));
IkReal x230=((IkReal(1.00000000000000))*(cj2));
IkReal x231=((r20)*(sj6));
IkReal x232=((cj5)*(x231));
if( IKabs(((gconst13)*(((((IkReal(-1.00000000000000))*(sj2)*(x227)*(x229)))+(((IkReal(-1.00000000000000))*(sj2)*(x227)*(x231)))+(((IkReal(-1.00000000000000))*(x230)*(x232)))+(((IkReal(-1.00000000000000))*(cj5)*(x228)))+(((cj2)*(r22)*(sj5)))+(((IkReal(-1.00000000000000))*(cj5)*(x229)*(x230))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst13)*(((((IkReal(-1.00000000000000))*(cj2)*(x227)*(x229)))+(((sj2)*(x232)))+(((IkReal(-1.00000000000000))*(x227)*(x228)))+(((IkReal(-1.00000000000000))*(cj5)*(r22)*(x230)))+(((cj5)*(sj2)*(x229)))+(((IkReal(-1.00000000000000))*(cj2)*(x227)*(x231))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j3array[0]=IKatan2(((gconst13)*(((((IkReal(-1.00000000000000))*(sj2)*(x227)*(x229)))+(((IkReal(-1.00000000000000))*(sj2)*(x227)*(x231)))+(((IkReal(-1.00000000000000))*(x230)*(x232)))+(((IkReal(-1.00000000000000))*(cj5)*(x228)))+(((cj2)*(r22)*(sj5)))+(((IkReal(-1.00000000000000))*(cj5)*(x229)*(x230)))))), ((gconst13)*(((((IkReal(-1.00000000000000))*(cj2)*(x227)*(x229)))+(((sj2)*(x232)))+(((IkReal(-1.00000000000000))*(x227)*(x228)))+(((IkReal(-1.00000000000000))*(cj5)*(r22)*(x230)))+(((cj5)*(sj2)*(x229)))+(((IkReal(-1.00000000000000))*(cj2)*(x227)*(x231)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x233=IKcos(j3);
IkReal x234=IKsin(j3);
IkReal x235=((cj6)*(r21));
IkReal x236=((IkReal(0.0300000000000000))*(sj6));
IkReal x237=((IkReal(1.00000000000000))*(r22));
IkReal x238=((r10)*(sj1));
IkReal x239=((cj5)*(sj1));
IkReal x240=((r20)*(sj6));
IkReal x241=((cj1)*(r02));
IkReal x242=((IkReal(1.00000000000000))*(sj5));
IkReal x243=((IkReal(1.00000000000000))*(cj5));
IkReal x244=((sj5)*(sj6));
IkReal x245=((cj1)*(r00));
IkReal x246=((cj1)*(cj6)*(r01));
IkReal x247=((sj2)*(x233));
IkReal x248=((cj2)*(x233));
IkReal x249=((cj2)*(x234));
IkReal x250=((sj2)*(x234));
IkReal x251=((cj6)*(r11)*(sj1));
IkReal x252=((IkReal(1.00000000000000))*(x248));
IkReal x253=((IkReal(1.00000000000000))*(x250));
IkReal x254=((x252)+(x253));
evalcond[0]=((((IkReal(-1.00000000000000))*(x247)))+(((cj5)*(x240)))+(((cj5)*(x235)))+(x249)+(((IkReal(-1.00000000000000))*(sj5)*(x237))));
evalcond[1]=((((IkReal(-1.00000000000000))*(cj5)*(x237)))+(((IkReal(-1.00000000000000))*(x235)*(x242)))+(((IkReal(-1.00000000000000))*(x240)*(x242)))+(((IkReal(-1.00000000000000))*(x254))));
evalcond[2]=((((IkReal(0.640000000000000))*(x247)))+(((IkReal(-0.614000000000000))*(cj2)))+(((IkReal(0.0300000000000000))*(x235)))+(((IkReal(-0.640000000000000))*(x249)))+(pz)+(((r20)*(x236)))+(((IkReal(-0.200000000000000))*(x250)))+(((IkReal(-0.200000000000000))*(x248))));
evalcond[3]=((((IkReal(-1.00000000000000))*(sj6)*(x243)*(x245)))+(((sj5)*(x241)))+(((IkReal(-1.00000000000000))*(x243)*(x246)))+(((IkReal(-1.00000000000000))*(cj6)*(r11)*(x239)))+(((r12)*(sj1)*(sj5)))+(((IkReal(-1.00000000000000))*(sj6)*(x238)*(x243)))+(((IkReal(-1.00000000000000))*(x254))));
evalcond[4]=((((sj5)*(x246)))+(((IkReal(-1.00000000000000))*(x249)))+(((cj5)*(x241)))+(((x238)*(x244)))+(((x244)*(x245)))+(x247)+(((sj5)*(x251)))+(((r12)*(x239))));
evalcond[5]=((IkReal(0.150000000000000))+(((IkReal(-0.0300000000000000))*(x251)))+(((IkReal(0.640000000000000))*(x248)))+(((IkReal(0.614000000000000))*(sj2)))+(((IkReal(-1.00000000000000))*(cj1)*(px)))+(((IkReal(-1.00000000000000))*(x236)*(x245)))+(((IkReal(0.200000000000000))*(x247)))+(((IkReal(-1.00000000000000))*(py)*(sj1)))+(((IkReal(-1.00000000000000))*(x236)*(x238)))+(((IkReal(0.640000000000000))*(x250)))+(((IkReal(-0.0300000000000000))*(x246)))+(((IkReal(-0.200000000000000))*(x249))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x255=(sj2)*(sj2);
IkReal x256=(cj2)*(cj2);
IkReal x257=((cj2)*(sj1));
IkReal x258=((IkReal(0.200000000000000))*(py));
IkReal x259=((cj1)*(cj2));
IkReal x260=((IkReal(0.640000000000000))*(px));
IkReal x261=((cj1)*(r00));
IkReal x262=((IkReal(0.0192000000000000))*(cj6));
IkReal x263=((IkReal(0.200000000000000))*(pz));
IkReal x264=((IkReal(0.640000000000000))*(py));
IkReal x265=((sj1)*(sj2));
IkReal x266=((r10)*(sj6));
IkReal x267=((cj1)*(sj2));
IkReal x268=((IkReal(0.640000000000000))*(pz));
IkReal x269=((IkReal(0.200000000000000))*(px));
IkReal x270=((IkReal(0.00600000000000000))*(cj6)*(r21));
IkReal x271=((IkReal(0.0192000000000000))*(cj2)*(sj6));
IkReal x272=((IkReal(0.00600000000000000))*(cj6)*(r11));
IkReal x273=((IkReal(0.00600000000000000))*(r20)*(sj6));
IkReal x274=((IkReal(0.0192000000000000))*(sj2)*(sj6));
IkReal x275=((IkReal(0.00600000000000000))*(cj6)*(r01));
IkReal x276=((IkReal(0.00600000000000000))*(sj6)*(x261));
if( IKabs(((gconst12)*(((((IkReal(-0.0960000000000000))*(sj2)))+(((r11)*(x262)*(x265)))+(((IkReal(-1.00000000000000))*(x259)*(x275)))+(((x260)*(x267)))+(((sj2)*(x270)))+(((sj2)*(x273)))+(((sj2)*(x263)))+(((IkReal(-1.00000000000000))*(x257)*(x258)))+(((IkReal(-1.00000000000000))*(x259)*(x269)))+(((x264)*(x265)))+(((IkReal(0.0300000000000000))*(cj2)))+(((cj2)*(r21)*(x262)))+(((IkReal(0.0192000000000000))*(x265)*(x266)))+(((IkReal(-0.00600000000000000))*(r00)*(sj6)*(x259)))+(((IkReal(-0.392960000000000))*(x256)))+(((IkReal(-0.392960000000000))*(x255)))+(((IkReal(-0.00600000000000000))*(x257)*(x266)))+(((IkReal(-1.00000000000000))*(x257)*(x272)))+(((x261)*(x274)))+(((r20)*(x271)))+(((r01)*(x262)*(x267)))+(((cj2)*(x268))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst12)*(((((IkReal(-0.0300000000000000))*(sj2)))+(((x267)*(x269)))+(((IkReal(-1.00000000000000))*(sj2)*(x268)))+(((IkReal(0.00600000000000000))*(x265)*(x266)))+(((IkReal(-1.00000000000000))*(r21)*(sj2)*(x262)))+(((r01)*(x259)*(x262)))+(((x258)*(x265)))+(((x259)*(x260)))+(((IkReal(0.0192000000000000))*(x257)*(x266)))+(((sj2)*(x276)))+(((IkReal(-0.0960000000000000))*(cj2)))+(((IkReal(0.0192000000000000))*(r00)*(sj6)*(x259)))+(((x257)*(x264)))+(((x265)*(x272)))+(((IkReal(-0.122800000000000))*(x256)))+(((IkReal(-0.122800000000000))*(x255)))+(((cj2)*(x273)))+(((cj2)*(x270)))+(((r11)*(x257)*(x262)))+(((x267)*(x275)))+(((IkReal(-1.00000000000000))*(r20)*(x274)))+(((cj2)*(x263))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j3array[0]=IKatan2(((gconst12)*(((((IkReal(-0.0960000000000000))*(sj2)))+(((r11)*(x262)*(x265)))+(((IkReal(-1.00000000000000))*(x259)*(x275)))+(((x260)*(x267)))+(((sj2)*(x270)))+(((sj2)*(x273)))+(((sj2)*(x263)))+(((IkReal(-1.00000000000000))*(x257)*(x258)))+(((IkReal(-1.00000000000000))*(x259)*(x269)))+(((x264)*(x265)))+(((IkReal(0.0300000000000000))*(cj2)))+(((cj2)*(r21)*(x262)))+(((IkReal(0.0192000000000000))*(x265)*(x266)))+(((IkReal(-0.00600000000000000))*(r00)*(sj6)*(x259)))+(((IkReal(-0.392960000000000))*(x256)))+(((IkReal(-0.392960000000000))*(x255)))+(((IkReal(-0.00600000000000000))*(x257)*(x266)))+(((IkReal(-1.00000000000000))*(x257)*(x272)))+(((x261)*(x274)))+(((r20)*(x271)))+(((r01)*(x262)*(x267)))+(((cj2)*(x268)))))), ((gconst12)*(((((IkReal(-0.0300000000000000))*(sj2)))+(((x267)*(x269)))+(((IkReal(-1.00000000000000))*(sj2)*(x268)))+(((IkReal(0.00600000000000000))*(x265)*(x266)))+(((IkReal(-1.00000000000000))*(r21)*(sj2)*(x262)))+(((r01)*(x259)*(x262)))+(((x258)*(x265)))+(((x259)*(x260)))+(((IkReal(0.0192000000000000))*(x257)*(x266)))+(((sj2)*(x276)))+(((IkReal(-0.0960000000000000))*(cj2)))+(((IkReal(0.0192000000000000))*(r00)*(sj6)*(x259)))+(((x257)*(x264)))+(((x265)*(x272)))+(((IkReal(-0.122800000000000))*(x256)))+(((IkReal(-0.122800000000000))*(x255)))+(((cj2)*(x273)))+(((cj2)*(x270)))+(((r11)*(x257)*(x262)))+(((x267)*(x275)))+(((IkReal(-1.00000000000000))*(r20)*(x274)))+(((cj2)*(x263)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[2];
IkReal x277=IKsin(j3);
IkReal x278=IKcos(j3);
IkReal x279=((IkReal(0.0300000000000000))*(sj6));
IkReal x280=((IkReal(0.0300000000000000))*(cj6));
IkReal x281=((IkReal(0.640000000000000))*(x278));
IkReal x282=((cj2)*(x277));
IkReal x283=((sj2)*(x277));
IkReal x284=((IkReal(0.200000000000000))*(x278));
evalcond[0]=((((IkReal(-0.614000000000000))*(cj2)))+(((IkReal(-1.00000000000000))*(cj2)*(x284)))+(((r21)*(x280)))+(((IkReal(-0.640000000000000))*(x282)))+(((sj2)*(x281)))+(((IkReal(-0.200000000000000))*(x283)))+(pz)+(((r20)*(x279))));
evalcond[1]=((IkReal(0.150000000000000))+(((IkReal(0.640000000000000))*(x283)))+(((IkReal(-1.00000000000000))*(r10)*(sj1)*(x279)))+(((sj2)*(x284)))+(((IkReal(-0.200000000000000))*(x282)))+(((IkReal(0.614000000000000))*(sj2)))+(((IkReal(-1.00000000000000))*(r11)*(sj1)*(x280)))+(((IkReal(-1.00000000000000))*(cj1)*(px)))+(((IkReal(-1.00000000000000))*(cj1)*(r01)*(x280)))+(((cj2)*(x281)))+(((IkReal(-1.00000000000000))*(py)*(sj1)))+(((IkReal(-1.00000000000000))*(cj1)*(r00)*(x279))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst15;
gconst15=IKsign((((((r20)*(r20))*((sj6)*(sj6))))+(((IkReal(2.00000000000000))*(cj6)*(r20)*(r21)*(sj6)))+((r22)*(r22))+((((cj6)*(cj6))*((r21)*(r21))))));
dummyeval[0]=(((((r20)*(r20))*((sj6)*(sj6))))+(((IkReal(2.00000000000000))*(cj6)*(r20)*(r21)*(sj6)))+((r22)*(r22))+((((cj6)*(cj6))*((r21)*(r21)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst16;
IkReal x285=((r22)*(sj6));
IkReal x286=((IkReal(1.00000000000000))*(cj1));
IkReal x287=((cj1)*(r12));
IkReal x288=((cj6)*(r21));
IkReal x289=((r20)*(sj6));
IkReal x290=((cj6)*(r22));
IkReal x291=((IkReal(1.00000000000000))*(r02)*(sj1));
gconst16=IKsign(((((IkReal(-1.00000000000000))*(r11)*(x286)*(x290)))+(((IkReal(-1.00000000000000))*(x289)*(x291)))+(((r00)*(sj1)*(x285)))+(((IkReal(-1.00000000000000))*(r10)*(x285)*(x286)))+(((r01)*(sj1)*(x290)))+(((IkReal(-1.00000000000000))*(x288)*(x291)))+(((x287)*(x288)))+(((x287)*(x289)))));
IkReal x292=((r22)*(sj6));
IkReal x293=((IkReal(1.00000000000000))*(cj1));
IkReal x294=((cj1)*(r12));
IkReal x295=((cj6)*(r21));
IkReal x296=((r20)*(sj6));
IkReal x297=((cj6)*(r22));
IkReal x298=((IkReal(1.00000000000000))*(r02)*(sj1));
dummyeval[0]=((((IkReal(-1.00000000000000))*(r10)*(x292)*(x293)))+(((IkReal(-1.00000000000000))*(r11)*(x293)*(x297)))+(((IkReal(-1.00000000000000))*(x296)*(x298)))+(((r01)*(sj1)*(x297)))+(((IkReal(-1.00000000000000))*(x295)*(x298)))+(((r00)*(sj1)*(x292)))+(((x294)*(x295)))+(((x294)*(x296))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x299=((r01)*(sj1));
IkReal x300=((cj2)*(sj3));
IkReal x301=((IkReal(1.00000000000000))*(cj1));
IkReal x302=((r10)*(sj6));
IkReal x303=((r02)*(sj1));
IkReal x304=((cj3)*(sj2));
IkReal x305=((cj6)*(x304));
IkReal x306=((r00)*(sj1)*(sj6));
if( IKabs(((gconst16)*(((((cj6)*(x299)*(x300)))+(((IkReal(-1.00000000000000))*(x300)*(x301)*(x302)))+(((IkReal(-1.00000000000000))*(cj6)*(r11)*(x300)*(x301)))+(((IkReal(-1.00000000000000))*(x299)*(x305)))+(((IkReal(-1.00000000000000))*(x304)*(x306)))+(((cj1)*(r11)*(x305)))+(((x300)*(x306)))+(((cj1)*(x302)*(x304))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst16)*(((((IkReal(-1.00000000000000))*(x303)*(x304)))+(((IkReal(-1.00000000000000))*(r12)*(x300)*(x301)))+(((x300)*(x303)))+(((cj1)*(r12)*(x304))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j5array[0]=IKatan2(((gconst16)*(((((cj6)*(x299)*(x300)))+(((IkReal(-1.00000000000000))*(x300)*(x301)*(x302)))+(((IkReal(-1.00000000000000))*(cj6)*(r11)*(x300)*(x301)))+(((IkReal(-1.00000000000000))*(x299)*(x305)))+(((IkReal(-1.00000000000000))*(x304)*(x306)))+(((cj1)*(r11)*(x305)))+(((x300)*(x306)))+(((cj1)*(x302)*(x304)))))), ((gconst16)*(((((IkReal(-1.00000000000000))*(x303)*(x304)))+(((IkReal(-1.00000000000000))*(r12)*(x300)*(x301)))+(((x300)*(x303)))+(((cj1)*(r12)*(x304)))))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x307=IKcos(j5);
IkReal x308=IKsin(j5);
IkReal x309=((IkReal(1.00000000000000))*(cj2));
IkReal x310=((IkReal(1.00000000000000))*(cj1));
IkReal x311=((r20)*(sj6));
IkReal x312=((cj6)*(r11));
IkReal x313=((r10)*(sj6));
IkReal x314=((r00)*(sj6));
IkReal x315=((cj3)*(sj2));
IkReal x316=((cj6)*(r01));
IkReal x317=((IkReal(1.00000000000000))*(sj2)*(sj3));
IkReal x318=((cj3)*(x309));
IkReal x319=((cj6)*(x307));
IkReal x320=((sj1)*(x313));
IkReal x321=((IkReal(1.00000000000000))*(x307));
IkReal x322=((sj1)*(x308));
IkReal x323=((IkReal(1.00000000000000))*(x308));
IkReal x324=((cj1)*(x308));
IkReal x325=((cj1)*(x307));
IkReal x326=((sj1)*(x307));
IkReal x327=((x318)+(x317));
evalcond[0]=((((cj2)*(sj3)))+(((IkReal(-1.00000000000000))*(r22)*(x323)))+(((x307)*(x311)))+(((IkReal(-1.00000000000000))*(x315)))+(((r21)*(x319))));
evalcond[1]=((((IkReal(-1.00000000000000))*(cj6)*(r21)*(x323)))+(((IkReal(-1.00000000000000))*(r22)*(x321)))+(((IkReal(-1.00000000000000))*(x327)))+(((IkReal(-1.00000000000000))*(x311)*(x323))));
evalcond[2]=((((r12)*(x324)))+(((IkReal(-1.00000000000000))*(x307)*(x310)*(x313)))+(((IkReal(-1.00000000000000))*(x307)*(x310)*(x312)))+(((x314)*(x326)))+(((IkReal(-1.00000000000000))*(r02)*(x322)))+(((x316)*(x326))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x314)*(x322)))+(((r12)*(x325)))+(((x313)*(x324)))+(((x312)*(x324)))+(((IkReal(-1.00000000000000))*(x316)*(x322)))+(((IkReal(-1.00000000000000))*(r02)*(sj1)*(x321))));
evalcond[4]=((((r02)*(x324)))+(((r12)*(x322)))+(((IkReal(-1.00000000000000))*(x307)*(x310)*(x314)))+(((IkReal(-1.00000000000000))*(x307)*(x310)*(x316)))+(((IkReal(-1.00000000000000))*(x327)))+(((IkReal(-1.00000000000000))*(x320)*(x321)))+(((IkReal(-1.00000000000000))*(sj1)*(x312)*(x321))));
evalcond[5]=((((r02)*(x325)))+(((IkReal(-1.00000000000000))*(sj3)*(x309)))+(((x308)*(x320)))+(((r12)*(x326)))+(((x312)*(x322)))+(x315)+(((x314)*(x324)))+(((x316)*(x324))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x328=((r20)*(sj6));
IkReal x329=((cj6)*(r21));
IkReal x330=((cj3)*(sj2));
IkReal x331=((IkReal(1.00000000000000))*(cj2)*(cj3));
IkReal x332=((IkReal(1.00000000000000))*(cj2)*(sj3));
IkReal x333=((IkReal(1.00000000000000))*(r22)*(sj2));
IkReal x334=((IkReal(1.00000000000000))*(sj2)*(sj3));
if( IKabs(((gconst15)*(((((cj2)*(r22)*(sj3)))+(((IkReal(-1.00000000000000))*(x329)*(x331)))+(((IkReal(-1.00000000000000))*(x329)*(x334)))+(((IkReal(-1.00000000000000))*(x328)*(x331)))+(((IkReal(-1.00000000000000))*(x328)*(x334)))+(((IkReal(-1.00000000000000))*(r22)*(x330))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst15)*(((((IkReal(-1.00000000000000))*(sj3)*(x333)))+(((IkReal(-1.00000000000000))*(x329)*(x332)))+(((IkReal(-1.00000000000000))*(x328)*(x332)))+(((x329)*(x330)))+(((x328)*(x330)))+(((IkReal(-1.00000000000000))*(r22)*(x331))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j5array[0]=IKatan2(((gconst15)*(((((cj2)*(r22)*(sj3)))+(((IkReal(-1.00000000000000))*(x329)*(x331)))+(((IkReal(-1.00000000000000))*(x329)*(x334)))+(((IkReal(-1.00000000000000))*(x328)*(x331)))+(((IkReal(-1.00000000000000))*(x328)*(x334)))+(((IkReal(-1.00000000000000))*(r22)*(x330)))))), ((gconst15)*(((((IkReal(-1.00000000000000))*(sj3)*(x333)))+(((IkReal(-1.00000000000000))*(x329)*(x332)))+(((IkReal(-1.00000000000000))*(x328)*(x332)))+(((x329)*(x330)))+(((x328)*(x330)))+(((IkReal(-1.00000000000000))*(r22)*(x331)))))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x335=IKcos(j5);
IkReal x336=IKsin(j5);
IkReal x337=((IkReal(1.00000000000000))*(cj2));
IkReal x338=((IkReal(1.00000000000000))*(cj1));
IkReal x339=((r20)*(sj6));
IkReal x340=((cj6)*(r11));
IkReal x341=((r10)*(sj6));
IkReal x342=((r00)*(sj6));
IkReal x343=((cj3)*(sj2));
IkReal x344=((cj6)*(r01));
IkReal x345=((IkReal(1.00000000000000))*(sj2)*(sj3));
IkReal x346=((cj3)*(x337));
IkReal x347=((cj6)*(x335));
IkReal x348=((sj1)*(x341));
IkReal x349=((IkReal(1.00000000000000))*(x335));
IkReal x350=((sj1)*(x336));
IkReal x351=((IkReal(1.00000000000000))*(x336));
IkReal x352=((cj1)*(x336));
IkReal x353=((cj1)*(x335));
IkReal x354=((sj1)*(x335));
IkReal x355=((x346)+(x345));
evalcond[0]=((((cj2)*(sj3)))+(((r21)*(x347)))+(((x335)*(x339)))+(((IkReal(-1.00000000000000))*(r22)*(x351)))+(((IkReal(-1.00000000000000))*(x343))));
evalcond[1]=((((IkReal(-1.00000000000000))*(cj6)*(r21)*(x351)))+(((IkReal(-1.00000000000000))*(r22)*(x349)))+(((IkReal(-1.00000000000000))*(x355)))+(((IkReal(-1.00000000000000))*(x339)*(x351))));
evalcond[2]=((((r12)*(x352)))+(((x344)*(x354)))+(((IkReal(-1.00000000000000))*(x335)*(x338)*(x341)))+(((IkReal(-1.00000000000000))*(x335)*(x338)*(x340)))+(((x342)*(x354)))+(((IkReal(-1.00000000000000))*(r02)*(x350))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x342)*(x350)))+(((r12)*(x353)))+(((IkReal(-1.00000000000000))*(r02)*(sj1)*(x349)))+(((x341)*(x352)))+(((x340)*(x352)))+(((IkReal(-1.00000000000000))*(x344)*(x350))));
evalcond[4]=((((r12)*(x350)))+(((IkReal(-1.00000000000000))*(x355)))+(((IkReal(-1.00000000000000))*(sj1)*(x340)*(x349)))+(((IkReal(-1.00000000000000))*(x348)*(x349)))+(((IkReal(-1.00000000000000))*(x335)*(x338)*(x344)))+(((IkReal(-1.00000000000000))*(x335)*(x338)*(x342)))+(((r02)*(x352))));
evalcond[5]=((((IkReal(-1.00000000000000))*(sj3)*(x337)))+(((x336)*(x348)))+(((r12)*(x354)))+(((x344)*(x352)))+(x343)+(((x342)*(x352)))+(((x340)*(x350)))+(((r02)*(x353))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
IkReal x356=((cj6)*(r10));
IkReal x357=((cj6)*(r00));
IkReal x358=((IkReal(0.0300000000000000))*(sj1));
IkReal x359=((IkReal(1.00000000000000))*(sj1));
IkReal x360=((IkReal(0.0300000000000000))*(cj1));
IkReal x361=((IkReal(1.00000000000000))*(cj1)*(sj6));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j4)), IkReal(6.28318530717959))));
evalcond[1]=((((IkReal(-1.00000000000000))*(cj6)*(r20)))+(((r21)*(sj6))));
evalcond[2]=((IkReal(-1.00000000000000))+(((cj1)*(x356)))+(((IkReal(-1.00000000000000))*(x357)*(x359)))+(((IkReal(-1.00000000000000))*(r11)*(x361)))+(((r01)*(sj1)*(sj6))));
evalcond[3]=((((cj6)*(r01)*(x358)))+(((r00)*(sj6)*(x358)))+(((IkReal(-1.00000000000000))*(cj1)*(py)))+(((IkReal(-1.00000000000000))*(r10)*(sj6)*(x360)))+(((px)*(sj1)))+(((IkReal(-1.00000000000000))*(cj6)*(r11)*(x360))));
evalcond[4]=((((cj1)*(x357)))+(((IkReal(-1.00000000000000))*(r01)*(x361)))+(((IkReal(-1.00000000000000))*(r11)*(sj6)*(x359)))+(((sj1)*(x356))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst17;
gconst17=IKsign(((((IkReal(0.449600000000000))*((sj2)*(sj2))))+(((IkReal(0.449600000000000))*((cj2)*(cj2))))));
dummyeval[0]=(((sj2)*(sj2))+((cj2)*(cj2)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
IkReal x362=((IkReal(1.00000000000000))*(cj1));
if( IKabs(((((cj6)*(r01)*(sj1)))+(((IkReal(-1.00000000000000))*(r10)*(sj6)*(x362)))+(((IkReal(-1.00000000000000))*(cj6)*(r11)*(x362)))+(((r00)*(sj1)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((cj1)*(r12)))+(((IkReal(-1.00000000000000))*(r02)*(sj1))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x363=IKatan2(((((cj6)*(r01)*(sj1)))+(((IkReal(-1.00000000000000))*(r10)*(sj6)*(x362)))+(((IkReal(-1.00000000000000))*(cj6)*(r11)*(x362)))+(((r00)*(sj1)*(sj6)))), ((((cj1)*(r12)))+(((IkReal(-1.00000000000000))*(r02)*(sj1)))));
j5array[0]=((IkReal(-1.00000000000000))*(x363));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x363))));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
IkReal x364=IKsin(j5);
IkReal x365=IKcos(j5);
IkReal x366=((IkReal(1.00000000000000))*(sj1));
IkReal x367=((sj6)*(x364));
IkReal x368=((cj6)*(x364));
evalcond[0]=((((IkReal(-1.00000000000000))*(r01)*(x366)*(x368)))+(((IkReal(-1.00000000000000))*(r02)*(x365)*(x366)))+(((cj1)*(r11)*(x368)))+(((cj1)*(r10)*(x367)))+(((IkReal(-1.00000000000000))*(r00)*(x366)*(x367)))+(((cj1)*(r12)*(x365))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst18;
gconst18=IKsign(((((IkReal(-1.00000000000000))*((cj2)*(cj2))))+(((IkReal(-1.00000000000000))*((sj2)*(sj2))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((cj2)*(cj2))))+(((IkReal(-1.00000000000000))*((sj2)*(sj2)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst19;
gconst19=IKsign(((((IkReal(0.200000000000000))*((cj2)*(cj2))))+(((IkReal(0.200000000000000))*((sj2)*(sj2))))));
dummyeval[0]=(((sj2)*(sj2))+((cj2)*(cj2)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x369=((IkReal(0.200000000000000))*(cj5));
IkReal x370=((IkReal(0.640000000000000))*(cj5));
IkReal x371=((cj2)*(cj6)*(r21));
IkReal x372=((r20)*(sj2)*(sj6));
IkReal x373=((r22)*(sj2)*(sj5));
IkReal x374=((cj6)*(r21)*(sj2));
IkReal x375=((cj2)*(r22)*(sj5));
IkReal x376=((cj2)*(r20)*(sj6));
if( IKabs(((gconst19)*(((((x370)*(x372)))+(((x370)*(x374)))+(((IkReal(-0.640000000000000))*(x373)))+(((IkReal(0.0300000000000000))*(x372)))+(((IkReal(0.0300000000000000))*(x374)))+(((IkReal(-0.614000000000000))*(cj2)*(sj2)))+(((IkReal(-1.00000000000000))*(x369)*(x376)))+(((IkReal(-1.00000000000000))*(x369)*(x371)))+(((pz)*(sj2)))+(((IkReal(0.200000000000000))*(x375))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst19)*(((((x370)*(x376)))+(((x370)*(x371)))+(((IkReal(-0.614000000000000))*((cj2)*(cj2))))+(((x369)*(x374)))+(((x369)*(x372)))+(((IkReal(-0.640000000000000))*(x375)))+(((IkReal(0.0300000000000000))*(x376)))+(((IkReal(0.0300000000000000))*(x371)))+(((cj2)*(pz)))+(((IkReal(-0.200000000000000))*(x373))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j3array[0]=IKatan2(((gconst19)*(((((x370)*(x372)))+(((x370)*(x374)))+(((IkReal(-0.640000000000000))*(x373)))+(((IkReal(0.0300000000000000))*(x372)))+(((IkReal(0.0300000000000000))*(x374)))+(((IkReal(-0.614000000000000))*(cj2)*(sj2)))+(((IkReal(-1.00000000000000))*(x369)*(x376)))+(((IkReal(-1.00000000000000))*(x369)*(x371)))+(((pz)*(sj2)))+(((IkReal(0.200000000000000))*(x375)))))), ((gconst19)*(((((x370)*(x376)))+(((x370)*(x371)))+(((IkReal(-0.614000000000000))*((cj2)*(cj2))))+(((x369)*(x374)))+(((x369)*(x372)))+(((IkReal(-0.640000000000000))*(x375)))+(((IkReal(0.0300000000000000))*(x376)))+(((IkReal(0.0300000000000000))*(x371)))+(((cj2)*(pz)))+(((IkReal(-0.200000000000000))*(x373)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x377=IKsin(j3);
IkReal x378=IKcos(j3);
IkReal x379=((cj6)*(r21));
IkReal x380=((IkReal(1.00000000000000))*(sj2));
IkReal x381=((IkReal(1.00000000000000))*(sj1));
IkReal x382=((IkReal(0.0300000000000000))*(sj6));
IkReal x383=((IkReal(1.00000000000000))*(r22));
IkReal x384=((r10)*(sj1));
IkReal x385=((r12)*(sj1));
IkReal x386=((r20)*(sj6));
IkReal x387=((cj1)*(r02));
IkReal x388=((IkReal(1.00000000000000))*(sj5));
IkReal x389=((IkReal(1.00000000000000))*(cj5));
IkReal x390=((sj5)*(sj6));
IkReal x391=((cj1)*(r00));
IkReal x392=((cj2)*(x377));
IkReal x393=((cj1)*(cj6)*(r01));
IkReal x394=((sj2)*(x377));
IkReal x395=((cj2)*(x378));
IkReal x396=((sj2)*(x378));
IkReal x397=((cj6)*(r11)*(sj1));
IkReal x398=((x378)*(x380));
evalcond[0]=((((IkReal(-1.00000000000000))*(sj5)*(x383)))+(((IkReal(-1.00000000000000))*(x398)))+(((cj5)*(x379)))+(x392)+(((cj5)*(x386))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x379)*(x388)))+(x395)+(x394)+(((IkReal(-1.00000000000000))*(cj5)*(x383)))+(((IkReal(-1.00000000000000))*(x386)*(x388))));
evalcond[2]=((((IkReal(-0.200000000000000))*(x395)))+(((IkReal(-0.200000000000000))*(x394)))+(((IkReal(-0.614000000000000))*(cj2)))+(((IkReal(0.640000000000000))*(x396)))+(((IkReal(-0.640000000000000))*(x392)))+(((r20)*(x382)))+(pz)+(((IkReal(0.0300000000000000))*(x379))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x395)))+(((sj5)*(x387)))+(((sj5)*(x385)))+(((IkReal(-1.00000000000000))*(x389)*(x393)))+(((IkReal(-1.00000000000000))*(cj5)*(r10)*(sj6)*(x381)))+(((IkReal(-1.00000000000000))*(x377)*(x380)))+(((IkReal(-1.00000000000000))*(sj6)*(x389)*(x391)))+(((IkReal(-1.00000000000000))*(cj5)*(cj6)*(r11)*(x381))));
evalcond[4]=((((IkReal(-1.00000000000000))*(x398)))+(x392)+(((cj5)*(x387)))+(((cj5)*(x385)))+(((sj5)*(x397)))+(((sj5)*(x393)))+(((x384)*(x390)))+(((x390)*(x391))));
evalcond[5]=((IkReal(0.150000000000000))+(((IkReal(-1.00000000000000))*(py)*(x381)))+(((IkReal(-0.200000000000000))*(x392)))+(((IkReal(0.200000000000000))*(x396)))+(((IkReal(0.640000000000000))*(x394)))+(((IkReal(0.640000000000000))*(x395)))+(((IkReal(-1.00000000000000))*(x382)*(x391)))+(((IkReal(0.614000000000000))*(sj2)))+(((IkReal(-1.00000000000000))*(cj1)*(px)))+(((IkReal(-1.00000000000000))*(x382)*(x384)))+(((IkReal(-0.0300000000000000))*(x393)))+(((IkReal(-0.0300000000000000))*(x397))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x399=((sj2)*(sj5));
IkReal x400=((cj2)*(sj5));
IkReal x401=((cj5)*(sj2));
IkReal x402=((IkReal(1.00000000000000))*(r20)*(sj6));
IkReal x403=((IkReal(1.00000000000000))*(cj2)*(r22));
IkReal x404=((cj5)*(cj6)*(r21));
IkReal x405=((IkReal(1.00000000000000))*(cj6)*(r21));
if( IKabs(((gconst18)*(((((IkReal(-1.00000000000000))*(x399)*(x405)))+(((IkReal(-1.00000000000000))*(x399)*(x402)))+(((cj2)*(cj5)*(r20)*(sj6)))+(((IkReal(-1.00000000000000))*(r22)*(x401)))+(((IkReal(-1.00000000000000))*(r22)*(x400)))+(((cj2)*(x404))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst18)*(((((IkReal(-1.00000000000000))*(x401)*(x402)))+(((IkReal(-1.00000000000000))*(x401)*(x405)))+(((IkReal(-1.00000000000000))*(x400)*(x405)))+(((IkReal(-1.00000000000000))*(x400)*(x402)))+(((r22)*(x399)))+(((IkReal(-1.00000000000000))*(cj5)*(x403))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j3array[0]=IKatan2(((gconst18)*(((((IkReal(-1.00000000000000))*(x399)*(x405)))+(((IkReal(-1.00000000000000))*(x399)*(x402)))+(((cj2)*(cj5)*(r20)*(sj6)))+(((IkReal(-1.00000000000000))*(r22)*(x401)))+(((IkReal(-1.00000000000000))*(r22)*(x400)))+(((cj2)*(x404)))))), ((gconst18)*(((((IkReal(-1.00000000000000))*(x401)*(x402)))+(((IkReal(-1.00000000000000))*(x401)*(x405)))+(((IkReal(-1.00000000000000))*(x400)*(x405)))+(((IkReal(-1.00000000000000))*(x400)*(x402)))+(((r22)*(x399)))+(((IkReal(-1.00000000000000))*(cj5)*(x403)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x406=IKsin(j3);
IkReal x407=IKcos(j3);
IkReal x408=((cj6)*(r21));
IkReal x409=((IkReal(1.00000000000000))*(sj2));
IkReal x410=((IkReal(1.00000000000000))*(sj1));
IkReal x411=((IkReal(0.0300000000000000))*(sj6));
IkReal x412=((IkReal(1.00000000000000))*(r22));
IkReal x413=((r10)*(sj1));
IkReal x414=((r12)*(sj1));
IkReal x415=((r20)*(sj6));
IkReal x416=((cj1)*(r02));
IkReal x417=((IkReal(1.00000000000000))*(sj5));
IkReal x418=((IkReal(1.00000000000000))*(cj5));
IkReal x419=((sj5)*(sj6));
IkReal x420=((cj1)*(r00));
IkReal x421=((cj2)*(x406));
IkReal x422=((cj1)*(cj6)*(r01));
IkReal x423=((sj2)*(x406));
IkReal x424=((cj2)*(x407));
IkReal x425=((sj2)*(x407));
IkReal x426=((cj6)*(r11)*(sj1));
IkReal x427=((x407)*(x409));
evalcond[0]=((((IkReal(-1.00000000000000))*(sj5)*(x412)))+(((IkReal(-1.00000000000000))*(x427)))+(((cj5)*(x408)))+(((cj5)*(x415)))+(x421));
evalcond[1]=((x424)+(x423)+(((IkReal(-1.00000000000000))*(x415)*(x417)))+(((IkReal(-1.00000000000000))*(cj5)*(x412)))+(((IkReal(-1.00000000000000))*(x408)*(x417))));
evalcond[2]=((((IkReal(-0.640000000000000))*(x421)))+(((IkReal(-0.614000000000000))*(cj2)))+(((IkReal(0.640000000000000))*(x425)))+(pz)+(((r20)*(x411)))+(((IkReal(-0.200000000000000))*(x424)))+(((IkReal(-0.200000000000000))*(x423)))+(((IkReal(0.0300000000000000))*(x408))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x424)))+(((IkReal(-1.00000000000000))*(x406)*(x409)))+(((IkReal(-1.00000000000000))*(cj5)*(cj6)*(r11)*(x410)))+(((sj5)*(x416)))+(((sj5)*(x414)))+(((IkReal(-1.00000000000000))*(cj5)*(r10)*(sj6)*(x410)))+(((IkReal(-1.00000000000000))*(sj6)*(x418)*(x420)))+(((IkReal(-1.00000000000000))*(x418)*(x422))));
evalcond[4]=((((IkReal(-1.00000000000000))*(x427)))+(((x413)*(x419)))+(((x419)*(x420)))+(((cj5)*(x416)))+(((cj5)*(x414)))+(x421)+(((sj5)*(x426)))+(((sj5)*(x422))));
evalcond[5]=((IkReal(0.150000000000000))+(((IkReal(0.200000000000000))*(x425)))+(((IkReal(0.640000000000000))*(x424)))+(((IkReal(0.640000000000000))*(x423)))+(((IkReal(0.614000000000000))*(sj2)))+(((IkReal(-1.00000000000000))*(cj1)*(px)))+(((IkReal(-1.00000000000000))*(x411)*(x413)))+(((IkReal(-0.200000000000000))*(x421)))+(((IkReal(-1.00000000000000))*(py)*(x410)))+(((IkReal(-1.00000000000000))*(x411)*(x420)))+(((IkReal(-0.0300000000000000))*(x422)))+(((IkReal(-0.0300000000000000))*(x426))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x428=(sj2)*(sj2);
IkReal x429=(cj2)*(cj2);
IkReal x430=((cj2)*(sj1));
IkReal x431=((IkReal(0.200000000000000))*(py));
IkReal x432=((cj1)*(cj2));
IkReal x433=((IkReal(0.640000000000000))*(px));
IkReal x434=((cj1)*(r00));
IkReal x435=((IkReal(0.0192000000000000))*(cj6));
IkReal x436=((IkReal(0.200000000000000))*(pz));
IkReal x437=((IkReal(0.640000000000000))*(py));
IkReal x438=((sj1)*(sj2));
IkReal x439=((r10)*(sj6));
IkReal x440=((cj1)*(sj2));
IkReal x441=((IkReal(0.640000000000000))*(pz));
IkReal x442=((IkReal(0.200000000000000))*(px));
IkReal x443=((IkReal(0.00600000000000000))*(cj6)*(r21));
IkReal x444=((IkReal(0.0192000000000000))*(cj2)*(sj6));
IkReal x445=((IkReal(0.00600000000000000))*(cj6)*(r11));
IkReal x446=((IkReal(0.00600000000000000))*(r20)*(sj6));
IkReal x447=((IkReal(0.0192000000000000))*(sj2)*(sj6));
IkReal x448=((IkReal(0.00600000000000000))*(cj6)*(r01));
IkReal x449=((IkReal(0.00600000000000000))*(sj6)*(x434));
if( IKabs(((gconst17)*(((((IkReal(-1.00000000000000))*(x430)*(x431)))+(((IkReal(-1.00000000000000))*(x430)*(x445)))+(((IkReal(-0.0960000000000000))*(sj2)))+(((x434)*(x447)))+(((cj2)*(r21)*(x435)))+(((IkReal(-1.00000000000000))*(x432)*(x442)))+(((IkReal(-1.00000000000000))*(x432)*(x448)))+(((IkReal(0.0300000000000000))*(cj2)))+(((r11)*(x435)*(x438)))+(((IkReal(-0.392960000000000))*(x428)))+(((IkReal(-0.392960000000000))*(x429)))+(((cj2)*(x441)))+(((sj2)*(x446)))+(((sj2)*(x443)))+(((sj2)*(x436)))+(((r01)*(x435)*(x440)))+(((r20)*(x444)))+(((IkReal(-0.00600000000000000))*(r00)*(sj6)*(x432)))+(((x437)*(x438)))+(((IkReal(-0.00600000000000000))*(x430)*(x439)))+(((IkReal(0.0192000000000000))*(x438)*(x439)))+(((x433)*(x440))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst17)*(((((IkReal(0.0192000000000000))*(x430)*(x439)))+(((IkReal(-0.0300000000000000))*(sj2)))+(((IkReal(-1.00000000000000))*(sj2)*(x441)))+(((IkReal(0.00600000000000000))*(x438)*(x439)))+(((r01)*(x432)*(x435)))+(((IkReal(-0.0960000000000000))*(cj2)))+(((IkReal(0.0192000000000000))*(r00)*(sj6)*(x432)))+(((x440)*(x442)))+(((x440)*(x448)))+(((r11)*(x430)*(x435)))+(((cj2)*(x443)))+(((cj2)*(x446)))+(((sj2)*(x449)))+(((IkReal(-0.122800000000000))*(x428)))+(((IkReal(-0.122800000000000))*(x429)))+(((x430)*(x437)))+(((cj2)*(x436)))+(((x431)*(x438)))+(((IkReal(-1.00000000000000))*(r20)*(x447)))+(((x438)*(x445)))+(((x432)*(x433)))+(((IkReal(-1.00000000000000))*(r21)*(sj2)*(x435))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j3array[0]=IKatan2(((gconst17)*(((((IkReal(-1.00000000000000))*(x430)*(x431)))+(((IkReal(-1.00000000000000))*(x430)*(x445)))+(((IkReal(-0.0960000000000000))*(sj2)))+(((x434)*(x447)))+(((cj2)*(r21)*(x435)))+(((IkReal(-1.00000000000000))*(x432)*(x442)))+(((IkReal(-1.00000000000000))*(x432)*(x448)))+(((IkReal(0.0300000000000000))*(cj2)))+(((r11)*(x435)*(x438)))+(((IkReal(-0.392960000000000))*(x428)))+(((IkReal(-0.392960000000000))*(x429)))+(((cj2)*(x441)))+(((sj2)*(x446)))+(((sj2)*(x443)))+(((sj2)*(x436)))+(((r01)*(x435)*(x440)))+(((r20)*(x444)))+(((IkReal(-0.00600000000000000))*(r00)*(sj6)*(x432)))+(((x437)*(x438)))+(((IkReal(-0.00600000000000000))*(x430)*(x439)))+(((IkReal(0.0192000000000000))*(x438)*(x439)))+(((x433)*(x440)))))), ((gconst17)*(((((IkReal(0.0192000000000000))*(x430)*(x439)))+(((IkReal(-0.0300000000000000))*(sj2)))+(((IkReal(-1.00000000000000))*(sj2)*(x441)))+(((IkReal(0.00600000000000000))*(x438)*(x439)))+(((r01)*(x432)*(x435)))+(((IkReal(-0.0960000000000000))*(cj2)))+(((IkReal(0.0192000000000000))*(r00)*(sj6)*(x432)))+(((x440)*(x442)))+(((x440)*(x448)))+(((r11)*(x430)*(x435)))+(((cj2)*(x443)))+(((cj2)*(x446)))+(((sj2)*(x449)))+(((IkReal(-0.122800000000000))*(x428)))+(((IkReal(-0.122800000000000))*(x429)))+(((x430)*(x437)))+(((cj2)*(x436)))+(((x431)*(x438)))+(((IkReal(-1.00000000000000))*(r20)*(x447)))+(((x438)*(x445)))+(((x432)*(x433)))+(((IkReal(-1.00000000000000))*(r21)*(sj2)*(x435)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[2];
IkReal x450=IKsin(j3);
IkReal x451=IKcos(j3);
IkReal x452=((IkReal(0.0300000000000000))*(sj6));
IkReal x453=((IkReal(0.0300000000000000))*(cj6));
IkReal x454=((IkReal(0.640000000000000))*(x451));
IkReal x455=((cj2)*(x450));
IkReal x456=((sj2)*(x450));
IkReal x457=((IkReal(0.200000000000000))*(x451));
evalcond[0]=((((IkReal(-0.200000000000000))*(x456)))+(((sj2)*(x454)))+(((IkReal(-0.614000000000000))*(cj2)))+(((r20)*(x452)))+(((IkReal(-0.640000000000000))*(x455)))+(pz)+(((r21)*(x453)))+(((IkReal(-1.00000000000000))*(cj2)*(x457))));
evalcond[1]=((IkReal(0.150000000000000))+(((IkReal(-1.00000000000000))*(r10)*(sj1)*(x452)))+(((IkReal(-0.200000000000000))*(x455)))+(((sj2)*(x457)))+(((IkReal(0.640000000000000))*(x456)))+(((IkReal(-1.00000000000000))*(r11)*(sj1)*(x453)))+(((IkReal(-1.00000000000000))*(cj1)*(r01)*(x453)))+(((IkReal(0.614000000000000))*(sj2)))+(((IkReal(-1.00000000000000))*(cj1)*(px)))+(((cj2)*(x454)))+(((IkReal(-1.00000000000000))*(py)*(sj1)))+(((IkReal(-1.00000000000000))*(cj1)*(r00)*(x452))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst20;
gconst20=IKsign((((((r20)*(r20))*((sj6)*(sj6))))+(((IkReal(2.00000000000000))*(cj6)*(r20)*(r21)*(sj6)))+((r22)*(r22))+((((cj6)*(cj6))*((r21)*(r21))))));
dummyeval[0]=(((((r20)*(r20))*((sj6)*(sj6))))+(((IkReal(2.00000000000000))*(cj6)*(r20)*(r21)*(sj6)))+((r22)*(r22))+((((cj6)*(cj6))*((r21)*(r21)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst21;
IkReal x458=((r22)*(sj6));
IkReal x459=((IkReal(1.00000000000000))*(cj1));
IkReal x460=((cj1)*(r12));
IkReal x461=((cj6)*(r21));
IkReal x462=((r20)*(sj6));
IkReal x463=((cj6)*(r22));
IkReal x464=((IkReal(1.00000000000000))*(r02)*(sj1));
gconst21=IKsign(((((IkReal(-1.00000000000000))*(x462)*(x464)))+(((IkReal(-1.00000000000000))*(r11)*(x459)*(x463)))+(((r01)*(sj1)*(x463)))+(((x460)*(x461)))+(((x460)*(x462)))+(((r00)*(sj1)*(x458)))+(((IkReal(-1.00000000000000))*(x461)*(x464)))+(((IkReal(-1.00000000000000))*(r10)*(x458)*(x459)))));
IkReal x465=((r22)*(sj6));
IkReal x466=((IkReal(1.00000000000000))*(cj1));
IkReal x467=((cj1)*(r12));
IkReal x468=((cj6)*(r21));
IkReal x469=((r20)*(sj6));
IkReal x470=((cj6)*(r22));
IkReal x471=((IkReal(1.00000000000000))*(r02)*(sj1));
dummyeval[0]=((((IkReal(-1.00000000000000))*(x468)*(x471)))+(((IkReal(-1.00000000000000))*(r11)*(x466)*(x470)))+(((IkReal(-1.00000000000000))*(x469)*(x471)))+(((x467)*(x469)))+(((x467)*(x468)))+(((IkReal(-1.00000000000000))*(r10)*(x465)*(x466)))+(((r01)*(sj1)*(x470)))+(((r00)*(sj1)*(x465))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x472=((r01)*(sj1));
IkReal x473=((cj2)*(sj3));
IkReal x474=((IkReal(1.00000000000000))*(cj1));
IkReal x475=((r10)*(sj6));
IkReal x476=((r02)*(sj1));
IkReal x477=((cj3)*(sj2));
IkReal x478=((cj6)*(x477));
IkReal x479=((r00)*(sj1)*(sj6));
if( IKabs(((gconst21)*(((((IkReal(-1.00000000000000))*(x472)*(x478)))+(((IkReal(-1.00000000000000))*(x477)*(x479)))+(((IkReal(-1.00000000000000))*(x473)*(x474)*(x475)))+(((cj6)*(x472)*(x473)))+(((x473)*(x479)))+(((IkReal(-1.00000000000000))*(cj6)*(r11)*(x473)*(x474)))+(((cj1)*(r11)*(x478)))+(((cj1)*(x475)*(x477))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst21)*(((((IkReal(-1.00000000000000))*(r12)*(x473)*(x474)))+(((IkReal(-1.00000000000000))*(x476)*(x477)))+(((x473)*(x476)))+(((cj1)*(r12)*(x477))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j5array[0]=IKatan2(((gconst21)*(((((IkReal(-1.00000000000000))*(x472)*(x478)))+(((IkReal(-1.00000000000000))*(x477)*(x479)))+(((IkReal(-1.00000000000000))*(x473)*(x474)*(x475)))+(((cj6)*(x472)*(x473)))+(((x473)*(x479)))+(((IkReal(-1.00000000000000))*(cj6)*(r11)*(x473)*(x474)))+(((cj1)*(r11)*(x478)))+(((cj1)*(x475)*(x477)))))), ((gconst21)*(((((IkReal(-1.00000000000000))*(r12)*(x473)*(x474)))+(((IkReal(-1.00000000000000))*(x476)*(x477)))+(((x473)*(x476)))+(((cj1)*(r12)*(x477)))))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x480=IKcos(j5);
IkReal x481=IKsin(j5);
IkReal x482=((cj2)*(sj3));
IkReal x483=((IkReal(1.00000000000000))*(cj1));
IkReal x484=((r20)*(sj6));
IkReal x485=((cj6)*(r11));
IkReal x486=((IkReal(1.00000000000000))*(cj3));
IkReal x487=((sj2)*(sj3));
IkReal x488=((r10)*(sj6));
IkReal x489=((r00)*(sj6));
IkReal x490=((cj6)*(r01));
IkReal x491=((sj2)*(x486));
IkReal x492=((cj6)*(x480));
IkReal x493=((sj1)*(x488));
IkReal x494=((IkReal(1.00000000000000))*(x480));
IkReal x495=((sj1)*(x481));
IkReal x496=((IkReal(1.00000000000000))*(x481));
IkReal x497=((cj1)*(x481));
IkReal x498=((cj1)*(x480));
IkReal x499=((sj1)*(x480));
evalcond[0]=((((IkReal(-1.00000000000000))*(x491)))+(x482)+(((x480)*(x484)))+(((IkReal(-1.00000000000000))*(r22)*(x496)))+(((r21)*(x492))));
evalcond[1]=((((cj2)*(cj3)))+(x487)+(((IkReal(-1.00000000000000))*(r22)*(x494)))+(((IkReal(-1.00000000000000))*(x484)*(x496)))+(((IkReal(-1.00000000000000))*(cj6)*(r21)*(x496))));
evalcond[2]=((((x489)*(x499)))+(((x490)*(x499)))+(((r12)*(x497)))+(((IkReal(-1.00000000000000))*(r02)*(x495)))+(((IkReal(-1.00000000000000))*(x480)*(x483)*(x488)))+(((IkReal(-1.00000000000000))*(x480)*(x483)*(x485))));
evalcond[3]=((((x488)*(x497)))+(((IkReal(-1.00000000000000))*(x489)*(x495)))+(((r12)*(x498)))+(((x485)*(x497)))+(((IkReal(-1.00000000000000))*(r02)*(sj1)*(x494)))+(((IkReal(-1.00000000000000))*(x490)*(x495))));
evalcond[4]=((((r02)*(x497)))+(((IkReal(-1.00000000000000))*(x480)*(x483)*(x490)))+(((IkReal(-1.00000000000000))*(sj1)*(x485)*(x494)))+(((IkReal(-1.00000000000000))*(x493)*(x494)))+(((IkReal(-1.00000000000000))*(cj2)*(x486)))+(((IkReal(-1.00000000000000))*(x487)))+(((r12)*(x495)))+(((IkReal(-1.00000000000000))*(x480)*(x483)*(x489))));
evalcond[5]=((((IkReal(-1.00000000000000))*(x491)))+(((r02)*(x498)))+(((x489)*(x497)))+(((x490)*(x497)))+(((r12)*(x499)))+(x482)+(((x481)*(x493)))+(((x485)*(x495))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x500=((r22)*(sj2));
IkReal x501=((cj2)*(cj3));
IkReal x502=((r20)*(sj6));
IkReal x503=((cj6)*(r21));
IkReal x504=((cj3)*(sj2));
IkReal x505=((sj2)*(sj3));
IkReal x506=((IkReal(1.00000000000000))*(cj2)*(sj3));
if( IKabs(((gconst20)*(((((cj2)*(r22)*(sj3)))+(((x501)*(x503)))+(((x501)*(x502)))+(((x503)*(x505)))+(((x502)*(x505)))+(((IkReal(-1.00000000000000))*(cj3)*(x500))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst20)*(((((sj3)*(x500)))+(((IkReal(-1.00000000000000))*(x502)*(x506)))+(((r22)*(x501)))+(((IkReal(-1.00000000000000))*(x503)*(x506)))+(((x503)*(x504)))+(((x502)*(x504))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j5array[0]=IKatan2(((gconst20)*(((((cj2)*(r22)*(sj3)))+(((x501)*(x503)))+(((x501)*(x502)))+(((x503)*(x505)))+(((x502)*(x505)))+(((IkReal(-1.00000000000000))*(cj3)*(x500)))))), ((gconst20)*(((((sj3)*(x500)))+(((IkReal(-1.00000000000000))*(x502)*(x506)))+(((r22)*(x501)))+(((IkReal(-1.00000000000000))*(x503)*(x506)))+(((x503)*(x504)))+(((x502)*(x504)))))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x507=IKcos(j5);
IkReal x508=IKsin(j5);
IkReal x509=((cj2)*(sj3));
IkReal x510=((IkReal(1.00000000000000))*(cj1));
IkReal x511=((r20)*(sj6));
IkReal x512=((cj6)*(r11));
IkReal x513=((IkReal(1.00000000000000))*(cj3));
IkReal x514=((sj2)*(sj3));
IkReal x515=((r10)*(sj6));
IkReal x516=((r00)*(sj6));
IkReal x517=((cj6)*(r01));
IkReal x518=((sj2)*(x513));
IkReal x519=((cj6)*(x507));
IkReal x520=((sj1)*(x515));
IkReal x521=((IkReal(1.00000000000000))*(x507));
IkReal x522=((sj1)*(x508));
IkReal x523=((IkReal(1.00000000000000))*(x508));
IkReal x524=((cj1)*(x508));
IkReal x525=((cj1)*(x507));
IkReal x526=((sj1)*(x507));
evalcond[0]=((((x507)*(x511)))+(x509)+(((r21)*(x519)))+(((IkReal(-1.00000000000000))*(x518)))+(((IkReal(-1.00000000000000))*(r22)*(x523))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x511)*(x523)))+(((cj2)*(cj3)))+(((IkReal(-1.00000000000000))*(cj6)*(r21)*(x523)))+(x514)+(((IkReal(-1.00000000000000))*(r22)*(x521))));
evalcond[2]=((((IkReal(-1.00000000000000))*(r02)*(x522)))+(((r12)*(x524)))+(((x516)*(x526)))+(((x517)*(x526)))+(((IkReal(-1.00000000000000))*(x507)*(x510)*(x512)))+(((IkReal(-1.00000000000000))*(x507)*(x510)*(x515))));
evalcond[3]=((((r12)*(x525)))+(((x515)*(x524)))+(((IkReal(-1.00000000000000))*(x517)*(x522)))+(((IkReal(-1.00000000000000))*(x516)*(x522)))+(((IkReal(-1.00000000000000))*(r02)*(sj1)*(x521)))+(((x512)*(x524))));
evalcond[4]=((((r02)*(x524)))+(((IkReal(-1.00000000000000))*(x520)*(x521)))+(((r12)*(x522)))+(((IkReal(-1.00000000000000))*(x514)))+(((IkReal(-1.00000000000000))*(cj2)*(x513)))+(((IkReal(-1.00000000000000))*(sj1)*(x512)*(x521)))+(((IkReal(-1.00000000000000))*(x507)*(x510)*(x517)))+(((IkReal(-1.00000000000000))*(x507)*(x510)*(x516))));
evalcond[5]=((((r02)*(x525)))+(((r12)*(x526)))+(((x516)*(x524)))+(((x517)*(x524)))+(((x508)*(x520)))+(((x512)*(x522)))+(x509)+(((IkReal(-1.00000000000000))*(x518))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x527=((sj4)*(sj6));
IkReal x528=((IkReal(1.00000000000000))*(cj1));
IkReal x529=((sj1)*(sj4));
if( IKabs(((gconst3)*(((((IkReal(-1.00000000000000))*(r10)*(x527)*(x528)))+(((cj6)*(r01)*(x529)))+(((r00)*(sj1)*(x527)))+(((IkReal(-1.00000000000000))*(cj6)*(r11)*(sj4)*(x528))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst3)*(((((r02)*(x529)))+(((IkReal(-1.00000000000000))*(r12)*(sj4)*(x528))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j5array[0]=IKatan2(((gconst3)*(((((IkReal(-1.00000000000000))*(r10)*(x527)*(x528)))+(((cj6)*(r01)*(x529)))+(((r00)*(sj1)*(x527)))+(((IkReal(-1.00000000000000))*(cj6)*(r11)*(sj4)*(x528)))))), ((gconst3)*(((((r02)*(x529)))+(((IkReal(-1.00000000000000))*(r12)*(sj4)*(x528)))))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[2];
IkReal x530=IKcos(j5);
IkReal x531=IKsin(j5);
IkReal x532=((r00)*(sj1));
IkReal x533=((cj1)*(r10));
IkReal x534=((r01)*(sj1));
IkReal x535=((cj1)*(r12));
IkReal x536=((r02)*(sj1));
IkReal x537=((cj1)*(r11));
IkReal x538=((sj6)*(x530));
IkReal x539=((cj6)*(x530));
IkReal x540=((IkReal(1.00000000000000))*(x531));
evalcond[0]=((((IkReal(-1.00000000000000))*(x537)*(x539)))+(((x531)*(x535)))+(((x534)*(x539)))+(((IkReal(-1.00000000000000))*(x533)*(x538)))+(((IkReal(-1.00000000000000))*(x536)*(x540)))+(((x532)*(x538))));
evalcond[1]=((((sj6)*(x531)*(x533)))+(sj4)+(((IkReal(-1.00000000000000))*(sj6)*(x532)*(x540)))+(((IkReal(-1.00000000000000))*(cj6)*(x534)*(x540)))+(((cj6)*(x531)*(x537)))+(((x530)*(x535)))+(((IkReal(-1.00000000000000))*(x530)*(x536))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst4;
gconst4=IKsign(((((sj4)*((sj2)*(sj2))))+(((sj4)*((cj2)*(cj2))))));
dummyeval[0]=((((sj4)*((sj2)*(sj2))))+(((sj4)*((cj2)*(cj2)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst5;
gconst5=IKsign(((((sj4)*((sj2)*(sj2))))+(((sj4)*((cj2)*(cj2))))));
dummyeval[0]=((((sj4)*((sj2)*(sj2))))+(((sj4)*((cj2)*(cj2)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
IkReal x541=((cj1)*(cj5));
IkReal x542=((IkReal(1.00000000000000))*(sj6));
IkReal x543=((r00)*(sj1));
IkReal x544=((IkReal(0.0300000000000000))*(sj6));
IkReal x545=((IkReal(1.00000000000000))*(cj6));
IkReal x546=((cj1)*(sj5));
IkReal x547=((cj1)*(cj6));
IkReal x548=((cj6)*(sj1));
IkReal x549=((r01)*(sj1));
IkReal x550=((IkReal(1.00000000000000))*(r02)*(sj1));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j4)), IkReal(6.28318530717959))));
evalcond[1]=((((r21)*(sj6)))+(((IkReal(-1.00000000000000))*(r20)*(x545))));
evalcond[2]=((IkReal(1.00000000000000))+(((r10)*(x547)))+(((IkReal(-1.00000000000000))*(cj1)*(r11)*(x542)))+(((sj6)*(x549)))+(((IkReal(-1.00000000000000))*(x543)*(x545))));
evalcond[3]=((((IkReal(-0.0300000000000000))*(r11)*(x547)))+(((IkReal(-1.00000000000000))*(cj1)*(py)))+(((x543)*(x544)))+(((IkReal(0.0300000000000000))*(r01)*(x548)))+(((px)*(sj1)))+(((IkReal(-1.00000000000000))*(cj1)*(r10)*(x544))));
evalcond[4]=((((IkReal(-1.00000000000000))*(r11)*(sj1)*(x542)))+(((r10)*(x548)))+(((IkReal(-1.00000000000000))*(cj1)*(r01)*(x542)))+(((r00)*(x547))));
evalcond[5]=((((cj5)*(r01)*(x548)))+(((IkReal(-1.00000000000000))*(r11)*(x541)*(x545)))+(((IkReal(-1.00000000000000))*(sj5)*(x550)))+(((cj5)*(sj6)*(x543)))+(((r12)*(x546)))+(((IkReal(-1.00000000000000))*(r10)*(x541)*(x542))));
evalcond[6]=((((IkReal(-1.00000000000000))*(cj5)*(x550)))+(((IkReal(-1.00000000000000))*(sj5)*(x542)*(x543)))+(((r10)*(sj6)*(x546)))+(((r12)*(x541)))+(((IkReal(-1.00000000000000))*(sj5)*(x545)*(x549)))+(((cj6)*(r11)*(x546))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst6;
gconst6=IKsign((((sj2)*(sj2))+((cj2)*(cj2))));
dummyeval[0]=(((sj2)*(sj2))+((cj2)*(cj2)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst7;
gconst7=IKsign(((((IkReal(0.200000000000000))*((cj2)*(cj2))))+(((IkReal(0.200000000000000))*((sj2)*(sj2))))));
dummyeval[0]=(((sj2)*(sj2))+((cj2)*(cj2)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x551=((IkReal(0.200000000000000))*(cj5));
IkReal x552=((IkReal(0.640000000000000))*(cj5));
IkReal x553=((cj2)*(cj6)*(r21));
IkReal x554=((r20)*(sj2)*(sj6));
IkReal x555=((r22)*(sj2)*(sj5));
IkReal x556=((cj6)*(r21)*(sj2));
IkReal x557=((cj2)*(r22)*(sj5));
IkReal x558=((cj2)*(r20)*(sj6));
if( IKabs(((gconst7)*(((((IkReal(0.200000000000000))*(x557)))+(((IkReal(-0.640000000000000))*(x555)))+(((IkReal(0.0300000000000000))*(x554)))+(((IkReal(0.0300000000000000))*(x556)))+(((IkReal(-1.00000000000000))*(x551)*(x553)))+(((IkReal(-1.00000000000000))*(x551)*(x558)))+(((IkReal(-0.614000000000000))*(cj2)*(sj2)))+(((pz)*(sj2)))+(((x552)*(x554)))+(((x552)*(x556))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst7)*(((((IkReal(-0.200000000000000))*(x555)))+(((IkReal(-0.614000000000000))*((cj2)*(cj2))))+(((IkReal(-0.640000000000000))*(x557)))+(((IkReal(0.0300000000000000))*(x558)))+(((IkReal(0.0300000000000000))*(x553)))+(((cj2)*(pz)))+(((x551)*(x554)))+(((x551)*(x556)))+(((x552)*(x553)))+(((x552)*(x558))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j3array[0]=IKatan2(((gconst7)*(((((IkReal(0.200000000000000))*(x557)))+(((IkReal(-0.640000000000000))*(x555)))+(((IkReal(0.0300000000000000))*(x554)))+(((IkReal(0.0300000000000000))*(x556)))+(((IkReal(-1.00000000000000))*(x551)*(x553)))+(((IkReal(-1.00000000000000))*(x551)*(x558)))+(((IkReal(-0.614000000000000))*(cj2)*(sj2)))+(((pz)*(sj2)))+(((x552)*(x554)))+(((x552)*(x556)))))), ((gconst7)*(((((IkReal(-0.200000000000000))*(x555)))+(((IkReal(-0.614000000000000))*((cj2)*(cj2))))+(((IkReal(-0.640000000000000))*(x557)))+(((IkReal(0.0300000000000000))*(x558)))+(((IkReal(0.0300000000000000))*(x553)))+(((cj2)*(pz)))+(((x551)*(x554)))+(((x551)*(x556)))+(((x552)*(x553)))+(((x552)*(x558)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x559=IKcos(j3);
IkReal x560=IKsin(j3);
IkReal x561=((cj6)*(r21));
IkReal x562=((IkReal(0.0300000000000000))*(sj6));
IkReal x563=((IkReal(1.00000000000000))*(r22));
IkReal x564=((r10)*(sj1));
IkReal x565=((cj5)*(sj1));
IkReal x566=((r20)*(sj6));
IkReal x567=((cj1)*(r02));
IkReal x568=((IkReal(1.00000000000000))*(sj5));
IkReal x569=((IkReal(1.00000000000000))*(cj5));
IkReal x570=((sj5)*(sj6));
IkReal x571=((cj1)*(r00));
IkReal x572=((cj1)*(cj6)*(r01));
IkReal x573=((sj2)*(x559));
IkReal x574=((cj2)*(x559));
IkReal x575=((cj2)*(x560));
IkReal x576=((sj2)*(x560));
IkReal x577=((cj6)*(r11)*(sj1));
IkReal x578=((IkReal(1.00000000000000))*(x574));
IkReal x579=((IkReal(1.00000000000000))*(x576));
IkReal x580=((x579)+(x578));
evalcond[0]=((((IkReal(-1.00000000000000))*(x573)))+(((IkReal(-1.00000000000000))*(sj5)*(x563)))+(x575)+(((cj5)*(x561)))+(((cj5)*(x566))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x566)*(x568)))+(((IkReal(-1.00000000000000))*(cj5)*(x563)))+(((IkReal(-1.00000000000000))*(x580)))+(((IkReal(-1.00000000000000))*(x561)*(x568))));
evalcond[2]=((((IkReal(0.640000000000000))*(x573)))+(((IkReal(-0.614000000000000))*(cj2)))+(((IkReal(-0.640000000000000))*(x575)))+(((IkReal(-0.200000000000000))*(x574)))+(((IkReal(-0.200000000000000))*(x576)))+(pz)+(((r20)*(x562)))+(((IkReal(0.0300000000000000))*(x561))));
evalcond[3]=((((IkReal(-1.00000000000000))*(cj6)*(r11)*(x565)))+(((IkReal(-1.00000000000000))*(x569)*(x572)))+(((IkReal(-1.00000000000000))*(sj6)*(x569)*(x571)))+(((IkReal(-1.00000000000000))*(sj6)*(x564)*(x569)))+(((r12)*(sj1)*(sj5)))+(((sj5)*(x567)))+(((IkReal(-1.00000000000000))*(x580))));
evalcond[4]=((((IkReal(-1.00000000000000))*(x575)))+(((x564)*(x570)))+(x573)+(((r12)*(x565)))+(((sj5)*(x577)))+(((sj5)*(x572)))+(((cj5)*(x567)))+(((x570)*(x571))));
evalcond[5]=((IkReal(0.150000000000000))+(((IkReal(0.640000000000000))*(x574)))+(((IkReal(0.640000000000000))*(x576)))+(((IkReal(0.200000000000000))*(x573)))+(((IkReal(0.614000000000000))*(sj2)))+(((IkReal(-1.00000000000000))*(cj1)*(px)))+(((IkReal(-0.200000000000000))*(x575)))+(((IkReal(-1.00000000000000))*(x562)*(x564)))+(((IkReal(-0.0300000000000000))*(x572)))+(((IkReal(-0.0300000000000000))*(x577)))+(((IkReal(-1.00000000000000))*(py)*(sj1)))+(((IkReal(-1.00000000000000))*(x562)*(x571))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x581=((cj5)*(sj2));
IkReal x582=((cj6)*(r21));
IkReal x583=((r20)*(sj6));
IkReal x584=((IkReal(1.00000000000000))*(cj2));
IkReal x585=((IkReal(1.00000000000000))*(sj2)*(sj5));
if( IKabs(((gconst6)*(((((IkReal(-1.00000000000000))*(x582)*(x585)))+(((cj2)*(r22)*(sj5)))+(((IkReal(-1.00000000000000))*(r22)*(x581)))+(((IkReal(-1.00000000000000))*(x583)*(x585)))+(((IkReal(-1.00000000000000))*(cj5)*(x582)*(x584)))+(((IkReal(-1.00000000000000))*(cj5)*(x583)*(x584))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst6)*(((((IkReal(-1.00000000000000))*(r22)*(x585)))+(((x581)*(x583)))+(((x581)*(x582)))+(((IkReal(-1.00000000000000))*(cj5)*(r22)*(x584)))+(((IkReal(-1.00000000000000))*(sj5)*(x583)*(x584)))+(((IkReal(-1.00000000000000))*(sj5)*(x582)*(x584))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j3array[0]=IKatan2(((gconst6)*(((((IkReal(-1.00000000000000))*(x582)*(x585)))+(((cj2)*(r22)*(sj5)))+(((IkReal(-1.00000000000000))*(r22)*(x581)))+(((IkReal(-1.00000000000000))*(x583)*(x585)))+(((IkReal(-1.00000000000000))*(cj5)*(x582)*(x584)))+(((IkReal(-1.00000000000000))*(cj5)*(x583)*(x584)))))), ((gconst6)*(((((IkReal(-1.00000000000000))*(r22)*(x585)))+(((x581)*(x583)))+(((x581)*(x582)))+(((IkReal(-1.00000000000000))*(cj5)*(r22)*(x584)))+(((IkReal(-1.00000000000000))*(sj5)*(x583)*(x584)))+(((IkReal(-1.00000000000000))*(sj5)*(x582)*(x584)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x586=IKcos(j3);
IkReal x587=IKsin(j3);
IkReal x588=((cj6)*(r21));
IkReal x589=((IkReal(0.0300000000000000))*(sj6));
IkReal x590=((IkReal(1.00000000000000))*(r22));
IkReal x591=((r10)*(sj1));
IkReal x592=((cj5)*(sj1));
IkReal x593=((r20)*(sj6));
IkReal x594=((cj1)*(r02));
IkReal x595=((IkReal(1.00000000000000))*(sj5));
IkReal x596=((IkReal(1.00000000000000))*(cj5));
IkReal x597=((sj5)*(sj6));
IkReal x598=((cj1)*(r00));
IkReal x599=((cj1)*(cj6)*(r01));
IkReal x600=((sj2)*(x586));
IkReal x601=((cj2)*(x586));
IkReal x602=((cj2)*(x587));
IkReal x603=((sj2)*(x587));
IkReal x604=((cj6)*(r11)*(sj1));
IkReal x605=((IkReal(1.00000000000000))*(x601));
IkReal x606=((IkReal(1.00000000000000))*(x603));
IkReal x607=((x606)+(x605));
evalcond[0]=((((IkReal(-1.00000000000000))*(x600)))+(((IkReal(-1.00000000000000))*(sj5)*(x590)))+(((cj5)*(x588)))+(x602)+(((cj5)*(x593))));
evalcond[1]=((((IkReal(-1.00000000000000))*(cj5)*(x590)))+(((IkReal(-1.00000000000000))*(x588)*(x595)))+(((IkReal(-1.00000000000000))*(x593)*(x595)))+(((IkReal(-1.00000000000000))*(x607))));
evalcond[2]=((((r20)*(x589)))+(((IkReal(0.640000000000000))*(x600)))+(((IkReal(-0.614000000000000))*(cj2)))+(((IkReal(0.0300000000000000))*(x588)))+(((IkReal(-0.640000000000000))*(x602)))+(pz)+(((IkReal(-0.200000000000000))*(x603)))+(((IkReal(-0.200000000000000))*(x601))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x596)*(x599)))+(((IkReal(-1.00000000000000))*(sj6)*(x596)*(x598)))+(((IkReal(-1.00000000000000))*(cj6)*(r11)*(x592)))+(((r12)*(sj1)*(sj5)))+(((IkReal(-1.00000000000000))*(x607)))+(((IkReal(-1.00000000000000))*(sj6)*(x591)*(x596)))+(((sj5)*(x594))));
evalcond[4]=((((IkReal(-1.00000000000000))*(x602)))+(((r12)*(x592)))+(x600)+(((sj5)*(x604)))+(((x597)*(x598)))+(((x591)*(x597)))+(((cj5)*(x594)))+(((sj5)*(x599))));
evalcond[5]=((IkReal(0.150000000000000))+(((IkReal(-0.0300000000000000))*(x599)))+(((IkReal(0.640000000000000))*(x603)))+(((IkReal(0.640000000000000))*(x601)))+(((IkReal(-1.00000000000000))*(x589)*(x591)))+(((IkReal(-1.00000000000000))*(x589)*(x598)))+(((IkReal(-0.0300000000000000))*(x604)))+(((IkReal(0.614000000000000))*(sj2)))+(((IkReal(-1.00000000000000))*(cj1)*(px)))+(((IkReal(0.200000000000000))*(x600)))+(((IkReal(-0.200000000000000))*(x602)))+(((IkReal(-1.00000000000000))*(py)*(sj1))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
IkReal x608=((cj1)*(cj5));
IkReal x609=((IkReal(1.00000000000000))*(sj6));
IkReal x610=((r00)*(sj1));
IkReal x611=((IkReal(0.0300000000000000))*(sj6));
IkReal x612=((IkReal(1.00000000000000))*(cj6));
IkReal x613=((cj1)*(sj5));
IkReal x614=((cj1)*(cj6));
IkReal x615=((cj6)*(sj1));
IkReal x616=((r01)*(sj1));
IkReal x617=((IkReal(1.00000000000000))*(r02)*(sj1));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j4)), IkReal(6.28318530717959))));
evalcond[1]=((((IkReal(-1.00000000000000))*(r20)*(x612)))+(((r21)*(sj6))));
evalcond[2]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(cj1)*(r11)*(x609)))+(((IkReal(-1.00000000000000))*(x610)*(x612)))+(((r10)*(x614)))+(((sj6)*(x616))));
evalcond[3]=((((IkReal(-0.0300000000000000))*(r11)*(x614)))+(((IkReal(-1.00000000000000))*(cj1)*(r10)*(x611)))+(((IkReal(0.0300000000000000))*(r01)*(x615)))+(((IkReal(-1.00000000000000))*(cj1)*(py)))+(((px)*(sj1)))+(((x610)*(x611))));
evalcond[4]=((((r00)*(x614)))+(((IkReal(-1.00000000000000))*(r11)*(sj1)*(x609)))+(((IkReal(-1.00000000000000))*(cj1)*(r01)*(x609)))+(((r10)*(x615))));
evalcond[5]=((((IkReal(-1.00000000000000))*(r10)*(x608)*(x609)))+(((cj5)*(sj6)*(x610)))+(((IkReal(-1.00000000000000))*(sj5)*(x617)))+(((cj5)*(r01)*(x615)))+(((r12)*(x613)))+(((IkReal(-1.00000000000000))*(r11)*(x608)*(x612))));
evalcond[6]=((((IkReal(-1.00000000000000))*(sj5)*(x612)*(x616)))+(((r12)*(x608)))+(((IkReal(-1.00000000000000))*(cj5)*(x617)))+(((cj6)*(r11)*(x613)))+(((r10)*(sj6)*(x613)))+(((IkReal(-1.00000000000000))*(sj5)*(x609)*(x610))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst8;
gconst8=IKsign(((((IkReal(-1.00000000000000))*((cj2)*(cj2))))+(((IkReal(-1.00000000000000))*((sj2)*(sj2))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((cj2)*(cj2))))+(((IkReal(-1.00000000000000))*((sj2)*(sj2)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst9;
gconst9=IKsign(((((IkReal(0.200000000000000))*((cj2)*(cj2))))+(((IkReal(0.200000000000000))*((sj2)*(sj2))))));
dummyeval[0]=(((sj2)*(sj2))+((cj2)*(cj2)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x618=((IkReal(0.200000000000000))*(cj5));
IkReal x619=((IkReal(0.640000000000000))*(cj5));
IkReal x620=((cj2)*(cj6)*(r21));
IkReal x621=((r20)*(sj2)*(sj6));
IkReal x622=((r22)*(sj2)*(sj5));
IkReal x623=((cj6)*(r21)*(sj2));
IkReal x624=((cj2)*(r22)*(sj5));
IkReal x625=((cj2)*(r20)*(sj6));
if( IKabs(((gconst9)*(((((IkReal(0.200000000000000))*(x624)))+(((IkReal(0.0300000000000000))*(x623)))+(((IkReal(0.0300000000000000))*(x621)))+(((x619)*(x623)))+(((x619)*(x621)))+(((IkReal(-0.614000000000000))*(cj2)*(sj2)))+(((pz)*(sj2)))+(((IkReal(-1.00000000000000))*(x618)*(x625)))+(((IkReal(-1.00000000000000))*(x618)*(x620)))+(((IkReal(-0.640000000000000))*(x622))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst9)*(((((IkReal(-0.200000000000000))*(x622)))+(((IkReal(-0.614000000000000))*((cj2)*(cj2))))+(((IkReal(0.0300000000000000))*(x625)))+(((IkReal(0.0300000000000000))*(x620)))+(((x619)*(x625)))+(((x619)*(x620)))+(((x618)*(x623)))+(((x618)*(x621)))+(((cj2)*(pz)))+(((IkReal(-0.640000000000000))*(x624))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j3array[0]=IKatan2(((gconst9)*(((((IkReal(0.200000000000000))*(x624)))+(((IkReal(0.0300000000000000))*(x623)))+(((IkReal(0.0300000000000000))*(x621)))+(((x619)*(x623)))+(((x619)*(x621)))+(((IkReal(-0.614000000000000))*(cj2)*(sj2)))+(((pz)*(sj2)))+(((IkReal(-1.00000000000000))*(x618)*(x625)))+(((IkReal(-1.00000000000000))*(x618)*(x620)))+(((IkReal(-0.640000000000000))*(x622)))))), ((gconst9)*(((((IkReal(-0.200000000000000))*(x622)))+(((IkReal(-0.614000000000000))*((cj2)*(cj2))))+(((IkReal(0.0300000000000000))*(x625)))+(((IkReal(0.0300000000000000))*(x620)))+(((x619)*(x625)))+(((x619)*(x620)))+(((x618)*(x623)))+(((x618)*(x621)))+(((cj2)*(pz)))+(((IkReal(-0.640000000000000))*(x624)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x626=IKsin(j3);
IkReal x627=IKcos(j3);
IkReal x628=((cj6)*(r21));
IkReal x629=((IkReal(1.00000000000000))*(sj2));
IkReal x630=((IkReal(1.00000000000000))*(sj1));
IkReal x631=((IkReal(0.0300000000000000))*(sj6));
IkReal x632=((IkReal(1.00000000000000))*(r22));
IkReal x633=((r10)*(sj1));
IkReal x634=((r12)*(sj1));
IkReal x635=((r20)*(sj6));
IkReal x636=((cj1)*(r02));
IkReal x637=((IkReal(1.00000000000000))*(sj5));
IkReal x638=((IkReal(1.00000000000000))*(cj5));
IkReal x639=((sj5)*(sj6));
IkReal x640=((cj1)*(r00));
IkReal x641=((cj2)*(x626));
IkReal x642=((cj1)*(cj6)*(r01));
IkReal x643=((sj2)*(x626));
IkReal x644=((cj2)*(x627));
IkReal x645=((sj2)*(x627));
IkReal x646=((cj6)*(r11)*(sj1));
IkReal x647=((x627)*(x629));
evalcond[0]=((((cj5)*(x628)))+(((cj5)*(x635)))+(((IkReal(-1.00000000000000))*(x647)))+(((IkReal(-1.00000000000000))*(sj5)*(x632)))+(x641));
evalcond[1]=((((IkReal(-1.00000000000000))*(x628)*(x637)))+(((IkReal(-1.00000000000000))*(cj5)*(x632)))+(((IkReal(-1.00000000000000))*(x635)*(x637)))+(x644)+(x643));
evalcond[2]=((((IkReal(-0.614000000000000))*(cj2)))+(((IkReal(0.0300000000000000))*(x628)))+(((IkReal(-0.640000000000000))*(x641)))+(((IkReal(-0.200000000000000))*(x644)))+(((IkReal(-0.200000000000000))*(x643)))+(((IkReal(0.640000000000000))*(x645)))+(pz)+(((r20)*(x631))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x644)))+(((sj5)*(x636)))+(((sj5)*(x634)))+(((IkReal(-1.00000000000000))*(cj5)*(r10)*(sj6)*(x630)))+(((IkReal(-1.00000000000000))*(sj6)*(x638)*(x640)))+(((IkReal(-1.00000000000000))*(cj5)*(cj6)*(r11)*(x630)))+(((IkReal(-1.00000000000000))*(x626)*(x629)))+(((IkReal(-1.00000000000000))*(x638)*(x642))));
evalcond[4]=((((x639)*(x640)))+(((cj5)*(x636)))+(((cj5)*(x634)))+(((sj5)*(x646)))+(((sj5)*(x642)))+(((IkReal(-1.00000000000000))*(x647)))+(x641)+(((x633)*(x639))));
evalcond[5]=((IkReal(0.150000000000000))+(((IkReal(-1.00000000000000))*(x631)*(x633)))+(((IkReal(-1.00000000000000))*(x631)*(x640)))+(((IkReal(-0.200000000000000))*(x641)))+(((IkReal(0.640000000000000))*(x643)))+(((IkReal(0.640000000000000))*(x644)))+(((IkReal(0.614000000000000))*(sj2)))+(((IkReal(-1.00000000000000))*(cj1)*(px)))+(((IkReal(-0.0300000000000000))*(x642)))+(((IkReal(-0.0300000000000000))*(x646)))+(((IkReal(0.200000000000000))*(x645)))+(((IkReal(-1.00000000000000))*(py)*(x630))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x648=((IkReal(1.00000000000000))*(sj5));
IkReal x649=((r22)*(sj2));
IkReal x650=((r20)*(sj6));
IkReal x651=((cj2)*(r22));
IkReal x652=((IkReal(1.00000000000000))*(cj5));
IkReal x653=((cj2)*(cj6)*(r21));
IkReal x654=((cj6)*(r21)*(sj2));
if( IKabs(((gconst8)*(((((cj5)*(x653)))+(((IkReal(-1.00000000000000))*(sj2)*(x648)*(x650)))+(((cj2)*(cj5)*(x650)))+(((IkReal(-1.00000000000000))*(x649)*(x652)))+(((IkReal(-1.00000000000000))*(x648)*(x654)))+(((IkReal(-1.00000000000000))*(x648)*(x651))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst8)*(((((IkReal(-1.00000000000000))*(x651)*(x652)))+(((sj5)*(x649)))+(((IkReal(-1.00000000000000))*(sj2)*(x650)*(x652)))+(((IkReal(-1.00000000000000))*(x648)*(x653)))+(((IkReal(-1.00000000000000))*(x652)*(x654)))+(((IkReal(-1.00000000000000))*(cj2)*(x648)*(x650))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j3array[0]=IKatan2(((gconst8)*(((((cj5)*(x653)))+(((IkReal(-1.00000000000000))*(sj2)*(x648)*(x650)))+(((cj2)*(cj5)*(x650)))+(((IkReal(-1.00000000000000))*(x649)*(x652)))+(((IkReal(-1.00000000000000))*(x648)*(x654)))+(((IkReal(-1.00000000000000))*(x648)*(x651)))))), ((gconst8)*(((((IkReal(-1.00000000000000))*(x651)*(x652)))+(((sj5)*(x649)))+(((IkReal(-1.00000000000000))*(sj2)*(x650)*(x652)))+(((IkReal(-1.00000000000000))*(x648)*(x653)))+(((IkReal(-1.00000000000000))*(x652)*(x654)))+(((IkReal(-1.00000000000000))*(cj2)*(x648)*(x650)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x655=IKsin(j3);
IkReal x656=IKcos(j3);
IkReal x657=((cj6)*(r21));
IkReal x658=((IkReal(1.00000000000000))*(sj2));
IkReal x659=((IkReal(1.00000000000000))*(sj1));
IkReal x660=((IkReal(0.0300000000000000))*(sj6));
IkReal x661=((IkReal(1.00000000000000))*(r22));
IkReal x662=((r10)*(sj1));
IkReal x663=((r12)*(sj1));
IkReal x664=((r20)*(sj6));
IkReal x665=((cj1)*(r02));
IkReal x666=((IkReal(1.00000000000000))*(sj5));
IkReal x667=((IkReal(1.00000000000000))*(cj5));
IkReal x668=((sj5)*(sj6));
IkReal x669=((cj1)*(r00));
IkReal x670=((cj2)*(x655));
IkReal x671=((cj1)*(cj6)*(r01));
IkReal x672=((sj2)*(x655));
IkReal x673=((cj2)*(x656));
IkReal x674=((sj2)*(x656));
IkReal x675=((cj6)*(r11)*(sj1));
IkReal x676=((x656)*(x658));
evalcond[0]=((((cj5)*(x657)))+(((IkReal(-1.00000000000000))*(sj5)*(x661)))+(x670)+(((cj5)*(x664)))+(((IkReal(-1.00000000000000))*(x676))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x657)*(x666)))+(((IkReal(-1.00000000000000))*(cj5)*(x661)))+(x672)+(x673)+(((IkReal(-1.00000000000000))*(x664)*(x666))));
evalcond[2]=((((r20)*(x660)))+(((IkReal(-0.614000000000000))*(cj2)))+(((IkReal(0.0300000000000000))*(x657)))+(pz)+(((IkReal(-0.640000000000000))*(x670)))+(((IkReal(0.640000000000000))*(x674)))+(((IkReal(-0.200000000000000))*(x673)))+(((IkReal(-0.200000000000000))*(x672))));
evalcond[3]=((((IkReal(-1.00000000000000))*(cj5)*(r10)*(sj6)*(x659)))+(((IkReal(-1.00000000000000))*(x655)*(x658)))+(((IkReal(-1.00000000000000))*(x667)*(x671)))+(((IkReal(-1.00000000000000))*(x673)))+(((IkReal(-1.00000000000000))*(cj5)*(cj6)*(r11)*(x659)))+(((sj5)*(x663)))+(((sj5)*(x665)))+(((IkReal(-1.00000000000000))*(sj6)*(x667)*(x669))));
evalcond[4]=((((sj5)*(x671)))+(((sj5)*(x675)))+(((x668)*(x669)))+(((x662)*(x668)))+(x670)+(((cj5)*(x663)))+(((cj5)*(x665)))+(((IkReal(-1.00000000000000))*(x676))));
evalcond[5]=((IkReal(0.150000000000000))+(((IkReal(0.200000000000000))*(x674)))+(((IkReal(-1.00000000000000))*(x660)*(x669)))+(((IkReal(-1.00000000000000))*(x660)*(x662)))+(((IkReal(0.614000000000000))*(sj2)))+(((IkReal(-1.00000000000000))*(cj1)*(px)))+(((IkReal(-1.00000000000000))*(py)*(x659)))+(((IkReal(0.640000000000000))*(x672)))+(((IkReal(0.640000000000000))*(x673)))+(((IkReal(-0.0300000000000000))*(x675)))+(((IkReal(-0.0300000000000000))*(x671)))+(((IkReal(-0.200000000000000))*(x670))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x677=((cj2)*(sj6));
IkReal x678=((cj1)*(r01));
IkReal x679=((IkReal(1.00000000000000))*(r21));
IkReal x680=((r11)*(sj1));
IkReal x681=((cj6)*(sj2));
IkReal x682=((r10)*(sj1));
IkReal x683=((cj2)*(cj6));
IkReal x684=((cj1)*(r00));
IkReal x685=((sj2)*(sj6));
if( IKabs(((gconst5)*(((((IkReal(-1.00000000000000))*(x683)*(x684)))+(((x677)*(x678)))+(((x677)*(x680)))+(((IkReal(-1.00000000000000))*(x679)*(x685)))+(((r20)*(x681)))+(((IkReal(-1.00000000000000))*(x682)*(x683))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst5)*(((((IkReal(-1.00000000000000))*(x678)*(x685)))+(((IkReal(-1.00000000000000))*(x680)*(x685)))+(((x681)*(x682)))+(((x681)*(x684)))+(((r20)*(x683)))+(((IkReal(-1.00000000000000))*(x677)*(x679))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j3array[0]=IKatan2(((gconst5)*(((((IkReal(-1.00000000000000))*(x683)*(x684)))+(((x677)*(x678)))+(((x677)*(x680)))+(((IkReal(-1.00000000000000))*(x679)*(x685)))+(((r20)*(x681)))+(((IkReal(-1.00000000000000))*(x682)*(x683)))))), ((gconst5)*(((((IkReal(-1.00000000000000))*(x678)*(x685)))+(((IkReal(-1.00000000000000))*(x680)*(x685)))+(((x681)*(x682)))+(((x681)*(x684)))+(((r20)*(x683)))+(((IkReal(-1.00000000000000))*(x677)*(x679)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x686=IKsin(j3);
IkReal x687=IKcos(j3);
IkReal x688=((cj5)*(cj6));
IkReal x689=((cj1)*(r01));
IkReal x690=((IkReal(0.0300000000000000))*(cj6));
IkReal x691=((IkReal(1.00000000000000))*(sj2));
IkReal x692=((IkReal(1.00000000000000))*(sj1));
IkReal x693=((IkReal(1.00000000000000))*(r22));
IkReal x694=((IkReal(0.0300000000000000))*(sj6));
IkReal x695=((r10)*(sj1));
IkReal x696=((r12)*(sj1));
IkReal x697=((cj5)*(sj6));
IkReal x698=((cj1)*(r02));
IkReal x699=((IkReal(1.00000000000000))*(cj6));
IkReal x700=((cj6)*(sj5));
IkReal x701=((r11)*(sj1));
IkReal x702=((cj1)*(r00));
IkReal x703=((sj5)*(sj6));
IkReal x704=((IkReal(0.200000000000000))*(x687));
IkReal x705=((sj4)*(x687));
IkReal x706=((IkReal(0.640000000000000))*(x687));
IkReal x707=((cj2)*(x686));
IkReal x708=((sj2)*(x686));
IkReal x709=((IkReal(1.00000000000000))*(cj2)*(x687));
evalcond[0]=((((r21)*(sj6)))+(((cj2)*(x705)))+(((IkReal(-1.00000000000000))*(r20)*(x699)))+(((sj4)*(x708))));
evalcond[1]=((((IkReal(-1.00000000000000))*(sj5)*(x693)))+(((IkReal(-1.00000000000000))*(x687)*(x691)))+(((r21)*(x688)))+(((r20)*(x697)))+(x707));
evalcond[2]=((((IkReal(-1.00000000000000))*(cj5)*(x693)))+(((IkReal(-1.00000000000000))*(r20)*(x703)))+(((IkReal(-1.00000000000000))*(cj4)*(x709)))+(((IkReal(-1.00000000000000))*(cj4)*(x686)*(x691)))+(((IkReal(-1.00000000000000))*(r21)*(sj5)*(x699))));
evalcond[3]=((((IkReal(-0.614000000000000))*(cj2)))+(((r20)*(x694)))+(((IkReal(-0.640000000000000))*(x707)))+(((IkReal(-1.00000000000000))*(cj2)*(x704)))+(((sj2)*(x706)))+(((IkReal(-0.200000000000000))*(x708)))+(pz)+(((r21)*(x690))));
evalcond[4]=((((IkReal(-1.00000000000000))*(x691)*(x705)))+(((IkReal(-1.00000000000000))*(r11)*(sj6)*(x692)))+(((cj6)*(x695)))+(((cj6)*(x702)))+(((IkReal(-1.00000000000000))*(sj6)*(x689)))+(((sj4)*(x707))));
evalcond[5]=((((IkReal(-1.00000000000000))*(x697)*(x702)))+(((IkReal(-1.00000000000000))*(r10)*(x692)*(x697)))+(((IkReal(-1.00000000000000))*(r11)*(x688)*(x692)))+(((IkReal(-1.00000000000000))*(x709)))+(((sj5)*(x696)))+(((sj5)*(x698)))+(((IkReal(-1.00000000000000))*(x686)*(x691)))+(((IkReal(-1.00000000000000))*(x688)*(x689))));
evalcond[6]=((((IkReal(-1.00000000000000))*(cj4)*(x707)))+(((cj4)*(sj2)*(x687)))+(((x702)*(x703)))+(((x700)*(x701)))+(((x689)*(x700)))+(((x695)*(x703)))+(((cj5)*(x698)))+(((cj5)*(x696))));
evalcond[7]=((IkReal(0.150000000000000))+(((IkReal(0.640000000000000))*(x708)))+(((IkReal(-1.00000000000000))*(x690)*(x701)))+(((IkReal(-1.00000000000000))*(x694)*(x702)))+(((IkReal(0.614000000000000))*(sj2)))+(((IkReal(-1.00000000000000))*(cj1)*(px)))+(((sj2)*(x704)))+(((IkReal(-0.200000000000000))*(x707)))+(((IkReal(-1.00000000000000))*(x694)*(x695)))+(((IkReal(-1.00000000000000))*(py)*(x692)))+(((cj2)*(x706)))+(((IkReal(-1.00000000000000))*(x689)*(x690))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x710=((IkReal(1.00000000000000))*(cj2));
IkReal x711=((r21)*(sj6));
IkReal x712=((IkReal(1.00000000000000))*(sj2));
IkReal x713=((cj6)*(r20));
IkReal x714=((r22)*(sj4)*(sj5));
IkReal x715=((cj5)*(cj6)*(r21)*(sj4));
IkReal x716=((cj5)*(r20)*(sj4)*(sj6));
if( IKabs(((gconst4)*(((((IkReal(-1.00000000000000))*(x711)*(x712)))+(((IkReal(-1.00000000000000))*(x710)*(x715)))+(((IkReal(-1.00000000000000))*(x710)*(x716)))+(((sj2)*(x713)))+(((cj2)*(x714))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst4)*(((((IkReal(-1.00000000000000))*(x710)*(x711)))+(((sj2)*(x716)))+(((sj2)*(x715)))+(((IkReal(-1.00000000000000))*(x712)*(x714)))+(((cj2)*(x713))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j3array[0]=IKatan2(((gconst4)*(((((IkReal(-1.00000000000000))*(x711)*(x712)))+(((IkReal(-1.00000000000000))*(x710)*(x715)))+(((IkReal(-1.00000000000000))*(x710)*(x716)))+(((sj2)*(x713)))+(((cj2)*(x714)))))), ((gconst4)*(((((IkReal(-1.00000000000000))*(x710)*(x711)))+(((sj2)*(x716)))+(((sj2)*(x715)))+(((IkReal(-1.00000000000000))*(x712)*(x714)))+(((cj2)*(x713)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x717=IKsin(j3);
IkReal x718=IKcos(j3);
IkReal x719=((cj5)*(cj6));
IkReal x720=((cj1)*(r01));
IkReal x721=((IkReal(0.0300000000000000))*(cj6));
IkReal x722=((IkReal(1.00000000000000))*(sj2));
IkReal x723=((IkReal(1.00000000000000))*(sj1));
IkReal x724=((IkReal(1.00000000000000))*(r22));
IkReal x725=((IkReal(0.0300000000000000))*(sj6));
IkReal x726=((r10)*(sj1));
IkReal x727=((r12)*(sj1));
IkReal x728=((cj5)*(sj6));
IkReal x729=((cj1)*(r02));
IkReal x730=((IkReal(1.00000000000000))*(cj6));
IkReal x731=((cj6)*(sj5));
IkReal x732=((r11)*(sj1));
IkReal x733=((cj1)*(r00));
IkReal x734=((sj5)*(sj6));
IkReal x735=((IkReal(0.200000000000000))*(x718));
IkReal x736=((sj4)*(x718));
IkReal x737=((IkReal(0.640000000000000))*(x718));
IkReal x738=((cj2)*(x717));
IkReal x739=((sj2)*(x717));
IkReal x740=((IkReal(1.00000000000000))*(cj2)*(x718));
evalcond[0]=((((r21)*(sj6)))+(((cj2)*(x736)))+(((IkReal(-1.00000000000000))*(r20)*(x730)))+(((sj4)*(x739))));
evalcond[1]=((((r20)*(x728)))+(((r21)*(x719)))+(x738)+(((IkReal(-1.00000000000000))*(sj5)*(x724)))+(((IkReal(-1.00000000000000))*(x718)*(x722))));
evalcond[2]=((((IkReal(-1.00000000000000))*(r20)*(x734)))+(((IkReal(-1.00000000000000))*(cj4)*(x740)))+(((IkReal(-1.00000000000000))*(cj5)*(x724)))+(((IkReal(-1.00000000000000))*(cj4)*(x717)*(x722)))+(((IkReal(-1.00000000000000))*(r21)*(sj5)*(x730))));
evalcond[3]=((((IkReal(-0.614000000000000))*(cj2)))+(((IkReal(-0.640000000000000))*(x738)))+(((r20)*(x725)))+(((IkReal(-1.00000000000000))*(cj2)*(x735)))+(((sj2)*(x737)))+(pz)+(((IkReal(-0.200000000000000))*(x739)))+(((r21)*(x721))));
evalcond[4]=((((IkReal(-1.00000000000000))*(r11)*(sj6)*(x723)))+(((IkReal(-1.00000000000000))*(x722)*(x736)))+(((IkReal(-1.00000000000000))*(sj6)*(x720)))+(((cj6)*(x733)))+(((sj4)*(x738)))+(((cj6)*(x726))));
evalcond[5]=((((IkReal(-1.00000000000000))*(r11)*(x719)*(x723)))+(((IkReal(-1.00000000000000))*(r10)*(x723)*(x728)))+(((IkReal(-1.00000000000000))*(x717)*(x722)))+(((IkReal(-1.00000000000000))*(x728)*(x733)))+(((sj5)*(x727)))+(((sj5)*(x729)))+(((IkReal(-1.00000000000000))*(x740)))+(((IkReal(-1.00000000000000))*(x719)*(x720))));
evalcond[6]=((((x720)*(x731)))+(((x731)*(x732)))+(((cj5)*(x727)))+(((cj5)*(x729)))+(((x726)*(x734)))+(((cj4)*(sj2)*(x718)))+(((x733)*(x734)))+(((IkReal(-1.00000000000000))*(cj4)*(x738))));
evalcond[7]=((IkReal(0.150000000000000))+(((IkReal(0.640000000000000))*(x739)))+(((IkReal(-1.00000000000000))*(x725)*(x733)))+(((IkReal(0.614000000000000))*(sj2)))+(((sj2)*(x735)))+(((IkReal(-1.00000000000000))*(cj1)*(px)))+(((IkReal(-1.00000000000000))*(x725)*(x726)))+(((cj2)*(x737)))+(((IkReal(-1.00000000000000))*(x721)*(x732)))+(((IkReal(-1.00000000000000))*(x720)*(x721)))+(((IkReal(-0.200000000000000))*(x738)))+(((IkReal(-1.00000000000000))*(py)*(x723))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x741=((r21)*(sj6));
IkReal x742=((IkReal(0.640000000000000))*(cj2));
IkReal x743=((IkReal(0.200000000000000))*(sj2));
IkReal x744=((cj6)*(sj2));
IkReal x745=((IkReal(0.0300000000000000))*(sj4));
IkReal x746=((cj6)*(r20));
IkReal x747=((IkReal(0.200000000000000))*(cj2));
IkReal x748=((r20)*(sj6));
IkReal x749=((sj2)*(sj4));
if( IKabs(((gconst2)*(((((IkReal(-0.640000000000000))*(r20)*(x744)))+(((IkReal(-1.00000000000000))*(cj2)*(x745)*(x748)))+(((IkReal(0.640000000000000))*(sj2)*(x741)))+(((x746)*(x747)))+(((IkReal(-1.00000000000000))*(cj2)*(pz)*(sj4)))+(((IkReal(0.614000000000000))*(sj4)*((cj2)*(cj2))))+(((IkReal(-1.00000000000000))*(x741)*(x747)))+(((IkReal(-1.00000000000000))*(cj2)*(cj6)*(r21)*(x745))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst2)*(((((IkReal(-1.00000000000000))*(x742)*(x746)))+(((x741)*(x743)))+(((x741)*(x742)))+(((IkReal(-0.614000000000000))*(cj2)*(x749)))+(((sj2)*(x745)*(x748)))+(((r21)*(x744)*(x745)))+(((IkReal(-1.00000000000000))*(x743)*(x746)))+(((pz)*(x749))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j3array[0]=IKatan2(((gconst2)*(((((IkReal(-0.640000000000000))*(r20)*(x744)))+(((IkReal(-1.00000000000000))*(cj2)*(x745)*(x748)))+(((IkReal(0.640000000000000))*(sj2)*(x741)))+(((x746)*(x747)))+(((IkReal(-1.00000000000000))*(cj2)*(pz)*(sj4)))+(((IkReal(0.614000000000000))*(sj4)*((cj2)*(cj2))))+(((IkReal(-1.00000000000000))*(x741)*(x747)))+(((IkReal(-1.00000000000000))*(cj2)*(cj6)*(r21)*(x745)))))), ((gconst2)*(((((IkReal(-1.00000000000000))*(x742)*(x746)))+(((x741)*(x743)))+(((x741)*(x742)))+(((IkReal(-0.614000000000000))*(cj2)*(x749)))+(((sj2)*(x745)*(x748)))+(((r21)*(x744)*(x745)))+(((IkReal(-1.00000000000000))*(x743)*(x746)))+(((pz)*(x749)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x750=IKcos(j3);
IkReal x751=IKsin(j3);
IkReal x752=((IkReal(0.0300000000000000))*(cj6));
IkReal x753=((cj1)*(r01));
IkReal x754=((IkReal(1.00000000000000))*(sj1));
IkReal x755=((IkReal(0.0300000000000000))*(sj6));
IkReal x756=((r10)*(sj1));
IkReal x757=((cj1)*(r00));
IkReal x758=((sj2)*(x750));
IkReal x759=((cj2)*(x750));
IkReal x760=((cj2)*(x751));
IkReal x761=((sj2)*(x751));
evalcond[0]=((((IkReal(-1.00000000000000))*(cj6)*(r20)))+(((r21)*(sj6)))+(((sj4)*(x759)))+(((sj4)*(x761))));
evalcond[1]=((((IkReal(-0.614000000000000))*(cj2)))+(((IkReal(-0.640000000000000))*(x760)))+(((r21)*(x752)))+(pz)+(((r20)*(x755)))+(((IkReal(-0.200000000000000))*(x759)))+(((IkReal(0.640000000000000))*(x758)))+(((IkReal(-0.200000000000000))*(x761))));
evalcond[2]=((((cj6)*(x756)))+(((cj6)*(x757)))+(((IkReal(-1.00000000000000))*(r11)*(sj6)*(x754)))+(((IkReal(-1.00000000000000))*(sj4)*(x758)))+(((sj4)*(x760)))+(((IkReal(-1.00000000000000))*(sj6)*(x753))));
evalcond[3]=((IkReal(0.150000000000000))+(((IkReal(0.640000000000000))*(x761)))+(((IkReal(-1.00000000000000))*(x755)*(x757)))+(((IkReal(-1.00000000000000))*(x755)*(x756)))+(((IkReal(-1.00000000000000))*(r11)*(sj1)*(x752)))+(((IkReal(0.614000000000000))*(sj2)))+(((IkReal(-1.00000000000000))*(cj1)*(px)))+(((IkReal(0.200000000000000))*(x758)))+(((IkReal(-1.00000000000000))*(py)*(x754)))+(((IkReal(-1.00000000000000))*(x752)*(x753)))+(((IkReal(0.640000000000000))*(x759)))+(((IkReal(-0.200000000000000))*(x760))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst10;
gconst10=IKsign((((((r20)*(r20))*((sj6)*(sj6))))+(((IkReal(2.00000000000000))*(cj6)*(r20)*(r21)*(sj6)))+((r22)*(r22))+((((cj6)*(cj6))*((r21)*(r21))))));
dummyeval[0]=(((((r20)*(r20))*((sj6)*(sj6))))+(((IkReal(2.00000000000000))*(cj6)*(r20)*(r21)*(sj6)))+((r22)*(r22))+((((cj6)*(cj6))*((r21)*(r21)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst11;
IkReal x762=((r22)*(sj6));
IkReal x763=((IkReal(1.00000000000000))*(cj1));
IkReal x764=((cj1)*(r12));
IkReal x765=((cj6)*(r21));
IkReal x766=((r20)*(sj6));
IkReal x767=((cj6)*(r22));
IkReal x768=((IkReal(1.00000000000000))*(r02)*(sj1));
gconst11=IKsign(((((r01)*(sj1)*(x767)))+(((IkReal(-1.00000000000000))*(x765)*(x768)))+(((IkReal(-1.00000000000000))*(r11)*(x763)*(x767)))+(((IkReal(-1.00000000000000))*(x766)*(x768)))+(((IkReal(-1.00000000000000))*(r10)*(x762)*(x763)))+(((r00)*(sj1)*(x762)))+(((x764)*(x766)))+(((x764)*(x765)))));
IkReal x769=((r22)*(sj6));
IkReal x770=((IkReal(1.00000000000000))*(cj1));
IkReal x771=((cj1)*(r12));
IkReal x772=((cj6)*(r21));
IkReal x773=((r20)*(sj6));
IkReal x774=((cj6)*(r22));
IkReal x775=((IkReal(1.00000000000000))*(r02)*(sj1));
dummyeval[0]=((((IkReal(-1.00000000000000))*(r11)*(x770)*(x774)))+(((x771)*(x772)))+(((x771)*(x773)))+(((r01)*(sj1)*(x774)))+(((IkReal(-1.00000000000000))*(x772)*(x775)))+(((r00)*(sj1)*(x769)))+(((IkReal(-1.00000000000000))*(x773)*(x775)))+(((IkReal(-1.00000000000000))*(r10)*(x769)*(x770))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x776=((r01)*(sj1));
IkReal x777=((cj2)*(sj3));
IkReal x778=((IkReal(1.00000000000000))*(cj1));
IkReal x779=((r10)*(sj6));
IkReal x780=((r02)*(sj1));
IkReal x781=((cj3)*(sj2));
IkReal x782=((cj6)*(x781));
IkReal x783=((r00)*(sj1)*(sj6));
if( IKabs(((gconst11)*(((((IkReal(-1.00000000000000))*(x776)*(x782)))+(((IkReal(-1.00000000000000))*(cj6)*(r11)*(x777)*(x778)))+(((IkReal(-1.00000000000000))*(x777)*(x778)*(x779)))+(((IkReal(-1.00000000000000))*(x781)*(x783)))+(((cj6)*(x776)*(x777)))+(((cj1)*(x779)*(x781)))+(((x777)*(x783)))+(((cj1)*(r11)*(x782))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst11)*(((((IkReal(-1.00000000000000))*(r12)*(x777)*(x778)))+(((IkReal(-1.00000000000000))*(x780)*(x781)))+(((x777)*(x780)))+(((cj1)*(r12)*(x781))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j5array[0]=IKatan2(((gconst11)*(((((IkReal(-1.00000000000000))*(x776)*(x782)))+(((IkReal(-1.00000000000000))*(cj6)*(r11)*(x777)*(x778)))+(((IkReal(-1.00000000000000))*(x777)*(x778)*(x779)))+(((IkReal(-1.00000000000000))*(x781)*(x783)))+(((cj6)*(x776)*(x777)))+(((cj1)*(x779)*(x781)))+(((x777)*(x783)))+(((cj1)*(r11)*(x782)))))), ((gconst11)*(((((IkReal(-1.00000000000000))*(r12)*(x777)*(x778)))+(((IkReal(-1.00000000000000))*(x780)*(x781)))+(((x777)*(x780)))+(((cj1)*(r12)*(x781)))))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x784=IKcos(j5);
IkReal x785=IKsin(j5);
IkReal x786=((IkReal(1.00000000000000))*(cj2));
IkReal x787=((cj4)*(sj3));
IkReal x788=((IkReal(1.00000000000000))*(cj1));
IkReal x789=((r20)*(sj6));
IkReal x790=((cj6)*(r11));
IkReal x791=((IkReal(1.00000000000000))*(sj2));
IkReal x792=((r10)*(sj6));
IkReal x793=((r00)*(sj6));
IkReal x794=((cj3)*(cj4));
IkReal x795=((cj6)*(r01));
IkReal x796=((cj6)*(x784));
IkReal x797=((sj1)*(x792));
IkReal x798=((IkReal(1.00000000000000))*(x784));
IkReal x799=((sj1)*(x785));
IkReal x800=((IkReal(1.00000000000000))*(x785));
IkReal x801=((cj1)*(x785));
IkReal x802=((cj1)*(x784));
IkReal x803=((sj1)*(x784));
evalcond[0]=((((cj2)*(sj3)))+(((IkReal(-1.00000000000000))*(cj3)*(x791)))+(((IkReal(-1.00000000000000))*(r22)*(x800)))+(((x784)*(x789)))+(((r21)*(x796))));
evalcond[1]=((((IkReal(-1.00000000000000))*(cj6)*(r21)*(x800)))+(((IkReal(-1.00000000000000))*(x789)*(x800)))+(((IkReal(-1.00000000000000))*(x787)*(x791)))+(((IkReal(-1.00000000000000))*(x786)*(x794)))+(((IkReal(-1.00000000000000))*(r22)*(x798))));
evalcond[2]=((((x793)*(x803)))+(((r12)*(x801)))+(((x795)*(x803)))+(((IkReal(-1.00000000000000))*(r02)*(x799)))+(((IkReal(-1.00000000000000))*(x784)*(x788)*(x792)))+(((IkReal(-1.00000000000000))*(x784)*(x788)*(x790))));
evalcond[3]=((sj4)+(((x790)*(x801)))+(((IkReal(-1.00000000000000))*(x793)*(x799)))+(((IkReal(-1.00000000000000))*(r02)*(sj1)*(x798)))+(((r12)*(x802)))+(((IkReal(-1.00000000000000))*(x795)*(x799)))+(((x792)*(x801))));
evalcond[4]=((((IkReal(-1.00000000000000))*(cj3)*(x786)))+(((IkReal(-1.00000000000000))*(x797)*(x798)))+(((r02)*(x801)))+(((IkReal(-1.00000000000000))*(x784)*(x788)*(x795)))+(((IkReal(-1.00000000000000))*(x784)*(x788)*(x793)))+(((IkReal(-1.00000000000000))*(sj3)*(x791)))+(((r12)*(x799)))+(((IkReal(-1.00000000000000))*(sj1)*(x790)*(x798))));
evalcond[5]=((((x793)*(x801)))+(((x785)*(x797)))+(((x790)*(x799)))+(((r12)*(x803)))+(((x795)*(x801)))+(((r02)*(x802)))+(((IkReal(-1.00000000000000))*(x786)*(x787)))+(((sj2)*(x794))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x804=((IkReal(1.00000000000000))*(cj2));
IkReal x805=((cj6)*(r21));
IkReal x806=((cj3)*(cj4));
IkReal x807=((r20)*(sj6));
IkReal x808=((IkReal(1.00000000000000))*(sj2));
IkReal x809=((cj4)*(sj3));
IkReal x810=((cj3)*(sj2));
if( IKabs(((gconst10)*(((((IkReal(-1.00000000000000))*(cj3)*(r22)*(x808)))+(((IkReal(-1.00000000000000))*(x804)*(x806)*(x807)))+(((cj2)*(r22)*(sj3)))+(((IkReal(-1.00000000000000))*(x804)*(x805)*(x806)))+(((IkReal(-1.00000000000000))*(x805)*(x808)*(x809)))+(((IkReal(-1.00000000000000))*(x807)*(x808)*(x809))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst10)*(((((IkReal(-1.00000000000000))*(r22)*(x808)*(x809)))+(((IkReal(-1.00000000000000))*(r22)*(x804)*(x806)))+(((x807)*(x810)))+(((IkReal(-1.00000000000000))*(sj3)*(x804)*(x805)))+(((IkReal(-1.00000000000000))*(sj3)*(x804)*(x807)))+(((x805)*(x810))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j5array[0]=IKatan2(((gconst10)*(((((IkReal(-1.00000000000000))*(cj3)*(r22)*(x808)))+(((IkReal(-1.00000000000000))*(x804)*(x806)*(x807)))+(((cj2)*(r22)*(sj3)))+(((IkReal(-1.00000000000000))*(x804)*(x805)*(x806)))+(((IkReal(-1.00000000000000))*(x805)*(x808)*(x809)))+(((IkReal(-1.00000000000000))*(x807)*(x808)*(x809)))))), ((gconst10)*(((((IkReal(-1.00000000000000))*(r22)*(x808)*(x809)))+(((IkReal(-1.00000000000000))*(r22)*(x804)*(x806)))+(((x807)*(x810)))+(((IkReal(-1.00000000000000))*(sj3)*(x804)*(x805)))+(((IkReal(-1.00000000000000))*(sj3)*(x804)*(x807)))+(((x805)*(x810)))))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x811=IKcos(j5);
IkReal x812=IKsin(j5);
IkReal x813=((IkReal(1.00000000000000))*(cj2));
IkReal x814=((cj4)*(sj3));
IkReal x815=((IkReal(1.00000000000000))*(cj1));
IkReal x816=((r20)*(sj6));
IkReal x817=((cj6)*(r11));
IkReal x818=((IkReal(1.00000000000000))*(sj2));
IkReal x819=((r10)*(sj6));
IkReal x820=((r00)*(sj6));
IkReal x821=((cj3)*(cj4));
IkReal x822=((cj6)*(r01));
IkReal x823=((cj6)*(x811));
IkReal x824=((sj1)*(x819));
IkReal x825=((IkReal(1.00000000000000))*(x811));
IkReal x826=((sj1)*(x812));
IkReal x827=((IkReal(1.00000000000000))*(x812));
IkReal x828=((cj1)*(x812));
IkReal x829=((cj1)*(x811));
IkReal x830=((sj1)*(x811));
evalcond[0]=((((r21)*(x823)))+(((cj2)*(sj3)))+(((IkReal(-1.00000000000000))*(cj3)*(x818)))+(((x811)*(x816)))+(((IkReal(-1.00000000000000))*(r22)*(x827))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x816)*(x827)))+(((IkReal(-1.00000000000000))*(x813)*(x821)))+(((IkReal(-1.00000000000000))*(x814)*(x818)))+(((IkReal(-1.00000000000000))*(r22)*(x825)))+(((IkReal(-1.00000000000000))*(cj6)*(r21)*(x827))));
evalcond[2]=((((r12)*(x828)))+(((x820)*(x830)))+(((IkReal(-1.00000000000000))*(x811)*(x815)*(x819)))+(((IkReal(-1.00000000000000))*(x811)*(x815)*(x817)))+(((x822)*(x830)))+(((IkReal(-1.00000000000000))*(r02)*(x826))));
evalcond[3]=((((r12)*(x829)))+(sj4)+(((IkReal(-1.00000000000000))*(x822)*(x826)))+(((x817)*(x828)))+(((x819)*(x828)))+(((IkReal(-1.00000000000000))*(r02)*(sj1)*(x825)))+(((IkReal(-1.00000000000000))*(x820)*(x826))));
evalcond[4]=((((r12)*(x826)))+(((IkReal(-1.00000000000000))*(cj3)*(x813)))+(((IkReal(-1.00000000000000))*(x811)*(x815)*(x822)))+(((IkReal(-1.00000000000000))*(x811)*(x815)*(x820)))+(((IkReal(-1.00000000000000))*(sj1)*(x817)*(x825)))+(((IkReal(-1.00000000000000))*(x824)*(x825)))+(((IkReal(-1.00000000000000))*(sj3)*(x818)))+(((r02)*(x828))));
evalcond[5]=((((x812)*(x824)))+(((x820)*(x828)))+(((x817)*(x826)))+(((sj2)*(x821)))+(((IkReal(-1.00000000000000))*(x813)*(x814)))+(((x822)*(x828)))+(((r12)*(x830)))+(((r02)*(x829))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x831=((IkReal(1.00000000000000))*(sj2));
IkReal x832=((cj2)*(sj6));
IkReal x833=((r11)*(sj1));
IkReal x834=((cj6)*(sj2));
IkReal x835=((r10)*(sj1));
IkReal x836=((cj2)*(cj6));
IkReal x837=((cj1)*(r00));
IkReal x838=((cj1)*(r01)*(sj6));
if( IKabs(((gconst1)*(((((IkReal(-1.00000000000000))*(r21)*(sj6)*(x831)))+(((x832)*(x833)))+(((r20)*(x834)))+(((IkReal(-1.00000000000000))*(x836)*(x837)))+(((IkReal(-1.00000000000000))*(x835)*(x836)))+(((cj1)*(r01)*(x832))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst1)*(((((IkReal(-1.00000000000000))*(sj6)*(x831)*(x833)))+(((r20)*(x836)))+(((x834)*(x837)))+(((x834)*(x835)))+(((IkReal(-1.00000000000000))*(r21)*(x832)))+(((IkReal(-1.00000000000000))*(x831)*(x838))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j3array[0]=IKatan2(((gconst1)*(((((IkReal(-1.00000000000000))*(r21)*(sj6)*(x831)))+(((x832)*(x833)))+(((r20)*(x834)))+(((IkReal(-1.00000000000000))*(x836)*(x837)))+(((IkReal(-1.00000000000000))*(x835)*(x836)))+(((cj1)*(r01)*(x832)))))), ((gconst1)*(((((IkReal(-1.00000000000000))*(sj6)*(x831)*(x833)))+(((r20)*(x836)))+(((x834)*(x837)))+(((x834)*(x835)))+(((IkReal(-1.00000000000000))*(r21)*(x832)))+(((IkReal(-1.00000000000000))*(x831)*(x838)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x839=IKcos(j3);
IkReal x840=IKsin(j3);
IkReal x841=((IkReal(0.0300000000000000))*(cj6));
IkReal x842=((cj1)*(r01));
IkReal x843=((IkReal(1.00000000000000))*(sj1));
IkReal x844=((IkReal(0.0300000000000000))*(sj6));
IkReal x845=((r10)*(sj1));
IkReal x846=((cj1)*(r00));
IkReal x847=((sj2)*(x839));
IkReal x848=((cj2)*(x839));
IkReal x849=((cj2)*(x840));
IkReal x850=((sj2)*(x840));
evalcond[0]=((((IkReal(-1.00000000000000))*(cj6)*(r20)))+(((r21)*(sj6)))+(((sj4)*(x848)))+(((sj4)*(x850))));
evalcond[1]=((((IkReal(-0.200000000000000))*(x848)))+(((IkReal(-0.614000000000000))*(cj2)))+(((r20)*(x844)))+(((r21)*(x841)))+(((IkReal(-0.200000000000000))*(x850)))+(pz)+(((IkReal(0.640000000000000))*(x847)))+(((IkReal(-0.640000000000000))*(x849))));
evalcond[2]=((((IkReal(-1.00000000000000))*(sj6)*(x842)))+(((sj4)*(x849)))+(((IkReal(-1.00000000000000))*(sj4)*(x847)))+(((cj6)*(x846)))+(((cj6)*(x845)))+(((IkReal(-1.00000000000000))*(r11)*(sj6)*(x843))));
evalcond[3]=((IkReal(0.150000000000000))+(((IkReal(-0.200000000000000))*(x849)))+(((IkReal(-1.00000000000000))*(x841)*(x842)))+(((IkReal(-1.00000000000000))*(py)*(x843)))+(((IkReal(0.640000000000000))*(x850)))+(((IkReal(0.614000000000000))*(sj2)))+(((IkReal(-1.00000000000000))*(cj1)*(px)))+(((IkReal(0.200000000000000))*(x847)))+(((IkReal(-1.00000000000000))*(x844)*(x845)))+(((IkReal(-1.00000000000000))*(x844)*(x846)))+(((IkReal(-1.00000000000000))*(r11)*(sj1)*(x841)))+(((IkReal(0.640000000000000))*(x848))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst10;
gconst10=IKsign((((((r20)*(r20))*((sj6)*(sj6))))+(((IkReal(2.00000000000000))*(cj6)*(r20)*(r21)*(sj6)))+((r22)*(r22))+((((cj6)*(cj6))*((r21)*(r21))))));
dummyeval[0]=(((((r20)*(r20))*((sj6)*(sj6))))+(((IkReal(2.00000000000000))*(cj6)*(r20)*(r21)*(sj6)))+((r22)*(r22))+((((cj6)*(cj6))*((r21)*(r21)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst11;
IkReal x851=((r22)*(sj6));
IkReal x852=((IkReal(1.00000000000000))*(cj1));
IkReal x853=((cj1)*(r12));
IkReal x854=((cj6)*(r21));
IkReal x855=((r20)*(sj6));
IkReal x856=((cj6)*(r22));
IkReal x857=((IkReal(1.00000000000000))*(r02)*(sj1));
gconst11=IKsign(((((IkReal(-1.00000000000000))*(r11)*(x852)*(x856)))+(((IkReal(-1.00000000000000))*(r10)*(x851)*(x852)))+(((r00)*(sj1)*(x851)))+(((IkReal(-1.00000000000000))*(x855)*(x857)))+(((r01)*(sj1)*(x856)))+(((x853)*(x854)))+(((x853)*(x855)))+(((IkReal(-1.00000000000000))*(x854)*(x857)))));
IkReal x858=((r22)*(sj6));
IkReal x859=((IkReal(1.00000000000000))*(cj1));
IkReal x860=((cj1)*(r12));
IkReal x861=((cj6)*(r21));
IkReal x862=((r20)*(sj6));
IkReal x863=((cj6)*(r22));
IkReal x864=((IkReal(1.00000000000000))*(r02)*(sj1));
dummyeval[0]=((((r01)*(sj1)*(x863)))+(((IkReal(-1.00000000000000))*(r10)*(x858)*(x859)))+(((IkReal(-1.00000000000000))*(r11)*(x859)*(x863)))+(((IkReal(-1.00000000000000))*(x862)*(x864)))+(((IkReal(-1.00000000000000))*(x861)*(x864)))+(((r00)*(sj1)*(x858)))+(((x860)*(x862)))+(((x860)*(x861))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x865=((r01)*(sj1));
IkReal x866=((cj2)*(sj3));
IkReal x867=((IkReal(1.00000000000000))*(cj1));
IkReal x868=((r10)*(sj6));
IkReal x869=((r02)*(sj1));
IkReal x870=((cj3)*(sj2));
IkReal x871=((cj6)*(x870));
IkReal x872=((r00)*(sj1)*(sj6));
if( IKabs(((gconst11)*(((((IkReal(-1.00000000000000))*(x866)*(x867)*(x868)))+(((cj6)*(x865)*(x866)))+(((IkReal(-1.00000000000000))*(x870)*(x872)))+(((IkReal(-1.00000000000000))*(cj6)*(r11)*(x866)*(x867)))+(((x866)*(x872)))+(((cj1)*(x868)*(x870)))+(((cj1)*(r11)*(x871)))+(((IkReal(-1.00000000000000))*(x865)*(x871))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst11)*(((((IkReal(-1.00000000000000))*(x869)*(x870)))+(((x866)*(x869)))+(((IkReal(-1.00000000000000))*(r12)*(x866)*(x867)))+(((cj1)*(r12)*(x870))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j5array[0]=IKatan2(((gconst11)*(((((IkReal(-1.00000000000000))*(x866)*(x867)*(x868)))+(((cj6)*(x865)*(x866)))+(((IkReal(-1.00000000000000))*(x870)*(x872)))+(((IkReal(-1.00000000000000))*(cj6)*(r11)*(x866)*(x867)))+(((x866)*(x872)))+(((cj1)*(x868)*(x870)))+(((cj1)*(r11)*(x871)))+(((IkReal(-1.00000000000000))*(x865)*(x871)))))), ((gconst11)*(((((IkReal(-1.00000000000000))*(x869)*(x870)))+(((x866)*(x869)))+(((IkReal(-1.00000000000000))*(r12)*(x866)*(x867)))+(((cj1)*(r12)*(x870)))))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x873=IKcos(j5);
IkReal x874=IKsin(j5);
IkReal x875=((IkReal(1.00000000000000))*(cj2));
IkReal x876=((cj4)*(sj3));
IkReal x877=((IkReal(1.00000000000000))*(cj1));
IkReal x878=((r20)*(sj6));
IkReal x879=((cj6)*(r11));
IkReal x880=((IkReal(1.00000000000000))*(sj2));
IkReal x881=((r10)*(sj6));
IkReal x882=((r00)*(sj6));
IkReal x883=((cj3)*(cj4));
IkReal x884=((cj6)*(r01));
IkReal x885=((cj6)*(x873));
IkReal x886=((sj1)*(x881));
IkReal x887=((IkReal(1.00000000000000))*(x873));
IkReal x888=((sj1)*(x874));
IkReal x889=((IkReal(1.00000000000000))*(x874));
IkReal x890=((cj1)*(x874));
IkReal x891=((cj1)*(x873));
IkReal x892=((sj1)*(x873));
evalcond[0]=((((IkReal(-1.00000000000000))*(cj3)*(x880)))+(((cj2)*(sj3)))+(((x873)*(x878)))+(((IkReal(-1.00000000000000))*(r22)*(x889)))+(((r21)*(x885))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x876)*(x880)))+(((IkReal(-1.00000000000000))*(cj6)*(r21)*(x889)))+(((IkReal(-1.00000000000000))*(r22)*(x887)))+(((IkReal(-1.00000000000000))*(x875)*(x883)))+(((IkReal(-1.00000000000000))*(x878)*(x889))));
evalcond[2]=((((x884)*(x892)))+(((x882)*(x892)))+(((IkReal(-1.00000000000000))*(x873)*(x877)*(x879)))+(((IkReal(-1.00000000000000))*(x873)*(x877)*(x881)))+(((r12)*(x890)))+(((IkReal(-1.00000000000000))*(r02)*(x888))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x884)*(x888)))+(sj4)+(((IkReal(-1.00000000000000))*(x882)*(x888)))+(((x881)*(x890)))+(((x879)*(x890)))+(((IkReal(-1.00000000000000))*(r02)*(sj1)*(x887)))+(((r12)*(x891))));
evalcond[4]=((((r02)*(x890)))+(((IkReal(-1.00000000000000))*(x886)*(x887)))+(((IkReal(-1.00000000000000))*(cj3)*(x875)))+(((IkReal(-1.00000000000000))*(x873)*(x877)*(x884)))+(((IkReal(-1.00000000000000))*(x873)*(x877)*(x882)))+(((IkReal(-1.00000000000000))*(sj3)*(x880)))+(((IkReal(-1.00000000000000))*(sj1)*(x879)*(x887)))+(((r12)*(x888))));
evalcond[5]=((((r02)*(x891)))+(((x884)*(x890)))+(((x874)*(x886)))+(((x879)*(x888)))+(((x882)*(x890)))+(((sj2)*(x883)))+(((IkReal(-1.00000000000000))*(x875)*(x876)))+(((r12)*(x892))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x893=((IkReal(1.00000000000000))*(cj2));
IkReal x894=((cj6)*(r21));
IkReal x895=((cj3)*(cj4));
IkReal x896=((r20)*(sj6));
IkReal x897=((IkReal(1.00000000000000))*(sj2));
IkReal x898=((cj4)*(sj3));
IkReal x899=((cj3)*(sj2));
if( IKabs(((gconst10)*(((((IkReal(-1.00000000000000))*(x893)*(x895)*(x896)))+(((cj2)*(r22)*(sj3)))+(((IkReal(-1.00000000000000))*(x894)*(x897)*(x898)))+(((IkReal(-1.00000000000000))*(x893)*(x894)*(x895)))+(((IkReal(-1.00000000000000))*(cj3)*(r22)*(x897)))+(((IkReal(-1.00000000000000))*(x896)*(x897)*(x898))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst10)*(((((IkReal(-1.00000000000000))*(r22)*(x897)*(x898)))+(((x894)*(x899)))+(((x896)*(x899)))+(((IkReal(-1.00000000000000))*(r22)*(x893)*(x895)))+(((IkReal(-1.00000000000000))*(sj3)*(x893)*(x896)))+(((IkReal(-1.00000000000000))*(sj3)*(x893)*(x894))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j5array[0]=IKatan2(((gconst10)*(((((IkReal(-1.00000000000000))*(x893)*(x895)*(x896)))+(((cj2)*(r22)*(sj3)))+(((IkReal(-1.00000000000000))*(x894)*(x897)*(x898)))+(((IkReal(-1.00000000000000))*(x893)*(x894)*(x895)))+(((IkReal(-1.00000000000000))*(cj3)*(r22)*(x897)))+(((IkReal(-1.00000000000000))*(x896)*(x897)*(x898)))))), ((gconst10)*(((((IkReal(-1.00000000000000))*(r22)*(x897)*(x898)))+(((x894)*(x899)))+(((x896)*(x899)))+(((IkReal(-1.00000000000000))*(r22)*(x893)*(x895)))+(((IkReal(-1.00000000000000))*(sj3)*(x893)*(x896)))+(((IkReal(-1.00000000000000))*(sj3)*(x893)*(x894)))))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x900=IKcos(j5);
IkReal x901=IKsin(j5);
IkReal x902=((IkReal(1.00000000000000))*(cj2));
IkReal x903=((cj4)*(sj3));
IkReal x904=((IkReal(1.00000000000000))*(cj1));
IkReal x905=((r20)*(sj6));
IkReal x906=((cj6)*(r11));
IkReal x907=((IkReal(1.00000000000000))*(sj2));
IkReal x908=((r10)*(sj6));
IkReal x909=((r00)*(sj6));
IkReal x910=((cj3)*(cj4));
IkReal x911=((cj6)*(r01));
IkReal x912=((cj6)*(x900));
IkReal x913=((sj1)*(x908));
IkReal x914=((IkReal(1.00000000000000))*(x900));
IkReal x915=((sj1)*(x901));
IkReal x916=((IkReal(1.00000000000000))*(x901));
IkReal x917=((cj1)*(x901));
IkReal x918=((cj1)*(x900));
IkReal x919=((sj1)*(x900));
evalcond[0]=((((cj2)*(sj3)))+(((IkReal(-1.00000000000000))*(r22)*(x916)))+(((x900)*(x905)))+(((r21)*(x912)))+(((IkReal(-1.00000000000000))*(cj3)*(x907))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x903)*(x907)))+(((IkReal(-1.00000000000000))*(r22)*(x914)))+(((IkReal(-1.00000000000000))*(x902)*(x910)))+(((IkReal(-1.00000000000000))*(cj6)*(r21)*(x916)))+(((IkReal(-1.00000000000000))*(x905)*(x916))));
evalcond[2]=((((x909)*(x919)))+(((r12)*(x917)))+(((IkReal(-1.00000000000000))*(r02)*(x915)))+(((x911)*(x919)))+(((IkReal(-1.00000000000000))*(x900)*(x904)*(x908)))+(((IkReal(-1.00000000000000))*(x900)*(x904)*(x906))));
evalcond[3]=((((IkReal(-1.00000000000000))*(r02)*(sj1)*(x914)))+(sj4)+(((IkReal(-1.00000000000000))*(x909)*(x915)))+(((r12)*(x918)))+(((x906)*(x917)))+(((IkReal(-1.00000000000000))*(x911)*(x915)))+(((x908)*(x917))));
evalcond[4]=((((IkReal(-1.00000000000000))*(x913)*(x914)))+(((r12)*(x915)))+(((IkReal(-1.00000000000000))*(sj3)*(x907)))+(((r02)*(x917)))+(((IkReal(-1.00000000000000))*(x900)*(x904)*(x911)))+(((IkReal(-1.00000000000000))*(sj1)*(x906)*(x914)))+(((IkReal(-1.00000000000000))*(x900)*(x904)*(x909)))+(((IkReal(-1.00000000000000))*(cj3)*(x902))));
evalcond[5]=((((x909)*(x917)))+(((x901)*(x913)))+(((IkReal(-1.00000000000000))*(x902)*(x903)))+(((sj2)*(x910)))+(((r12)*(x919)))+(((r02)*(x918)))+(((x911)*(x917)))+(((x906)*(x915))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x920=(sj2)*(sj2);
IkReal x921=(cj2)*(cj2);
IkReal x922=((cj2)*(sj1));
IkReal x923=((IkReal(0.200000000000000))*(py));
IkReal x924=((cj1)*(sj2));
IkReal x925=((IkReal(0.640000000000000))*(px));
IkReal x926=((r00)*(sj6));
IkReal x927=((IkReal(0.0192000000000000))*(cj2));
IkReal x928=((r20)*(sj6));
IkReal x929=((cj1)*(cj2));
IkReal x930=((cj6)*(r11));
IkReal x931=((IkReal(0.200000000000000))*(pz));
IkReal x932=((IkReal(0.640000000000000))*(py));
IkReal x933=((sj1)*(sj2));
IkReal x934=((r10)*(sj6));
IkReal x935=((cj6)*(r01));
IkReal x936=((cj6)*(r21));
IkReal x937=((IkReal(0.0192000000000000))*(sj2));
IkReal x938=((IkReal(0.640000000000000))*(pz));
IkReal x939=((IkReal(0.200000000000000))*(px));
IkReal x940=((IkReal(0.00600000000000000))*(x936));
if( IKabs(((gconst0)*(((((IkReal(-0.392960000000000))*(x921)))+(((IkReal(-0.392960000000000))*(x920)))+(((IkReal(-0.0960000000000000))*(sj2)))+(((sj2)*(x940)))+(((IkReal(0.0192000000000000))*(x933)*(x934)))+(((IkReal(0.0192000000000000))*(x930)*(x933)))+(((x924)*(x925)))+(((x927)*(x936)))+(((x927)*(x928)))+(((IkReal(0.0192000000000000))*(x924)*(x935)))+(((IkReal(0.0192000000000000))*(x924)*(x926)))+(((IkReal(0.0300000000000000))*(cj2)))+(((IkReal(-0.00600000000000000))*(x926)*(x929)))+(((cj2)*(x938)))+(((IkReal(-1.00000000000000))*(x929)*(x939)))+(((IkReal(-0.00600000000000000))*(x922)*(x930)))+(((IkReal(-0.00600000000000000))*(x922)*(x934)))+(((sj2)*(x931)))+(((IkReal(-0.00600000000000000))*(x929)*(x935)))+(((IkReal(0.00600000000000000))*(sj2)*(x928)))+(((x932)*(x933)))+(((IkReal(-1.00000000000000))*(x922)*(x923))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst0)*(((((IkReal(0.00600000000000000))*(cj2)*(x928)))+(((IkReal(-0.0300000000000000))*(sj2)))+(((IkReal(-0.122800000000000))*(x921)))+(((IkReal(-0.122800000000000))*(x920)))+(((IkReal(-1.00000000000000))*(sj2)*(x938)))+(((x924)*(x939)))+(((cj1)*(x927)*(x935)))+(((IkReal(-1.00000000000000))*(x928)*(x937)))+(((IkReal(-0.0960000000000000))*(cj2)))+(((cj2)*(x940)))+(((IkReal(0.00600000000000000))*(x924)*(x935)))+(((IkReal(0.00600000000000000))*(x924)*(x926)))+(((cj2)*(x931)))+(((x923)*(x933)))+(((IkReal(-1.00000000000000))*(x936)*(x937)))+(((x922)*(x932)))+(((cj1)*(x926)*(x927)))+(((IkReal(0.00600000000000000))*(x933)*(x934)))+(((IkReal(0.0192000000000000))*(x922)*(x934)))+(((IkReal(0.0192000000000000))*(x922)*(x930)))+(((x925)*(x929)))+(((IkReal(0.00600000000000000))*(x930)*(x933))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j3array[0]=IKatan2(((gconst0)*(((((IkReal(-0.392960000000000))*(x921)))+(((IkReal(-0.392960000000000))*(x920)))+(((IkReal(-0.0960000000000000))*(sj2)))+(((sj2)*(x940)))+(((IkReal(0.0192000000000000))*(x933)*(x934)))+(((IkReal(0.0192000000000000))*(x930)*(x933)))+(((x924)*(x925)))+(((x927)*(x936)))+(((x927)*(x928)))+(((IkReal(0.0192000000000000))*(x924)*(x935)))+(((IkReal(0.0192000000000000))*(x924)*(x926)))+(((IkReal(0.0300000000000000))*(cj2)))+(((IkReal(-0.00600000000000000))*(x926)*(x929)))+(((cj2)*(x938)))+(((IkReal(-1.00000000000000))*(x929)*(x939)))+(((IkReal(-0.00600000000000000))*(x922)*(x930)))+(((IkReal(-0.00600000000000000))*(x922)*(x934)))+(((sj2)*(x931)))+(((IkReal(-0.00600000000000000))*(x929)*(x935)))+(((IkReal(0.00600000000000000))*(sj2)*(x928)))+(((x932)*(x933)))+(((IkReal(-1.00000000000000))*(x922)*(x923)))))), ((gconst0)*(((((IkReal(0.00600000000000000))*(cj2)*(x928)))+(((IkReal(-0.0300000000000000))*(sj2)))+(((IkReal(-0.122800000000000))*(x921)))+(((IkReal(-0.122800000000000))*(x920)))+(((IkReal(-1.00000000000000))*(sj2)*(x938)))+(((x924)*(x939)))+(((cj1)*(x927)*(x935)))+(((IkReal(-1.00000000000000))*(x928)*(x937)))+(((IkReal(-0.0960000000000000))*(cj2)))+(((cj2)*(x940)))+(((IkReal(0.00600000000000000))*(x924)*(x935)))+(((IkReal(0.00600000000000000))*(x924)*(x926)))+(((cj2)*(x931)))+(((x923)*(x933)))+(((IkReal(-1.00000000000000))*(x936)*(x937)))+(((x922)*(x932)))+(((cj1)*(x926)*(x927)))+(((IkReal(0.00600000000000000))*(x933)*(x934)))+(((IkReal(0.0192000000000000))*(x922)*(x934)))+(((IkReal(0.0192000000000000))*(x922)*(x930)))+(((x925)*(x929)))+(((IkReal(0.00600000000000000))*(x930)*(x933)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[2];
IkReal x941=IKsin(j3);
IkReal x942=IKcos(j3);
IkReal x943=((IkReal(0.0300000000000000))*(sj6));
IkReal x944=((IkReal(0.0300000000000000))*(cj6));
IkReal x945=((IkReal(0.640000000000000))*(x942));
IkReal x946=((cj2)*(x941));
IkReal x947=((sj2)*(x941));
IkReal x948=((IkReal(0.200000000000000))*(x942));
evalcond[0]=((((r21)*(x944)))+(((sj2)*(x945)))+(((IkReal(-0.614000000000000))*(cj2)))+(((IkReal(-1.00000000000000))*(cj2)*(x948)))+(((IkReal(-0.640000000000000))*(x946)))+(((IkReal(-0.200000000000000))*(x947)))+(pz)+(((r20)*(x943))));
evalcond[1]=((IkReal(0.150000000000000))+(((sj2)*(x948)))+(((IkReal(-1.00000000000000))*(r11)*(sj1)*(x944)))+(((IkReal(0.614000000000000))*(sj2)))+(((IkReal(-0.200000000000000))*(x946)))+(((cj2)*(x945)))+(((IkReal(-1.00000000000000))*(cj1)*(px)))+(((IkReal(0.640000000000000))*(x947)))+(((IkReal(-1.00000000000000))*(cj1)*(r00)*(x943)))+(((IkReal(-1.00000000000000))*(py)*(sj1)))+(((IkReal(-1.00000000000000))*(r10)*(sj1)*(x943)))+(((IkReal(-1.00000000000000))*(cj1)*(r01)*(x944))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst22;
IkReal x949=((r22)*(sj6));
IkReal x950=((IkReal(1.00000000000000))*(cj1));
IkReal x951=((cj1)*(r12));
IkReal x952=((cj6)*(r21));
IkReal x953=((r20)*(sj6));
IkReal x954=((cj6)*(r22));
IkReal x955=((IkReal(1.00000000000000))*(r02)*(sj1));
gconst22=IKsign(((((x951)*(x952)))+(((x951)*(x953)))+(((r00)*(sj1)*(x949)))+(((r01)*(sj1)*(x954)))+(((IkReal(-1.00000000000000))*(x953)*(x955)))+(((IkReal(-1.00000000000000))*(r10)*(x949)*(x950)))+(((IkReal(-1.00000000000000))*(x952)*(x955)))+(((IkReal(-1.00000000000000))*(r11)*(x950)*(x954)))));
IkReal x956=((r22)*(sj6));
IkReal x957=((IkReal(1.00000000000000))*(cj1));
IkReal x958=((cj1)*(r12));
IkReal x959=((cj6)*(r21));
IkReal x960=((r20)*(sj6));
IkReal x961=((cj6)*(r22));
IkReal x962=((IkReal(1.00000000000000))*(r02)*(sj1));
dummyeval[0]=((((IkReal(-1.00000000000000))*(x960)*(x962)))+(((IkReal(-1.00000000000000))*(x959)*(x962)))+(((IkReal(-1.00000000000000))*(r10)*(x956)*(x957)))+(((IkReal(-1.00000000000000))*(r11)*(x957)*(x961)))+(((r01)*(sj1)*(x961)))+(((x958)*(x959)))+(((x958)*(x960)))+(((r00)*(sj1)*(x956))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst23;
IkReal x963=((cj1)*(cj6));
IkReal x964=((IkReal(1.00000000000000))*(r22));
IkReal x965=((r12)*(sj1));
IkReal x966=((r20)*(sj6));
gconst23=IKsign(((((r02)*(r21)*(x963)))+(((IkReal(-1.00000000000000))*(r10)*(sj1)*(sj6)*(x964)))+(((cj6)*(r21)*(x965)))+(((IkReal(-1.00000000000000))*(r01)*(x963)*(x964)))+(((IkReal(-1.00000000000000))*(cj1)*(r00)*(sj6)*(x964)))+(((x965)*(x966)))+(((IkReal(-1.00000000000000))*(cj6)*(r11)*(sj1)*(x964)))+(((cj1)*(r02)*(x966)))));
IkReal x967=((cj1)*(cj6));
IkReal x968=((IkReal(1.00000000000000))*(r22));
IkReal x969=((r12)*(sj1));
IkReal x970=((r20)*(sj6));
dummyeval[0]=((((x969)*(x970)))+(((r02)*(r21)*(x967)))+(((IkReal(-1.00000000000000))*(r10)*(sj1)*(sj6)*(x968)))+(((cj6)*(r21)*(x969)))+(((IkReal(-1.00000000000000))*(cj1)*(r00)*(sj6)*(x968)))+(((IkReal(-1.00000000000000))*(r01)*(x967)*(x968)))+(((IkReal(-1.00000000000000))*(cj6)*(r11)*(sj1)*(x968)))+(((cj1)*(r02)*(x970))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=((((sj2)*(sj3)))+(((cj2)*(cj3))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x971=((IkReal(1.00000000000000))*(sj6));
if( IKabs(((((IKabs(((((sj2)*(sj3)))+(((cj2)*(cj3))))) != 0)?((IkReal)1/(((((sj2)*(sj3)))+(((cj2)*(cj3)))))):(IkReal)1.0e30))*(((((cj6)*(r20)))+(((IkReal(-1.00000000000000))*(r21)*(x971))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(r01)*(sj1)*(x971)))+(((cj6)*(r00)*(sj1)))+(((IkReal(-1.00000000000000))*(cj1)*(cj6)*(r10)))+(((cj1)*(r11)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(((((sj2)*(sj3)))+(((cj2)*(cj3))))) != 0)?((IkReal)1/(((((sj2)*(sj3)))+(((cj2)*(cj3)))))):(IkReal)1.0e30))*(((((cj6)*(r20)))+(((IkReal(-1.00000000000000))*(r21)*(x971)))))))+IKsqr(((((IkReal(-1.00000000000000))*(r01)*(sj1)*(x971)))+(((cj6)*(r00)*(sj1)))+(((IkReal(-1.00000000000000))*(cj1)*(cj6)*(r10)))+(((cj1)*(r11)*(sj6)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((IKabs(((((sj2)*(sj3)))+(((cj2)*(cj3))))) != 0)?((IkReal)1/(((((sj2)*(sj3)))+(((cj2)*(cj3)))))):(IkReal)1.0e30))*(((((cj6)*(r20)))+(((IkReal(-1.00000000000000))*(r21)*(x971)))))), ((((IkReal(-1.00000000000000))*(r01)*(sj1)*(x971)))+(((cj6)*(r00)*(sj1)))+(((IkReal(-1.00000000000000))*(cj1)*(cj6)*(r10)))+(((cj1)*(r11)*(sj6)))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x972=IKsin(j4);
IkReal x973=((cj6)*(r10));
IkReal x974=((cj6)*(r00));
IkReal x975=((IkReal(1.00000000000000))*(sj1));
IkReal x976=((IkReal(1.00000000000000))*(cj1)*(sj6));
IkReal x977=((cj2)*(x972));
IkReal x978=((sj2)*(x972));
evalcond[0]=((((IkReal(-1.00000000000000))*(cj6)*(r20)))+(((r21)*(sj6)))+(((cj3)*(x977)))+(((sj3)*(x978))));
evalcond[1]=((((cj1)*(x973)))+(((IkReal(-1.00000000000000))*(x974)*(x975)))+(IKcos(j4))+(((IkReal(-1.00000000000000))*(r11)*(x976)))+(((r01)*(sj1)*(sj6))));
evalcond[2]=((((IkReal(-1.00000000000000))*(cj3)*(x978)))+(((IkReal(-1.00000000000000))*(r01)*(x976)))+(((IkReal(-1.00000000000000))*(r11)*(sj6)*(x975)))+(((cj1)*(x974)))+(((sj1)*(x973)))+(((sj3)*(x977))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst24;
gconst24=IKsign((((((r20)*(r20))*((sj6)*(sj6))))+(((IkReal(2.00000000000000))*(cj6)*(r20)*(r21)*(sj6)))+((r22)*(r22))+((((cj6)*(cj6))*((r21)*(r21))))));
dummyeval[0]=(((((r20)*(r20))*((sj6)*(sj6))))+(((IkReal(2.00000000000000))*(cj6)*(r20)*(r21)*(sj6)))+((r22)*(r22))+((((cj6)*(cj6))*((r21)*(r21)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst25;
IkReal x979=((r22)*(sj6));
IkReal x980=((IkReal(1.00000000000000))*(cj1));
IkReal x981=((cj1)*(r12));
IkReal x982=((cj6)*(r21));
IkReal x983=((r20)*(sj6));
IkReal x984=((cj6)*(r22));
IkReal x985=((IkReal(1.00000000000000))*(r02)*(sj1));
gconst25=IKsign(((((x981)*(x982)))+(((x981)*(x983)))+(((IkReal(-1.00000000000000))*(r10)*(x979)*(x980)))+(((IkReal(-1.00000000000000))*(x982)*(x985)))+(((r01)*(sj1)*(x984)))+(((IkReal(-1.00000000000000))*(r11)*(x980)*(x984)))+(((r00)*(sj1)*(x979)))+(((IkReal(-1.00000000000000))*(x983)*(x985)))));
IkReal x986=((r22)*(sj6));
IkReal x987=((IkReal(1.00000000000000))*(cj1));
IkReal x988=((cj1)*(r12));
IkReal x989=((cj6)*(r21));
IkReal x990=((r20)*(sj6));
IkReal x991=((cj6)*(r22));
IkReal x992=((IkReal(1.00000000000000))*(r02)*(sj1));
dummyeval[0]=((((x988)*(x990)))+(((x988)*(x989)))+(((r01)*(sj1)*(x991)))+(((IkReal(-1.00000000000000))*(r11)*(x987)*(x991)))+(((IkReal(-1.00000000000000))*(x990)*(x992)))+(((IkReal(-1.00000000000000))*(r10)*(x986)*(x987)))+(((r00)*(sj1)*(x986)))+(((IkReal(-1.00000000000000))*(x989)*(x992))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x993=((r01)*(sj1));
IkReal x994=((r10)*(sj6));
IkReal x995=((cj2)*(sj3));
IkReal x996=((cj3)*(sj2));
IkReal x997=((r02)*(sj1));
IkReal x998=((cj6)*(x996));
IkReal x999=((r00)*(sj1)*(sj6));
IkReal x1000=((IkReal(1.00000000000000))*(cj1)*(x995));
if( IKabs(((gconst25)*(((((IkReal(-1.00000000000000))*(x993)*(x998)))+(((IkReal(-1.00000000000000))*(cj6)*(r11)*(x1000)))+(((IkReal(-1.00000000000000))*(x996)*(x999)))+(((cj6)*(x993)*(x995)))+(((IkReal(-1.00000000000000))*(x1000)*(x994)))+(((cj1)*(r11)*(x998)))+(((x995)*(x999)))+(((cj1)*(x994)*(x996))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst25)*(((((IkReal(-1.00000000000000))*(x996)*(x997)))+(((cj1)*(r12)*(x996)))+(((IkReal(-1.00000000000000))*(r12)*(x1000)))+(((x995)*(x997))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j5array[0]=IKatan2(((gconst25)*(((((IkReal(-1.00000000000000))*(x993)*(x998)))+(((IkReal(-1.00000000000000))*(cj6)*(r11)*(x1000)))+(((IkReal(-1.00000000000000))*(x996)*(x999)))+(((cj6)*(x993)*(x995)))+(((IkReal(-1.00000000000000))*(x1000)*(x994)))+(((cj1)*(r11)*(x998)))+(((x995)*(x999)))+(((cj1)*(x994)*(x996)))))), ((gconst25)*(((((IkReal(-1.00000000000000))*(x996)*(x997)))+(((cj1)*(r12)*(x996)))+(((IkReal(-1.00000000000000))*(r12)*(x1000)))+(((x995)*(x997)))))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x1001=IKcos(j5);
IkReal x1002=IKsin(j5);
IkReal x1003=((IkReal(1.00000000000000))*(cj2));
IkReal x1004=((cj4)*(sj3));
IkReal x1005=((IkReal(1.00000000000000))*(cj1));
IkReal x1006=((r20)*(sj6));
IkReal x1007=((cj6)*(r11));
IkReal x1008=((IkReal(1.00000000000000))*(sj2));
IkReal x1009=((r10)*(sj6));
IkReal x1010=((r00)*(sj6));
IkReal x1011=((cj3)*(cj4));
IkReal x1012=((cj6)*(r01));
IkReal x1013=((cj6)*(x1001));
IkReal x1014=((sj1)*(x1009));
IkReal x1015=((IkReal(1.00000000000000))*(x1001));
IkReal x1016=((sj1)*(x1002));
IkReal x1017=((IkReal(1.00000000000000))*(x1002));
IkReal x1018=((cj1)*(x1002));
IkReal x1019=((cj1)*(x1001));
IkReal x1020=((sj1)*(x1001));
evalcond[0]=((((cj2)*(sj3)))+(((IkReal(-1.00000000000000))*(r22)*(x1017)))+(((r21)*(x1013)))+(((IkReal(-1.00000000000000))*(cj3)*(x1008)))+(((x1001)*(x1006))));
evalcond[1]=((((IkReal(-1.00000000000000))*(r22)*(x1015)))+(((IkReal(-1.00000000000000))*(x1006)*(x1017)))+(((IkReal(-1.00000000000000))*(cj6)*(r21)*(x1017)))+(((IkReal(-1.00000000000000))*(x1004)*(x1008)))+(((IkReal(-1.00000000000000))*(x1003)*(x1011))));
evalcond[2]=((((x1010)*(x1020)))+(((IkReal(-1.00000000000000))*(x1001)*(x1005)*(x1009)))+(((IkReal(-1.00000000000000))*(x1001)*(x1005)*(x1007)))+(((IkReal(-1.00000000000000))*(r02)*(x1016)))+(((r12)*(x1018)))+(((x1012)*(x1020))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x1010)*(x1016)))+(sj4)+(((x1009)*(x1018)))+(((IkReal(-1.00000000000000))*(r02)*(sj1)*(x1015)))+(((r12)*(x1019)))+(((IkReal(-1.00000000000000))*(x1012)*(x1016)))+(((x1007)*(x1018))));
evalcond[4]=((((IkReal(-1.00000000000000))*(x1014)*(x1015)))+(((IkReal(-1.00000000000000))*(sj1)*(x1007)*(x1015)))+(((r02)*(x1018)))+(((IkReal(-1.00000000000000))*(x1001)*(x1005)*(x1012)))+(((IkReal(-1.00000000000000))*(x1001)*(x1005)*(x1010)))+(((IkReal(-1.00000000000000))*(cj3)*(x1003)))+(((IkReal(-1.00000000000000))*(sj3)*(x1008)))+(((r12)*(x1016))));
evalcond[5]=((((r02)*(x1019)))+(((r12)*(x1020)))+(((x1012)*(x1018)))+(((sj2)*(x1011)))+(((x1002)*(x1014)))+(((x1007)*(x1016)))+(((IkReal(-1.00000000000000))*(x1003)*(x1004)))+(((x1010)*(x1018))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1021=((IkReal(1.00000000000000))*(cj2));
IkReal x1022=((cj6)*(r21));
IkReal x1023=((cj3)*(cj4));
IkReal x1024=((r20)*(sj6));
IkReal x1025=((IkReal(1.00000000000000))*(sj2));
IkReal x1026=((cj4)*(sj3));
IkReal x1027=((cj3)*(sj2));
if( IKabs(((gconst24)*(((((cj2)*(r22)*(sj3)))+(((IkReal(-1.00000000000000))*(cj3)*(r22)*(x1025)))+(((IkReal(-1.00000000000000))*(x1021)*(x1023)*(x1024)))+(((IkReal(-1.00000000000000))*(x1021)*(x1022)*(x1023)))+(((IkReal(-1.00000000000000))*(x1024)*(x1025)*(x1026)))+(((IkReal(-1.00000000000000))*(x1022)*(x1025)*(x1026))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst24)*(((((x1022)*(x1027)))+(((x1024)*(x1027)))+(((IkReal(-1.00000000000000))*(r22)*(x1025)*(x1026)))+(((IkReal(-1.00000000000000))*(r22)*(x1021)*(x1023)))+(((IkReal(-1.00000000000000))*(sj3)*(x1021)*(x1022)))+(((IkReal(-1.00000000000000))*(sj3)*(x1021)*(x1024))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j5array[0]=IKatan2(((gconst24)*(((((cj2)*(r22)*(sj3)))+(((IkReal(-1.00000000000000))*(cj3)*(r22)*(x1025)))+(((IkReal(-1.00000000000000))*(x1021)*(x1023)*(x1024)))+(((IkReal(-1.00000000000000))*(x1021)*(x1022)*(x1023)))+(((IkReal(-1.00000000000000))*(x1024)*(x1025)*(x1026)))+(((IkReal(-1.00000000000000))*(x1022)*(x1025)*(x1026)))))), ((gconst24)*(((((x1022)*(x1027)))+(((x1024)*(x1027)))+(((IkReal(-1.00000000000000))*(r22)*(x1025)*(x1026)))+(((IkReal(-1.00000000000000))*(r22)*(x1021)*(x1023)))+(((IkReal(-1.00000000000000))*(sj3)*(x1021)*(x1022)))+(((IkReal(-1.00000000000000))*(sj3)*(x1021)*(x1024)))))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x1028=IKcos(j5);
IkReal x1029=IKsin(j5);
IkReal x1030=((IkReal(1.00000000000000))*(cj2));
IkReal x1031=((cj4)*(sj3));
IkReal x1032=((IkReal(1.00000000000000))*(cj1));
IkReal x1033=((r20)*(sj6));
IkReal x1034=((cj6)*(r11));
IkReal x1035=((IkReal(1.00000000000000))*(sj2));
IkReal x1036=((r10)*(sj6));
IkReal x1037=((r00)*(sj6));
IkReal x1038=((cj3)*(cj4));
IkReal x1039=((cj6)*(r01));
IkReal x1040=((cj6)*(x1028));
IkReal x1041=((sj1)*(x1036));
IkReal x1042=((IkReal(1.00000000000000))*(x1028));
IkReal x1043=((sj1)*(x1029));
IkReal x1044=((IkReal(1.00000000000000))*(x1029));
IkReal x1045=((cj1)*(x1029));
IkReal x1046=((cj1)*(x1028));
IkReal x1047=((sj1)*(x1028));
evalcond[0]=((((cj2)*(sj3)))+(((IkReal(-1.00000000000000))*(r22)*(x1044)))+(((x1028)*(x1033)))+(((r21)*(x1040)))+(((IkReal(-1.00000000000000))*(cj3)*(x1035))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x1033)*(x1044)))+(((IkReal(-1.00000000000000))*(r22)*(x1042)))+(((IkReal(-1.00000000000000))*(x1031)*(x1035)))+(((IkReal(-1.00000000000000))*(cj6)*(r21)*(x1044)))+(((IkReal(-1.00000000000000))*(x1030)*(x1038))));
evalcond[2]=((((x1037)*(x1047)))+(((x1039)*(x1047)))+(((IkReal(-1.00000000000000))*(r02)*(x1043)))+(((IkReal(-1.00000000000000))*(x1028)*(x1032)*(x1036)))+(((IkReal(-1.00000000000000))*(x1028)*(x1032)*(x1034)))+(((r12)*(x1045))));
evalcond[3]=((sj4)+(((x1034)*(x1045)))+(((IkReal(-1.00000000000000))*(x1037)*(x1043)))+(((x1036)*(x1045)))+(((IkReal(-1.00000000000000))*(r02)*(sj1)*(x1042)))+(((IkReal(-1.00000000000000))*(x1039)*(x1043)))+(((r12)*(x1046))));
evalcond[4]=((((r02)*(x1045)))+(((IkReal(-1.00000000000000))*(x1041)*(x1042)))+(((IkReal(-1.00000000000000))*(sj1)*(x1034)*(x1042)))+(((IkReal(-1.00000000000000))*(cj3)*(x1030)))+(((IkReal(-1.00000000000000))*(sj3)*(x1035)))+(((IkReal(-1.00000000000000))*(x1028)*(x1032)*(x1039)))+(((IkReal(-1.00000000000000))*(x1028)*(x1032)*(x1037)))+(((r12)*(x1043))));
evalcond[5]=((((r02)*(x1046)))+(((x1034)*(x1043)))+(((x1037)*(x1045)))+(((x1039)*(x1045)))+(((sj2)*(x1038)))+(((IkReal(-1.00000000000000))*(x1030)*(x1031)))+(((x1029)*(x1041)))+(((r12)*(x1047))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1048=((sj2)*(sj3));
IkReal x1049=((cj3)*(sj6));
IkReal x1050=((r10)*(sj1));
IkReal x1051=((r12)*(sj1));
IkReal x1052=((cj1)*(r02));
IkReal x1053=((cj1)*(r00));
IkReal x1054=((cj3)*(cj6));
IkReal x1055=((cj1)*(r01));
IkReal x1056=((cj3)*(sj2));
IkReal x1057=((IkReal(1.00000000000000))*(cj2)*(sj3));
IkReal x1058=((cj6)*(r11)*(sj1));
if( IKabs(((gconst23)*(((((sj2)*(x1054)*(x1055)))+(((cj2)*(r20)*(x1049)))+(((IkReal(-1.00000000000000))*(sj6)*(x1050)*(x1057)))+(((sj2)*(x1049)*(x1053)))+(((sj2)*(x1049)*(x1050)))+(((r11)*(sj1)*(sj2)*(x1054)))+(((cj2)*(r21)*(x1054)))+(((r20)*(sj6)*(x1048)))+(((cj6)*(r21)*(x1048)))+(((IkReal(-1.00000000000000))*(cj6)*(x1055)*(x1057)))+(((IkReal(-1.00000000000000))*(x1057)*(x1058)))+(((IkReal(-1.00000000000000))*(sj6)*(x1053)*(x1057))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst23)*(((((IkReal(-1.00000000000000))*(x1052)*(x1057)))+(((x1052)*(x1056)))+(((cj2)*(cj3)*(r22)))+(((x1051)*(x1056)))+(((r22)*(x1048)))+(((IkReal(-1.00000000000000))*(x1051)*(x1057))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j5array[0]=IKatan2(((gconst23)*(((((sj2)*(x1054)*(x1055)))+(((cj2)*(r20)*(x1049)))+(((IkReal(-1.00000000000000))*(sj6)*(x1050)*(x1057)))+(((sj2)*(x1049)*(x1053)))+(((sj2)*(x1049)*(x1050)))+(((r11)*(sj1)*(sj2)*(x1054)))+(((cj2)*(r21)*(x1054)))+(((r20)*(sj6)*(x1048)))+(((cj6)*(r21)*(x1048)))+(((IkReal(-1.00000000000000))*(cj6)*(x1055)*(x1057)))+(((IkReal(-1.00000000000000))*(x1057)*(x1058)))+(((IkReal(-1.00000000000000))*(sj6)*(x1053)*(x1057)))))), ((gconst23)*(((((IkReal(-1.00000000000000))*(x1052)*(x1057)))+(((x1052)*(x1056)))+(((cj2)*(cj3)*(r22)))+(((x1051)*(x1056)))+(((r22)*(x1048)))+(((IkReal(-1.00000000000000))*(x1051)*(x1057)))))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[3];
IkReal x1059=IKcos(j5);
IkReal x1060=IKsin(j5);
IkReal x1061=((IkReal(1.00000000000000))*(cj1));
IkReal x1062=((IkReal(1.00000000000000))*(sj1));
IkReal x1063=((IkReal(1.00000000000000))*(cj3));
IkReal x1064=((sj6)*(x1059));
IkReal x1065=((cj6)*(x1059));
IkReal x1066=((r02)*(x1060));
IkReal x1067=((r12)*(x1060));
evalcond[0]=((((cj2)*(sj3)))+(((r20)*(x1064)))+(((IkReal(-1.00000000000000))*(sj2)*(x1063)))+(((IkReal(-1.00000000000000))*(r22)*(x1060)))+(((r21)*(x1065))));
evalcond[1]=((((r01)*(sj1)*(x1065)))+(((IkReal(-1.00000000000000))*(r10)*(x1061)*(x1064)))+(((r00)*(sj1)*(x1064)))+(((IkReal(-1.00000000000000))*(x1062)*(x1066)))+(((cj1)*(x1067)))+(((IkReal(-1.00000000000000))*(r11)*(x1061)*(x1065))));
evalcond[2]=((((IkReal(-1.00000000000000))*(r10)*(x1062)*(x1064)))+(((IkReal(-1.00000000000000))*(r01)*(x1061)*(x1065)))+(((IkReal(-1.00000000000000))*(r11)*(x1062)*(x1065)))+(((IkReal(-1.00000000000000))*(sj2)*(sj3)))+(((cj1)*(x1066)))+(((sj1)*(x1067)))+(((IkReal(-1.00000000000000))*(cj2)*(x1063)))+(((IkReal(-1.00000000000000))*(r00)*(x1061)*(x1064))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst26;
gconst26=IKsign(((((sj2)*(sj3)))+(((cj2)*(cj3)))));
dummyeval[0]=((((sj2)*(sj3)))+(((cj2)*(cj3))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=((((sj2)*(sj3)))+(((cj2)*(cj3))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1068=((IkReal(1.00000000000000))*(sj6));
if( IKabs(((((IKabs(((((sj2)*(sj3)))+(((cj2)*(cj3))))) != 0)?((IkReal)1/(((((sj2)*(sj3)))+(((cj2)*(cj3)))))):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(r21)*(x1068)))+(((cj6)*(r20))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((cj6)*(r00)*(sj1)))+(((IkReal(-1.00000000000000))*(cj1)*(cj6)*(r10)))+(((cj1)*(r11)*(sj6)))+(((IkReal(-1.00000000000000))*(r01)*(sj1)*(x1068))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(((((sj2)*(sj3)))+(((cj2)*(cj3))))) != 0)?((IkReal)1/(((((sj2)*(sj3)))+(((cj2)*(cj3)))))):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(r21)*(x1068)))+(((cj6)*(r20)))))))+IKsqr(((((cj6)*(r00)*(sj1)))+(((IkReal(-1.00000000000000))*(cj1)*(cj6)*(r10)))+(((cj1)*(r11)*(sj6)))+(((IkReal(-1.00000000000000))*(r01)*(sj1)*(x1068)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((IKabs(((((sj2)*(sj3)))+(((cj2)*(cj3))))) != 0)?((IkReal)1/(((((sj2)*(sj3)))+(((cj2)*(cj3)))))):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(r21)*(x1068)))+(((cj6)*(r20)))))), ((((cj6)*(r00)*(sj1)))+(((IkReal(-1.00000000000000))*(cj1)*(cj6)*(r10)))+(((cj1)*(r11)*(sj6)))+(((IkReal(-1.00000000000000))*(r01)*(sj1)*(x1068)))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1069=IKsin(j4);
IkReal x1070=IKcos(j4);
IkReal x1071=((cj5)*(r12));
IkReal x1072=((IkReal(1.00000000000000))*(sj1));
IkReal x1073=((sj5)*(sj6));
IkReal x1074=((cj5)*(r02));
IkReal x1075=((cj6)*(r00));
IkReal x1076=((cj1)*(r10));
IkReal x1077=((IkReal(1.00000000000000))*(sj2));
IkReal x1078=((IkReal(1.00000000000000))*(cj2));
IkReal x1079=((IkReal(1.00000000000000))*(cj6));
IkReal x1080=((cj1)*(r11));
IkReal x1081=((IkReal(1.00000000000000))*(sj6));
IkReal x1082=((cj6)*(sj5));
IkReal x1083=((r10)*(sj1));
IkReal x1084=((r01)*(x1082));
IkReal x1085=((cj3)*(x1069));
IkReal x1086=((cj3)*(x1070));
IkReal x1087=((sj3)*(x1069));
IkReal x1088=((sj3)*(x1070));
evalcond[0]=((((IkReal(-1.00000000000000))*(r20)*(x1079)))+(((sj2)*(x1087)))+(((r21)*(sj6)))+(((cj2)*(x1085))));
evalcond[1]=((x1070)+(((IkReal(-1.00000000000000))*(x1080)*(x1081)))+(((cj6)*(x1076)))+(((IkReal(-1.00000000000000))*(x1072)*(x1075)))+(((r01)*(sj1)*(sj6))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x1078)*(x1086)))+(((IkReal(-1.00000000000000))*(cj5)*(r22)))+(((IkReal(-1.00000000000000))*(x1077)*(x1088)))+(((IkReal(-1.00000000000000))*(r20)*(x1073)))+(((IkReal(-1.00000000000000))*(r21)*(sj5)*(x1079))));
evalcond[3]=((((IkReal(-1.00000000000000))*(r11)*(sj6)*(x1072)))+(((cj1)*(x1075)))+(((cj6)*(x1083)))+(((IkReal(-1.00000000000000))*(x1077)*(x1085)))+(((cj2)*(x1087)))+(((IkReal(-1.00000000000000))*(cj1)*(r01)*(x1081))));
evalcond[4]=((x1069)+(((cj1)*(x1071)))+(((x1073)*(x1076)))+(((IkReal(-1.00000000000000))*(r00)*(x1072)*(x1073)))+(((x1080)*(x1082)))+(((IkReal(-1.00000000000000))*(x1072)*(x1074)))+(((IkReal(-1.00000000000000))*(x1072)*(x1084))));
evalcond[5]=((((x1073)*(x1083)))+(((sj2)*(x1086)))+(((cj1)*(x1084)))+(((IkReal(-1.00000000000000))*(x1078)*(x1088)))+(((cj1)*(x1074)))+(((cj1)*(r00)*(x1073)))+(((sj1)*(x1071)))+(((r11)*(sj1)*(x1082))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1089=((IkReal(1.00000000000000))*(r21));
if( IKabs(((gconst26)*(((((IkReal(-1.00000000000000))*(sj6)*(x1089)))+(((cj6)*(r20))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst26)*(((((IkReal(-1.00000000000000))*(cj6)*(sj5)*(x1089)))+(((IkReal(-1.00000000000000))*(cj5)*(r22)))+(((IkReal(-1.00000000000000))*(r20)*(sj5)*(sj6))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst26)*(((((IkReal(-1.00000000000000))*(sj6)*(x1089)))+(((cj6)*(r20)))))), ((gconst26)*(((((IkReal(-1.00000000000000))*(cj6)*(sj5)*(x1089)))+(((IkReal(-1.00000000000000))*(cj5)*(r22)))+(((IkReal(-1.00000000000000))*(r20)*(sj5)*(sj6)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1090=IKsin(j4);
IkReal x1091=IKcos(j4);
IkReal x1092=((cj5)*(r12));
IkReal x1093=((IkReal(1.00000000000000))*(sj1));
IkReal x1094=((sj5)*(sj6));
IkReal x1095=((cj5)*(r02));
IkReal x1096=((cj6)*(r00));
IkReal x1097=((cj1)*(r10));
IkReal x1098=((IkReal(1.00000000000000))*(sj2));
IkReal x1099=((IkReal(1.00000000000000))*(cj2));
IkReal x1100=((IkReal(1.00000000000000))*(cj6));
IkReal x1101=((cj1)*(r11));
IkReal x1102=((IkReal(1.00000000000000))*(sj6));
IkReal x1103=((cj6)*(sj5));
IkReal x1104=((r10)*(sj1));
IkReal x1105=((r01)*(x1103));
IkReal x1106=((cj3)*(x1090));
IkReal x1107=((cj3)*(x1091));
IkReal x1108=((sj3)*(x1090));
IkReal x1109=((sj3)*(x1091));
evalcond[0]=((((sj2)*(x1108)))+(((r21)*(sj6)))+(((IkReal(-1.00000000000000))*(r20)*(x1100)))+(((cj2)*(x1106))));
evalcond[1]=((((cj6)*(x1097)))+(x1091)+(((IkReal(-1.00000000000000))*(x1093)*(x1096)))+(((r01)*(sj1)*(sj6)))+(((IkReal(-1.00000000000000))*(x1101)*(x1102))));
evalcond[2]=((((IkReal(-1.00000000000000))*(r20)*(x1094)))+(((IkReal(-1.00000000000000))*(x1098)*(x1109)))+(((IkReal(-1.00000000000000))*(r21)*(sj5)*(x1100)))+(((IkReal(-1.00000000000000))*(x1099)*(x1107)))+(((IkReal(-1.00000000000000))*(cj5)*(r22))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x1098)*(x1106)))+(((cj1)*(x1096)))+(((IkReal(-1.00000000000000))*(r11)*(sj6)*(x1093)))+(((IkReal(-1.00000000000000))*(cj1)*(r01)*(x1102)))+(((cj6)*(x1104)))+(((cj2)*(x1108))));
evalcond[4]=((x1090)+(((cj1)*(x1092)))+(((IkReal(-1.00000000000000))*(x1093)*(x1105)))+(((x1094)*(x1097)))+(((x1101)*(x1103)))+(((IkReal(-1.00000000000000))*(x1093)*(x1095)))+(((IkReal(-1.00000000000000))*(r00)*(x1093)*(x1094))));
evalcond[5]=((((sj2)*(x1107)))+(((x1094)*(x1104)))+(((cj1)*(x1095)))+(((sj1)*(x1092)))+(((r11)*(sj1)*(x1103)))+(((cj1)*(r00)*(x1094)))+(((cj1)*(x1105)))+(((IkReal(-1.00000000000000))*(x1099)*(x1109))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1110=((r01)*(sj1));
IkReal x1111=((cj1)*(r11));
IkReal x1112=((cj2)*(sj3));
IkReal x1113=((IkReal(1.00000000000000))*(cj1));
IkReal x1114=((r10)*(sj6));
IkReal x1115=((r02)*(sj1));
IkReal x1116=((cj3)*(sj2));
IkReal x1117=((cj6)*(x1116));
IkReal x1118=((r00)*(sj1)*(sj6));
if( IKabs(((gconst22)*(((((IkReal(-1.00000000000000))*(x1116)*(x1118)))+(((IkReal(-1.00000000000000))*(x1110)*(x1117)))+(((x1111)*(x1117)))+(((cj1)*(x1114)*(x1116)))+(((x1112)*(x1118)))+(((IkReal(-1.00000000000000))*(x1112)*(x1113)*(x1114)))+(((cj6)*(x1110)*(x1112)))+(((IkReal(-1.00000000000000))*(cj6)*(x1111)*(x1112))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst22)*(((((x1112)*(x1115)))+(((cj1)*(r12)*(x1116)))+(((IkReal(-1.00000000000000))*(r12)*(x1112)*(x1113)))+(((IkReal(-1.00000000000000))*(x1115)*(x1116))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j5array[0]=IKatan2(((gconst22)*(((((IkReal(-1.00000000000000))*(x1116)*(x1118)))+(((IkReal(-1.00000000000000))*(x1110)*(x1117)))+(((x1111)*(x1117)))+(((cj1)*(x1114)*(x1116)))+(((x1112)*(x1118)))+(((IkReal(-1.00000000000000))*(x1112)*(x1113)*(x1114)))+(((cj6)*(x1110)*(x1112)))+(((IkReal(-1.00000000000000))*(cj6)*(x1111)*(x1112)))))), ((gconst22)*(((((x1112)*(x1115)))+(((cj1)*(r12)*(x1116)))+(((IkReal(-1.00000000000000))*(r12)*(x1112)*(x1113)))+(((IkReal(-1.00000000000000))*(x1115)*(x1116)))))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[3];
IkReal x1119=IKcos(j5);
IkReal x1120=IKsin(j5);
IkReal x1121=((IkReal(1.00000000000000))*(cj1));
IkReal x1122=((IkReal(1.00000000000000))*(sj1));
IkReal x1123=((IkReal(1.00000000000000))*(cj3));
IkReal x1124=((sj6)*(x1119));
IkReal x1125=((cj6)*(x1119));
IkReal x1126=((r02)*(x1120));
IkReal x1127=((r12)*(x1120));
evalcond[0]=((((cj2)*(sj3)))+(((IkReal(-1.00000000000000))*(sj2)*(x1123)))+(((r21)*(x1125)))+(((IkReal(-1.00000000000000))*(r22)*(x1120)))+(((r20)*(x1124))));
evalcond[1]=((((r00)*(sj1)*(x1124)))+(((r01)*(sj1)*(x1125)))+(((IkReal(-1.00000000000000))*(r11)*(x1121)*(x1125)))+(((IkReal(-1.00000000000000))*(x1122)*(x1126)))+(((cj1)*(x1127)))+(((IkReal(-1.00000000000000))*(r10)*(x1121)*(x1124))));
evalcond[2]=((((sj1)*(x1127)))+(((IkReal(-1.00000000000000))*(sj2)*(sj3)))+(((IkReal(-1.00000000000000))*(r01)*(x1121)*(x1125)))+(((IkReal(-1.00000000000000))*(r11)*(x1122)*(x1125)))+(((IkReal(-1.00000000000000))*(r00)*(x1121)*(x1124)))+(((cj1)*(x1126)))+(((IkReal(-1.00000000000000))*(cj2)*(x1123)))+(((IkReal(-1.00000000000000))*(r10)*(x1122)*(x1124))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst26;
gconst26=IKsign(((((sj2)*(sj3)))+(((cj2)*(cj3)))));
dummyeval[0]=((((sj2)*(sj3)))+(((cj2)*(cj3))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=((((sj2)*(sj3)))+(((cj2)*(cj3))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1128=((IkReal(1.00000000000000))*(sj6));
if( IKabs(((((IKabs(((((sj2)*(sj3)))+(((cj2)*(cj3))))) != 0)?((IkReal)1/(((((sj2)*(sj3)))+(((cj2)*(cj3)))))):(IkReal)1.0e30))*(((((cj6)*(r20)))+(((IkReal(-1.00000000000000))*(r21)*(x1128))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((cj6)*(r00)*(sj1)))+(((IkReal(-1.00000000000000))*(cj1)*(cj6)*(r10)))+(((cj1)*(r11)*(sj6)))+(((IkReal(-1.00000000000000))*(r01)*(sj1)*(x1128))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(((((sj2)*(sj3)))+(((cj2)*(cj3))))) != 0)?((IkReal)1/(((((sj2)*(sj3)))+(((cj2)*(cj3)))))):(IkReal)1.0e30))*(((((cj6)*(r20)))+(((IkReal(-1.00000000000000))*(r21)*(x1128)))))))+IKsqr(((((cj6)*(r00)*(sj1)))+(((IkReal(-1.00000000000000))*(cj1)*(cj6)*(r10)))+(((cj1)*(r11)*(sj6)))+(((IkReal(-1.00000000000000))*(r01)*(sj1)*(x1128)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((IKabs(((((sj2)*(sj3)))+(((cj2)*(cj3))))) != 0)?((IkReal)1/(((((sj2)*(sj3)))+(((cj2)*(cj3)))))):(IkReal)1.0e30))*(((((cj6)*(r20)))+(((IkReal(-1.00000000000000))*(r21)*(x1128)))))), ((((cj6)*(r00)*(sj1)))+(((IkReal(-1.00000000000000))*(cj1)*(cj6)*(r10)))+(((cj1)*(r11)*(sj6)))+(((IkReal(-1.00000000000000))*(r01)*(sj1)*(x1128)))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1129=IKsin(j4);
IkReal x1130=IKcos(j4);
IkReal x1131=((cj5)*(r12));
IkReal x1132=((IkReal(1.00000000000000))*(sj1));
IkReal x1133=((sj5)*(sj6));
IkReal x1134=((cj5)*(r02));
IkReal x1135=((cj6)*(r00));
IkReal x1136=((cj1)*(r10));
IkReal x1137=((IkReal(1.00000000000000))*(sj2));
IkReal x1138=((IkReal(1.00000000000000))*(cj2));
IkReal x1139=((IkReal(1.00000000000000))*(cj6));
IkReal x1140=((cj1)*(r11));
IkReal x1141=((IkReal(1.00000000000000))*(sj6));
IkReal x1142=((cj6)*(sj5));
IkReal x1143=((r10)*(sj1));
IkReal x1144=((r01)*(x1142));
IkReal x1145=((cj3)*(x1129));
IkReal x1146=((cj3)*(x1130));
IkReal x1147=((sj3)*(x1129));
IkReal x1148=((sj3)*(x1130));
evalcond[0]=((((r21)*(sj6)))+(((cj2)*(x1145)))+(((sj2)*(x1147)))+(((IkReal(-1.00000000000000))*(r20)*(x1139))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x1140)*(x1141)))+(x1130)+(((IkReal(-1.00000000000000))*(x1132)*(x1135)))+(((r01)*(sj1)*(sj6)))+(((cj6)*(x1136))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x1137)*(x1148)))+(((IkReal(-1.00000000000000))*(r21)*(sj5)*(x1139)))+(((IkReal(-1.00000000000000))*(r20)*(x1133)))+(((IkReal(-1.00000000000000))*(cj5)*(r22)))+(((IkReal(-1.00000000000000))*(x1138)*(x1146))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x1137)*(x1145)))+(((cj6)*(x1143)))+(((IkReal(-1.00000000000000))*(cj1)*(r01)*(x1141)))+(((cj2)*(x1147)))+(((cj1)*(x1135)))+(((IkReal(-1.00000000000000))*(r11)*(sj6)*(x1132))));
evalcond[4]=((((x1140)*(x1142)))+(x1129)+(((IkReal(-1.00000000000000))*(r00)*(x1132)*(x1133)))+(((IkReal(-1.00000000000000))*(x1132)*(x1144)))+(((IkReal(-1.00000000000000))*(x1132)*(x1134)))+(((cj1)*(x1131)))+(((x1133)*(x1136))));
evalcond[5]=((((sj1)*(x1131)))+(((sj2)*(x1146)))+(((cj1)*(x1144)))+(((x1133)*(x1143)))+(((cj1)*(x1134)))+(((r11)*(sj1)*(x1142)))+(((cj1)*(r00)*(x1133)))+(((IkReal(-1.00000000000000))*(x1138)*(x1148))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1149=((IkReal(1.00000000000000))*(r21));
if( IKabs(((gconst26)*(((((IkReal(-1.00000000000000))*(sj6)*(x1149)))+(((cj6)*(r20))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst26)*(((((IkReal(-1.00000000000000))*(cj6)*(sj5)*(x1149)))+(((IkReal(-1.00000000000000))*(cj5)*(r22)))+(((IkReal(-1.00000000000000))*(r20)*(sj5)*(sj6))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst26)*(((((IkReal(-1.00000000000000))*(sj6)*(x1149)))+(((cj6)*(r20)))))), ((gconst26)*(((((IkReal(-1.00000000000000))*(cj6)*(sj5)*(x1149)))+(((IkReal(-1.00000000000000))*(cj5)*(r22)))+(((IkReal(-1.00000000000000))*(r20)*(sj5)*(sj6)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1150=IKsin(j4);
IkReal x1151=IKcos(j4);
IkReal x1152=((cj5)*(r12));
IkReal x1153=((IkReal(1.00000000000000))*(sj1));
IkReal x1154=((sj5)*(sj6));
IkReal x1155=((cj5)*(r02));
IkReal x1156=((cj6)*(r00));
IkReal x1157=((cj1)*(r10));
IkReal x1158=((IkReal(1.00000000000000))*(sj2));
IkReal x1159=((IkReal(1.00000000000000))*(cj2));
IkReal x1160=((IkReal(1.00000000000000))*(cj6));
IkReal x1161=((cj1)*(r11));
IkReal x1162=((IkReal(1.00000000000000))*(sj6));
IkReal x1163=((cj6)*(sj5));
IkReal x1164=((r10)*(sj1));
IkReal x1165=((r01)*(x1163));
IkReal x1166=((cj3)*(x1150));
IkReal x1167=((cj3)*(x1151));
IkReal x1168=((sj3)*(x1150));
IkReal x1169=((sj3)*(x1151));
evalcond[0]=((((sj2)*(x1168)))+(((IkReal(-1.00000000000000))*(r20)*(x1160)))+(((r21)*(sj6)))+(((cj2)*(x1166))));
evalcond[1]=((x1151)+(((cj6)*(x1157)))+(((IkReal(-1.00000000000000))*(x1153)*(x1156)))+(((r01)*(sj1)*(sj6)))+(((IkReal(-1.00000000000000))*(x1161)*(x1162))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x1159)*(x1167)))+(((IkReal(-1.00000000000000))*(x1158)*(x1169)))+(((IkReal(-1.00000000000000))*(r21)*(sj5)*(x1160)))+(((IkReal(-1.00000000000000))*(r20)*(x1154)))+(((IkReal(-1.00000000000000))*(cj5)*(r22))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x1158)*(x1166)))+(((IkReal(-1.00000000000000))*(cj1)*(r01)*(x1162)))+(((cj6)*(x1164)))+(((cj1)*(x1156)))+(((IkReal(-1.00000000000000))*(r11)*(sj6)*(x1153)))+(((cj2)*(x1168))));
evalcond[4]=((x1150)+(((IkReal(-1.00000000000000))*(x1153)*(x1165)))+(((cj1)*(x1152)))+(((IkReal(-1.00000000000000))*(x1153)*(x1155)))+(((IkReal(-1.00000000000000))*(r00)*(x1153)*(x1154)))+(((x1154)*(x1157)))+(((x1161)*(x1163))));
evalcond[5]=((((cj1)*(x1165)))+(((cj1)*(r00)*(x1154)))+(((sj2)*(x1167)))+(((IkReal(-1.00000000000000))*(x1159)*(x1169)))+(((r11)*(sj1)*(x1163)))+(((x1154)*(x1164)))+(((cj1)*(x1155)))+(((sj1)*(x1152))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}

}

}
    }
}
return solutions.GetNumSolutions()>0;
}

static inline bool checkconsistency8(const IkReal* Breal)
{
    IkReal norm = 0.1;
    for(int i = 0; i < 7; ++i) {
        norm += IKabs(Breal[i]);
    }
    IkReal tol = 1e-5*norm; // have to increase the threshold since many computations are involved
    return IKabs(Breal[0]*Breal[1]-Breal[2]) < tol && IKabs(Breal[1]*Breal[1]-Breal[3]) < tol && IKabs(Breal[0]*Breal[3]-Breal[4]) < tol && IKabs(Breal[1]*Breal[3]-Breal[5]) < tol && IKabs(Breal[0]*Breal[5]-Breal[6]) < tol;
}
/// \brief Solve the det Ax^2+Bx+C = 0 problem using the Manocha and Canny method (1994)
///
/// matcoeffs is of length 54*3, for 3 matrices
static inline void solvedialyticpoly8qep(const IkReal* matcoeffs, IkReal* rawroots, int& numroots)
{
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    IkReal IKFAST_ALIGNED16(M[16*16]) = {0};
    IkReal IKFAST_ALIGNED16(A[8*8]);
    IkReal IKFAST_ALIGNED16(work[16*16*15]);
    int ipiv[8];
    int info, coeffindex;
    const int worksize=16*16*15;
    const int matrixdim = 8;
    const int matrixdim2 = 16;
    numroots = 0;
    // first setup M = [0 I; -C -B] and A
    coeffindex = 0;
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = matcoeffs[coeffindex++];
        }
        for(int k = 0; k < 2; ++k) {
            A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
        }
    }
    const IkReal lfpossibilities[4][4] = {{1,-1,1,1},{1,0,-2,1},{1,1,2,0},{1,-1,4,1}};
    int lfindex = -1;
    bool bsingular = true;
    do {
        dgetrf_(&matrixdim,&matrixdim,A,&matrixdim,&ipiv[0],&info);
        if( info == 0 ) {
            bsingular = false;
            for(int j = 0; j < matrixdim; ++j) {
                if( IKabs(A[j*matrixdim+j]) < 100*tol ) {
                    bsingular = true;
                    break;
                }
            }
            if( !bsingular ) {
                break;
            }
        }
        if( lfindex == 3 ) {
            break;
        }
        // transform by the linear functional
        lfindex++;
        const IkReal* lf = lfpossibilities[lfindex];
        // have to reinitialize A
        coeffindex = 0;
        for(int j = 0; j < 4; ++j) {
            for(int k = 0; k < 6; ++k) {
                IkReal a = matcoeffs[coeffindex+48], b = matcoeffs[coeffindex+24], c = matcoeffs[coeffindex];
                A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = lf[0]*lf[0]*a+lf[0]*lf[2]*b+lf[2]*lf[2]*c;
                M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -(lf[1]*lf[1]*a + lf[1]*lf[3]*b + lf[3]*lf[3]*c);
                M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -(2*lf[0]*lf[1]*a + (lf[0]*lf[3]+lf[1]*lf[2])*b + 2*lf[2]*lf[3]*c);
                coeffindex++;
            }
            for(int k = 0; k < 2; ++k) {
                A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
            }
        }
    } while(lfindex<4);

    if( bsingular ) {
        return;
    }
    dgetrs_("No transpose", &matrixdim, &matrixdim2, A, &matrixdim, &ipiv[0], &M[matrixdim], &matrixdim2, &info);
    if( info != 0 ) {
        return;
    }

    // set identity in upper corner
    for(int j = 0; j < matrixdim; ++j) {
        M[matrixdim*2*matrixdim+j+matrixdim*2*j] = 1;
    }
    IkReal IKFAST_ALIGNED16(wr[16]);
    IkReal IKFAST_ALIGNED16(wi[16]);
    IkReal IKFAST_ALIGNED16(vr[16*16]);
    int one=1;
    dgeev_("N", "V", &matrixdim2, M, &matrixdim2, wr, wi,NULL, &one, vr, &matrixdim2, work, &worksize, &info);
    if( info != 0 ) {
        return;
    }
    IkReal Breal[matrixdim-1];
    for(int i = 0; i < matrixdim2; ++i) {
        if( IKabs(wi[i]) < tol*100 ) {
            IkReal* ev = vr+matrixdim2*i;
            if( IKabs(wr[i]) > 1 ) {
                ev += matrixdim;
            }
            // consistency has to be checked!!
            if( IKabs(ev[0]) < tol ) {
                continue;
            }
            IkReal iconst = 1/ev[0];
            for(int j = 1; j < matrixdim; ++j) {
                Breal[j-1] = ev[j]*iconst;
            }
            if( checkconsistency8(Breal) ) {
                if( lfindex >= 0 ) {
                    const IkReal* lf = lfpossibilities[lfindex];
                    rawroots[numroots++] = (wr[i]*lf[0]+lf[1])/(wr[i]*lf[2]+lf[3]);
                }
                else {
                    rawroots[numroots++] = wr[i];
                }
                bool bsmall0=IKabs(ev[0]) > IKabs(ev[2]);
                bool bsmall1=IKabs(ev[0]) > IKabs(ev[1]);
                if( bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[2]/ev[0];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[3]/ev[1];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( !bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[6]/ev[4];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
                else if( !bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[7]/ev[5];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
            }
        }
    }
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:genericrobot - clopema (5fdbe354c2b31d39b906be84114e9e9d)>"; }

IKFAST_API const char* GetIkFastVersion() { return IKFAST_STRINGIZE(IKFAST_VERSION); }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
