/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 61 generated on 2013-07-21 16:13:08.926410
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==61);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#define IKFAST_STRINGIZE2(s) #s
#define IKFAST_STRINGIZE(s) IKFAST_STRINGIZE2(s)

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)0.000001)
#endif

// used to check input to atan2 for degenerate cases
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)2e-6)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34;
x0=IKcos(j[0]);
x1=IKsin(j[1]);
x2=IKsin(j[2]);
x3=IKcos(j[1]);
x4=IKcos(j[2]);
x5=IKsin(j[4]);
x6=IKcos(j[3]);
x7=IKsin(j[0]);
x8=IKsin(j[3]);
x9=IKcos(j[4]);
x10=((IkReal(0.130000000000000))*(x2));
x11=((IkReal(0.200000000000000))*(x4));
x12=((IkReal(0.150000000000000))*(x0));
x13=((IkReal(0.150000000000000))*(x7));
x14=((IkReal(0.200000000000000))*(x0));
x15=((IkReal(1.00000000000000))*(x6));
x16=((IkReal(1.00000000000000))*(x7));
x17=((IkReal(0.150000000000000))*(x6));
x18=((IkReal(1.00000000000000))*(x0));
x19=((IkReal(1.00000000000000))*(x2));
x20=((IkReal(0.640000000000000))*(x2));
x21=((IkReal(0.130000000000000))*(x7));
x22=((IkReal(0.150000000000000))*(x2));
x23=((x1)*(x7));
x24=((x1)*(x4));
x25=((x0)*(x1));
x26=((x1)*(x2));
x27=((x3)*(x4));
x28=((x0)*(x8));
x29=((IkReal(-0.130000000000000))*(x6));
x30=((x6)*(x9));
x31=((x2)*(x3));
x32=((((IkReal(-1.00000000000000))*(x18)*(x31)))+(((x0)*(x24))));
x33=((((x23)*(x4)))+(((IkReal(-1.00000000000000))*(x16)*(x31))));
x34=((x33)*(x6));
IkReal x35=((x0)*(x27));
eetrans[0]=((((x9)*(((((x29)*(x32)))+(((x21)*(x8)))))))+(((IkReal(-1.00000000000000))*(x14)*(x31)))+(((x9)*(((((x12)*(x26)))+(((x12)*(x27)))))))+(((IkReal(0.614000000000000))*(x25)))+(((x11)*(x25)))+(((x5)*(((((IkReal(0.130000000000000))*(x35)))+(((x10)*(x25)))))))+(x12)+(((x5)*(((((x17)*(x32)))+(((IkReal(-1.00000000000000))*(x13)*(x8)))))))+(((IkReal(0.640000000000000))*(x35)))+(((x20)*(x25))));
eetrans[1]=((((IkReal(-0.200000000000000))*(x31)*(x7)))+(((x9)*(((((x29)*(x33)))+(((IkReal(-0.130000000000000))*(x28)))))))+(((x5)*(((((x21)*(x27)))+(((x10)*(x23)))))))+(((x9)*(((((x13)*(x27)))+(((x13)*(x26)))))))+(((IkReal(0.614000000000000))*(x23)))+(((IkReal(0.640000000000000))*(x27)*(x7)))+(((x11)*(x23)))+(x13)+(((x5)*(((((x17)*(x33)))+(((x12)*(x8)))))))+(((x20)*(x23))));
eetrans[2]=((IkReal(0.450000000000000))+(((IkReal(-0.640000000000000))*(x24)))+(((x30)*(((((IkReal(-1.00000000000000))*(x1)*(x10)))+(((IkReal(-0.130000000000000))*(x27)))))))+(((IkReal(0.200000000000000))*(x26)))+(((x5)*(x6)*(((((x1)*(x22)))+(((IkReal(0.150000000000000))*(x27)))))))+(((x11)*(x3)))+(((x5)*(((((IkReal(-0.130000000000000))*(x24)))+(((x10)*(x3)))))))+(((IkReal(0.614000000000000))*(x3)))+(((x9)*(((((x22)*(x3)))+(((IkReal(-0.150000000000000))*(x24)))))))+(((x20)*(x3))));
eerot[0]=((((x9)*(((((x16)*(x8)))+(((IkReal(-1.00000000000000))*(x15)*(x32)))))))+(((x5)*(((((x18)*(x26)))+(((x18)*(x27))))))));
eerot[1]=((((x5)*(((((x16)*(x26)))+(((x16)*(x27)))))))+(((x9)*(((((IkReal(-1.00000000000000))*(x18)*(x8)))+(((IkReal(-1.00000000000000))*(x15)*(x33))))))));
eerot[2]=((((x30)*(((((IkReal(-1.00000000000000))*(x27)))+(((IkReal(-1.00000000000000))*(x1)*(x19)))))))+(((x5)*(((((x19)*(x3)))+(((IkReal(-1.00000000000000))*(x24))))))));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 5; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x56000007; }

class IKSolver {
public:
IkReal j1,cj1,sj1,htj1,j2,cj2,sj2,htj2,j3,cj3,sj3,htj3,j4,cj4,sj4,htj4,j5,cj5,sj5,htj5,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5;

bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

r00 = eerot[0];
r01 = eerot[1];
r02 = eerot[2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];
new_r00=r00;
new_px=px;
new_r01=r01;
new_py=py;
new_r02=r02;
new_pz=((IkReal(-0.450000000000000))+(pz));
r00 = new_r00; r01 = new_r01; r02 = new_r02; px = new_px; py = new_py; pz = new_pz;

pp=(((px)*(px))+((py)*(py))+((pz)*(pz)));
IkReal op[72], zeror[48];
int numroots;
IkReal x36=((IkReal(0.203125000000000))*(py));
IkReal x37=((IkReal(0.414000000000000))*(r01));
IkReal x38=(py)*(py);
IkReal x39=((IkReal(1.04192000000000))*(r01));
IkReal x40=((pp)*(r01));
IkReal x41=((IkReal(0.260000000000000))*(py));
IkReal x42=(px)*(px);
IkReal x43=(pz)*(pz);
IkReal x44=((IkReal(0.260000000000000))*(pz));
IkReal x45=((IkReal(0.124200000000000))*(r02));
IkReal x46=((IkReal(0.519096000000000))*(r00));
IkReal x47=((IkReal(0.260000000000000))*(px));
IkReal x48=((IkReal(0.136296000000000))*(r02));
IkReal x49=((IkReal(0.601720000000000))*(r00));
IkReal x50=((IkReal(0.520000000000000))*(pz));
IkReal x51=((IkReal(1.57184000000000))*(r02));
IkReal x52=((IkReal(0.520000000000000))*(px));
IkReal x53=((IkReal(0.0214080000000000))*(r00));
IkReal x54=((pp)*(r00));
IkReal x55=((IkReal(1.01029600000000))*(r00));
IkReal x56=((IkReal(0.244200000000000))*(r02));
IkReal x57=((pp)*(r02));
IkReal x58=((IkReal(0.970120000000000))*(r00));
IkReal x59=((IkReal(0.247704000000000))*(r02));
IkReal x60=((IkReal(0.406250000000000))*(px));
IkReal x61=((IkReal(0.828000000000000))*(r00));
IkReal x62=((IkReal(2.08384000000000))*(r00));
IkReal x63=((IkReal(0.520000000000000))*(py));
IkReal x64=((IkReal(1.03819200000000))*(r01));
IkReal x65=((IkReal(1.20344000000000))*(r01));
IkReal x66=((IkReal(2.02059200000000))*(r01));
IkReal x67=((IkReal(1.94024000000000))*(r01));
IkReal x68=((IkReal(0.720075000000000))*(r01));
IkReal x69=((pz)*(r01));
IkReal x70=((IkReal(0.287812500000000))*(r01));
IkReal x71=((IkReal(0.300000000000000))*(r01));
IkReal x72=((IkReal(0.420075000000000))*(r01));
IkReal x73=((py)*(r02));
IkReal x74=((IkReal(0.537696000000000))*(r01));
IkReal x75=((IkReal(0.384000000000000))*(r01));
IkReal x76=((IkReal(0.368400000000000))*(r01));
IkReal x77=((IkReal(0.921696000000000))*(r01));
IkReal x78=((IkReal(1.12819200000000))*(r02));
IkReal x79=((IkReal(2.11059200000000))*(r02));
IkReal x80=((px)*(r01));
IkReal x81=((IkReal(4.00000000000000))*(py));
IkReal x82=((IkReal(1.00000000000000))*(pp));
IkReal x83=((px)*(r02));
IkReal x84=((pz)*(r00));
IkReal x85=((pz)*(r02));
IkReal x86=((py)*(r00));
IkReal x87=((px)*(r00));
IkReal x88=((py)*(r01));
IkReal x89=((IkReal(2.00000000000000))*(py));
IkReal x90=((IkReal(2.00000000000000))*(px));
IkReal x91=((IkReal(2.00000000000000))*(pz));
IkReal x92=((IkReal(0.959375000000000))*(x69));
IkReal x93=((IkReal(0.781250000000000))*(x40));
IkReal x94=((IkReal(0.959375000000000))*(x73));
IkReal x95=((IkReal(1.28000000000000))*(x69));
IkReal x96=((IkReal(1.28000000000000))*(x73));
IkReal x97=((IkReal(1.22800000000000))*(x69));
IkReal x98=((IkReal(1.22800000000000))*(x73));
IkReal x99=((IkReal(1.22800000000000))*(x87));
IkReal x100=((IkReal(1.22800000000000))*(x88));
IkReal x101=((IkReal(1.22800000000000))*(x85));
IkReal x102=((IkReal(0.300000000000000))*(x85));
IkReal x103=((py)*(x71));
IkReal x104=((pz)*(x61));
IkReal x105=((IkReal(0.300000000000000))*(x87));
IkReal x106=((IkReal(0.828000000000000))*(x83));
IkReal x107=((IkReal(1.00000000000000))*(x54));
IkReal x108=((IkReal(0.980000000000000))*(x84));
IkReal x109=((IkReal(1.00000000000000))*(x57));
IkReal x110=((IkReal(0.980000000000000))*(x83));
IkReal x111=((IkReal(2.00000000000000))*(x57));
IkReal x112=((IkReal(0.600000000000000))*(x84));
IkReal x113=((IkReal(2.00000000000000))*(x54));
IkReal x114=((IkReal(0.600000000000000))*(x88));
IkReal x115=((IkReal(0.600000000000000))*(x85));
IkReal x116=((IkReal(0.600000000000000))*(x87));
IkReal x117=((IkReal(1.62800000000000))*(x84));
IkReal x118=((IkReal(1.62800000000000))*(x83));
IkReal x119=((IkReal(1.58000000000000))*(x84));
IkReal x120=((IkReal(1.58000000000000))*(x83));
IkReal x121=((IkReal(1.91875000000000))*(x83));
IkReal x122=((IkReal(1.91875000000000))*(x84));
IkReal x123=((IkReal(1.56250000000000))*(x54));
IkReal x124=((IkReal(2.00000000000000))*(x83));
IkReal x125=((IkReal(2.00000000000000))*(x84));
IkReal x126=((IkReal(2.56000000000000))*(x83));
IkReal x127=((IkReal(2.56000000000000))*(x84));
IkReal x128=((IkReal(2.45600000000000))*(x83));
IkReal x129=((IkReal(2.45600000000000))*(x84));
IkReal x130=((IkReal(2.00000000000000))*(x40));
IkReal x131=((IkReal(1.65600000000000))*(x69));
IkReal x132=((IkReal(1.65600000000000))*(x73));
IkReal x133=((IkReal(1.96000000000000))*(x69));
IkReal x134=((IkReal(1.96000000000000))*(x73));
IkReal x135=((IkReal(3.25600000000000))*(x69));
IkReal x136=((IkReal(3.25600000000000))*(x73));
IkReal x137=((IkReal(3.16000000000000))*(x69));
IkReal x138=((IkReal(3.16000000000000))*(x73));
IkReal x139=((IkReal(1.23437500000000))*(x86));
IkReal x140=((IkReal(1.23437500000000))*(x80));
IkReal x141=((IkReal(1.00000000000000))*(x73));
IkReal x142=((IkReal(2.00000000000000))*(x73));
IkReal x143=((IkReal(1.91875000000000))*(x86));
IkReal x144=((IkReal(2.00000000000000))*(x69));
IkReal x145=((IkReal(1.91875000000000))*(x80));
IkReal x146=((IkReal(2.00000000000000))*(x86));
IkReal x147=((IkReal(2.00000000000000))*(x80));
IkReal x148=((IkReal(0.765625000000000))*(x80));
IkReal x149=((IkReal(0.765625000000000))*(x86));
IkReal x150=((IkReal(1.00000000000000))*(x69));
IkReal x151=((IkReal(0.980000000000000))*(x80));
IkReal x152=((IkReal(0.980000000000000))*(x86));
IkReal x153=((IkReal(2.56000000000000))*(x86));
IkReal x154=((IkReal(2.56000000000000))*(x80));
IkReal x155=((IkReal(2.45600000000000))*(x86));
IkReal x156=((IkReal(2.56000000000000))*(x69));
IkReal x157=((IkReal(2.56000000000000))*(x73));
IkReal x158=((IkReal(2.45600000000000))*(x80));
IkReal x159=((IkReal(1.58000000000000))*(x86));
IkReal x160=((IkReal(1.58000000000000))*(x80));
IkReal x161=((IkReal(1.00000000000000))*(x40));
IkReal x162=((IkReal(0.600000000000000))*(x83));
IkReal x163=((IkReal(0.159640000000000))+(x48));
IkReal x164=((IkReal(0.0780000000000000))+(x51));
IkReal x165=((IkReal(0.0390000000000000))+(x56));
IkReal x166=((IkReal(0.0390000000000000))+(x45));
IkReal x167=((IkReal(-0.0390000000000000))+(x56));
IkReal x168=((IkReal(-0.159640000000000))+(x48));
IkReal x169=((IkReal(-0.0780000000000000))+(x51));
IkReal x170=((r01)*(x38));
IkReal x171=((r02)*(x43));
IkReal x172=((r00)*(x42));
IkReal x173=((IkReal(1.56250000000000))*(pz)*(x73));
IkReal x174=((IkReal(1.56250000000000))*(px)*(x86));
IkReal x175=((IkReal(1.56250000000000))*(x170));
IkReal x176=((x86)*(x90));
IkReal x177=((IkReal(2.00000000000000))*(x170));
IkReal x178=((x73)*(x91));
IkReal x179=((x84)*(x90));
IkReal x180=((IkReal(2.00000000000000))*(x171));
IkReal x181=((x69)*(x89));
IkReal x182=((x80)*(x89));
IkReal x183=((IkReal(2.00000000000000))*(x172));
IkReal x184=((x83)*(x91));
IkReal x185=((IkReal(4.00000000000000))*(pz)*(x83));
IkReal x186=((IkReal(4.00000000000000))*(x172));
IkReal x187=((x80)*(x81));
IkReal x188=((IkReal(3.12500000000000))*(py)*(x80));
IkReal x189=((IkReal(3.12500000000000))*(x172));
IkReal x190=((IkReal(3.12500000000000))*(pz)*(x83));
IkReal x191=((IkReal(4.00000000000000))*(pz)*(x73));
IkReal x192=((x81)*(x87));
IkReal x193=((IkReal(4.00000000000000))*(x170));
IkReal x194=((x69)*(x81));
IkReal x195=((IkReal(4.00000000000000))*(px)*(x84));
IkReal x196=((IkReal(4.00000000000000))*(x171));
IkReal x197=((x46)+(x47));
IkReal x198=((x40)+(x41));
IkReal x199=((((IkReal(-1.20000000000000))*(x73)))+(((IkReal(1.20000000000000))*(x69))));
IkReal x200=((x39)+(x96));
IkReal x201=((x39)+(x95));
IkReal x202=((x144)+(x70));
IkReal x203=((IkReal(-0.159640000000000))+(x59)+(x57));
IkReal x204=((x113)+(x52));
IkReal x205=((x157)+(x76));
IkReal x206=((x119)+(x58));
IkReal x207=((x120)+(x58));
IkReal x208=((x36)+(x93));
IkReal x209=((x68)+(x94));
IkReal x210=((x72)+(x92));
IkReal x211=((x130)+(x63));
IkReal x212=((x123)+(x60));
IkReal x213=((x161)+(x41));
IkReal x214=((x77)+(x97));
IkReal x215=((x74)+(x98));
IkReal x216=((x111)+(x50));
IkReal x217=((x110)+(x109));
IkReal x218=((x108)+(x109));
IkReal x219=((x47)+(x55)+(x54));
IkReal x220=((((IkReal(0.0428160000000000))*(r01)))+(((IkReal(4.00000000000000))*(x40)))+(((IkReal(1.04000000000000))*(py))));
IkReal x221=((IkReal(0.159640000000000))+(x44)+(x59)+(x57));
IkReal x222=((x107)+(x47)+(x55));
IkReal x223=((x116)+(x115)+(x114));
IkReal x224=((x100)+(x101)+(x99));
IkReal x225=((x105)+(x102)+(x103));
IkReal x226=((x224)+(x44));
IkReal x227=((((IkReal(8.00000000000000))*(x170)))+(((IkReal(8.00000000000000))*(px)*(x86)))+(((IkReal(8.00000000000000))*(pz)*(x73))));
IkReal x228=((IkReal(-0.0390000000000000))+(x225)+(x45));
IkReal x229=((x196)+(x195)+(x194));
IkReal x230=((x185)+(x186)+(x187));
IkReal x231=((x193)+(x192)+(x191));
IkReal x232=((x179)+(x180)+(x181));
IkReal x233=((x190)+(x188)+(x189));
IkReal x234=((x184)+(x182)+(x183));
IkReal x235=((x162)+(x229));
IkReal x236=((x112)+(x229));
IkReal x237=((x106)+(x234));
IkReal x238=((x173)+(x175)+(x174)+(x94));
IkReal x239=((x178)+(x177)+(x176)+(x97));
IkReal x240=((x178)+(x177)+(x176)+(x98));
IkReal x241=((x173)+(x175)+(x174)+(x92));
op[0]=((((IkReal(-1.00000000000000))*(x140)))+(x139)+(x209)+(x208)+(((IkReal(-1.00000000000000))*(x241))));
op[1]=((((IkReal(-1.00000000000000))*(x150)))+(x73)+(x37));
op[2]=((((IkReal(-1.00000000000000))*(x142)))+(((IkReal(-1.00000000000000))*(x145)))+(x143)+(x202));
op[3]=((((IkReal(-1.00000000000000))*(x147)))+(x146)+(x71));
op[4]=((((IkReal(-1.00000000000000))*(x149)))+(x148)+(((IkReal(-1.00000000000000))*(x238)))+(x210)+(x208));
op[5]=((((IkReal(-1.00000000000000))*(x141)))+(x37)+(x69));
op[6]=((x200)+(((IkReal(-1.00000000000000))*(x95))));
op[7]=((((IkReal(-1.00000000000000))*(x152)))+(x151)+(x198)+(((IkReal(-1.00000000000000))*(x239)))+(x215));
op[8]=((((IkReal(-1.00000000000000))*(x154)))+(x153)+(x75));
op[9]=((((IkReal(-1.00000000000000))*(x156)))+(((IkReal(-1.00000000000000))*(x158)))+(x155)+(x205));
op[10]=((x201)+(((IkReal(-1.00000000000000))*(x96))));
op[11]=((((IkReal(-1.00000000000000))*(x160)))+(x159)+(x198)+(x214)+(((IkReal(-1.00000000000000))*(x240))));
op[12]=((x119)+(((IkReal(-1.00000000000000))*(x207)))+(((IkReal(-1.00000000000000))*(x232)))+(x226)+(x203));
op[13]=((((IkReal(-1.00000000000000))*(x107)))+(((IkReal(-1.00000000000000))*(x106)))+(((IkReal(-1.00000000000000))*(x197)))+(x166)+(x104)+(x234)+(((IkReal(-1.00000000000000))*(x225))));
op[14]=((x169)+(((IkReal(-1.00000000000000))*(x230)))+(x223)+(x204)+(x53));
op[15]=((x112)+(((IkReal(-1.00000000000000))*(x235)))+(x216)+(x78));
op[16]=((((IkReal(-1.00000000000000))*(x44)))+(x168)+(x108)+(x224)+(x232)+(x49)+(((IkReal(-1.00000000000000))*(x217))));
op[17]=((x104)+(x197)+(((IkReal(-1.00000000000000))*(x237)))+(x228)+(x54));
op[18]=((((IkReal(-1.00000000000000))*(x118)))+(x165)+(x117)+(x234)+(((IkReal(-1.00000000000000))*(x225)))+(((IkReal(-1.00000000000000))*(x222))));
op[19]=((((IkReal(-1.00000000000000))*(x49)))+(x163)+(x108)+(x232)+(((IkReal(-1.00000000000000))*(x217)))+(((IkReal(-1.00000000000000))*(x226))));
op[20]=((x112)+(((IkReal(-1.00000000000000))*(x235)))+(x216)+(x79));
op[21]=((x164)+(((IkReal(-1.00000000000000))*(x204)))+(x230)+(((IkReal(-1.00000000000000))*(x53)))+(((IkReal(-1.00000000000000))*(x223))));
op[22]=((((IkReal(-1.00000000000000))*(x118)))+(x167)+(x117)+(((IkReal(-1.00000000000000))*(x234)))+(x219)+(x225));
op[23]=((((IkReal(-1.00000000000000))*(x120)))+(((IkReal(-1.00000000000000))*(x232)))+(x221)+(x206)+(((IkReal(-1.00000000000000))*(x224))));
op[24]=((((IkReal(-1.44015000000000))*(r00)))+(((IkReal(-1.00000000000000))*(x121)))+(x122)+(x233)+(((IkReal(-1.00000000000000))*(x212))));
op[25]=((((IkReal(-1.00000000000000))*(x124)))+(x125)+(((IkReal(-1.00000000000000))*(x61))));
op[26]=((((IkReal(-4.00000000000000))*(x84)))+(((IkReal(4.00000000000000))*(x83)))+(((IkReal(-0.575625000000000))*(r00))));
op[27]=((IkReal(-0.600000000000000))*(r00));
op[28]=((((IkReal(-1.00000000000000))*(x122)))+(x121)+(x233)+(((IkReal(-0.840150000000000))*(r00)))+(((IkReal(-1.00000000000000))*(x212))));
op[29]=((((IkReal(-1.00000000000000))*(x125)))+(x124)+(((IkReal(-1.00000000000000))*(x61))));
op[30]=((((IkReal(-1.00000000000000))*(x126)))+(x127)+(((IkReal(-1.00000000000000))*(x62))));
op[31]=((((IkReal(-1.00000000000000))*(x128)))+(x129)+(((IkReal(-1.00000000000000))*(x204)))+(((IkReal(-1.07539200000000))*(r00)))+(x230));
op[32]=((IkReal(-0.768000000000000))*(r00));
op[33]=((((IkReal(-0.736800000000000))*(r00)))+(((IkReal(5.12000000000000))*(x84)))+(((IkReal(-5.12000000000000))*(x83))));
op[34]=((((IkReal(-1.00000000000000))*(x127)))+(x126)+(((IkReal(-1.00000000000000))*(x62))));
op[35]=((((IkReal(-1.84339200000000))*(r00)))+(((IkReal(-1.00000000000000))*(x129)))+(x128)+(((IkReal(-1.00000000000000))*(x204)))+(x230));
op[36]=((x137)+(((IkReal(-1.00000000000000))*(x138)))+(((IkReal(-1.00000000000000))*(x67))));
op[37]=((x131)+(((IkReal(-1.00000000000000))*(x132)))+(x231)+(((IkReal(-1.00000000000000))*(x64)))+(((IkReal(-1.00000000000000))*(x211))));
op[38]=((x220)+(((IkReal(-1.00000000000000))*(x227))));
op[39]=x199;
op[40]=((x133)+(((IkReal(-1.00000000000000))*(x134)))+(x65));
op[41]=((x131)+(((IkReal(-1.00000000000000))*(x132)))+(((IkReal(-1.00000000000000))*(x231)))+(x211)+(x64));
op[42]=((x135)+(((IkReal(-1.00000000000000))*(x136)))+(x231)+(((IkReal(-1.00000000000000))*(x66)))+(((IkReal(-1.00000000000000))*(x211))));
op[43]=((x133)+(((IkReal(-1.00000000000000))*(x134)))+(((IkReal(-1.00000000000000))*(x65))));
op[44]=x199;
op[45]=((x227)+(((IkReal(-1.00000000000000))*(x220))));
op[46]=((x135)+(((IkReal(-1.00000000000000))*(x136)))+(((IkReal(-1.00000000000000))*(x231)))+(x211)+(x66));
op[47]=((x137)+(((IkReal(-1.00000000000000))*(x138)))+(x67));
op[48]=((((IkReal(-1.00000000000000))*(x140)))+(x139)+(((IkReal(-1.00000000000000))*(x208)))+(((IkReal(-1.00000000000000))*(x209)))+(x241));
op[49]=((((IkReal(-1.00000000000000))*(x141)))+(((IkReal(-1.00000000000000))*(x37)))+(x69));
op[50]=((((IkReal(-1.00000000000000))*(x145)))+(x142)+(x143)+(((IkReal(-1.00000000000000))*(x202))));
op[51]=((((IkReal(-1.00000000000000))*(x147)))+(((IkReal(-1.00000000000000))*(x71)))+(x146));
op[52]=((((IkReal(-1.00000000000000))*(x149)))+(x148)+(((IkReal(-1.00000000000000))*(x208)))+(x238)+(((IkReal(-1.00000000000000))*(x210))));
op[53]=((((IkReal(-1.00000000000000))*(x150)))+(((IkReal(-1.00000000000000))*(x37)))+(x73));
op[54]=((((IkReal(-1.00000000000000))*(x200)))+(x95));
op[55]=((((IkReal(-1.00000000000000))*(x152)))+(x151)+(x239)+(((IkReal(-1.00000000000000))*(x215)))+(((IkReal(-1.00000000000000))*(x213))));
op[56]=((((IkReal(-1.00000000000000))*(x154)))+(((IkReal(-1.00000000000000))*(x75)))+(x153));
op[57]=((((IkReal(-1.00000000000000))*(x158)))+(x156)+(x155)+(((IkReal(-1.00000000000000))*(x205))));
op[58]=((((IkReal(-1.00000000000000))*(x201)))+(x96));
op[59]=((((IkReal(-1.00000000000000))*(x160)))+(x159)+(x240)+(((IkReal(-1.00000000000000))*(x214)))+(((IkReal(-1.00000000000000))*(x213))));
op[60]=((((IkReal(-1.00000000000000))*(x119)))+(((IkReal(-1.00000000000000))*(x232)))+(x226)+(x207)+(x203));
op[61]=((((IkReal(-1.00000000000000))*(x104)))+(x166)+(x106)+(x197)+(((IkReal(-1.00000000000000))*(x234)))+(x54)+(((IkReal(-1.00000000000000))*(x225))));
op[62]=((x169)+(((IkReal(-1.00000000000000))*(x204)))+(x223)+(x230)+(((IkReal(-1.00000000000000))*(x53))));
op[63]=((x162)+(((IkReal(-1.00000000000000))*(x236)))+(x216)+(x78));
op[64]=((((IkReal(-1.00000000000000))*(x44)))+(((IkReal(-1.00000000000000))*(x49)))+(x168)+(x110)+(x224)+(x232)+(((IkReal(-1.00000000000000))*(x218))));
op[65]=((((IkReal(-1.00000000000000))*(x107)))+(((IkReal(-1.00000000000000))*(x104)))+(((IkReal(-1.00000000000000))*(x197)))+(x228)+(x237));
op[66]=((((IkReal(-1.00000000000000))*(x117)))+(x165)+(x118)+(((IkReal(-1.00000000000000))*(x234)))+(x219)+(((IkReal(-1.00000000000000))*(x225))));
op[67]=((x163)+(x110)+(x232)+(x49)+(((IkReal(-1.00000000000000))*(x218)))+(((IkReal(-1.00000000000000))*(x226))));
op[68]=((x162)+(((IkReal(-1.00000000000000))*(x236)))+(x216)+(x79));
op[69]=((x164)+(((IkReal(-1.00000000000000))*(x230)))+(x204)+(x53)+(((IkReal(-1.00000000000000))*(x223))));
op[70]=((((IkReal(-1.00000000000000))*(x117)))+(x167)+(x118)+(x225)+(x234)+(((IkReal(-1.00000000000000))*(x222))));
op[71]=((x120)+(((IkReal(-1.00000000000000))*(x206)))+(((IkReal(-1.00000000000000))*(x232)))+(x221)+(((IkReal(-1.00000000000000))*(x224))));
solvedialyticpoly8qep(op,zeror,numroots);
IkReal j1array[16], cj1array[16], sj1array[16], j2array[16], cj2array[16], sj2array[16], j3array[16], cj3array[16], sj3array[16];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ij1 += 3)
{
IkReal htj1 = zeror[ij1+0], htj2 = zeror[ij1+1], htj3 = zeror[ij1+2];
j1array[numsolutions]=((IkReal(2.00000000000000))*(atan(htj1)));
j2array[numsolutions]=((IkReal(2.00000000000000))*(atan(htj2)));
j3array[numsolutions]=((IkReal(2.00000000000000))*(atan(htj3)));
IkReal x242=(htj1)*(htj1);
IkReal x243=(htj2)*(htj2);
IkReal x244=(htj3)*(htj3);
cj1array[numsolutions]=((((IKabs(((IkReal(1.00000000000000))+(x242))) != 0)?((IkReal)1/(((IkReal(1.00000000000000))+(x242)))):(IkReal)1.0e30))*(((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(x242))))));
cj2array[numsolutions]=((((IKabs(((IkReal(1.00000000000000))+(x243))) != 0)?((IkReal)1/(((IkReal(1.00000000000000))+(x243)))):(IkReal)1.0e30))*(((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(x243))))));
cj3array[numsolutions]=((((IKabs(((IkReal(1.00000000000000))+(x244))) != 0)?((IkReal)1/(((IkReal(1.00000000000000))+(x244)))):(IkReal)1.0e30))*(((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(x244))))));
sj1array[numsolutions]=((IkReal(2.00000000000000))*(htj1)*(((IKabs(((IkReal(1.00000000000000))+((htj1)*(htj1)))) != 0)?((IkReal)1/(((IkReal(1.00000000000000))+((htj1)*(htj1))))):(IkReal)1.0e30)));
sj2array[numsolutions]=((IkReal(2.00000000000000))*(htj2)*(((IKabs(((IkReal(1.00000000000000))+((htj2)*(htj2)))) != 0)?((IkReal)1/(((IkReal(1.00000000000000))+((htj2)*(htj2))))):(IkReal)1.0e30)));
sj3array[numsolutions]=((IkReal(2.00000000000000))*(htj3)*(((IKabs(((IkReal(1.00000000000000))+((htj3)*(htj3)))) != 0)?((IkReal)1/(((IkReal(1.00000000000000))+((htj3)*(htj3))))):(IkReal)1.0e30)));
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
if( j2array[numsolutions] > IKPI )
{
    j2array[numsolutions]-=IK2PI;
}
else if( j2array[numsolutions] < -IKPI )
{
    j2array[numsolutions]+=IK2PI;
}
if( j3array[numsolutions] > IKPI )
{
    j3array[numsolutions]-=IK2PI;
}
else if( j3array[numsolutions] < -IKPI )
{
    j3array[numsolutions]+=IK2PI;
}
numsolutions++;
}
bool j1valid[16]={true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true};
_nj1 = 16;
_nj2 = 1;
_nj3 = 1;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
_ij2[0] = 0; _ij2[1] = -1;
_ij3[0] = 0; _ij3[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( !j1valid[iij1] ) { continue; }
if( IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(cj2array[ij1]-cj2array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij1]-sj2array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(cj3array[ij1]-cj3array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij1]-sj3array[iij1]) < IKFAST_SOLUTION_THRESH &&  1 )
{
    j1valid[iij1]=false; _ij1[1] = iij1; _ij2[1] = 0; _ij3[1] = 0;  break; 
}
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

    j2 = j2array[ij1]; cj2 = cj2array[ij1]; sj2 = sj2array[ij1];

    j3 = j3array[ij1]; cj3 = cj3array[ij1]; sj3 = sj3array[ij1];

{
IkReal dummyeval[1];
dummyeval[0]=(((sj3)*(sj3))+((cj3)*(cj3)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=(((sj3)*(sj3))+((cj3)*(cj3)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x245=(sj3)*(sj3);
IkReal x246=(cj3)*(cj3);
IkReal x247=((cj2)*(cj3));
IkReal x248=((sj2)*(sj3));
IkReal x249=((IkReal(0.150000000000000))*(pz));
IkReal x250=((cj3)*(sj2));
IkReal x251=((cj2)*(sj3));
IkReal x252=((IkReal(1.00000000000000))*(r01)*(sj1));
IkReal x253=((IkReal(1.00000000000000))*(cj1)*(r00));
IkReal x254=((IkReal(0.150000000000000))*(py)*(sj1));
IkReal x255=((IkReal(0.150000000000000))*(cj1)*(px));
IkReal x256=((IKabs(((x246)+(x245))) != 0)?((IkReal)1/(((x246)+(x245)))):(IkReal)1.0e30);
IkReal x257=((((IkReal(-1.00000000000000))*(x247)*(x253)))+(((IkReal(-1.00000000000000))*(x247)*(x252)))+(((IkReal(-1.00000000000000))*(r02)*(x251)))+(((IkReal(-1.00000000000000))*(x248)*(x253)))+(((IkReal(-1.00000000000000))*(x248)*(x252)))+(((r02)*(x250))));
if( IKabs(((IkReal(-1.00000000000000))*(x256)*(x257))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x256)*(((IKabs(((((IkReal(-0.0225000000000000))*(x245)))+(((IkReal(-0.0225000000000000))*(x246))))) != 0)?((IkReal)1/(((((IkReal(-0.0225000000000000))*(x245)))+(((IkReal(-0.0225000000000000))*(x246)))))):(IkReal)1.0e30))*(((((((((IkReal(-1.00000000000000))*(x246)))+(((IkReal(-1.00000000000000))*(x245)))))*(((((x248)*(x255)))+(((x248)*(x254)))+(((IkReal(-0.0921000000000000))*(sj3)))+(((x249)*(x251)))+(((IkReal(-1.00000000000000))*(x249)*(x250)))+(((IkReal(-0.0960000000000000))*(x245)))+(((IkReal(-0.0960000000000000))*(x246)))+(((IkReal(-0.0225000000000000))*(x248)))+(((IkReal(-0.0225000000000000))*(x247)))+(((x247)*(x255)))+(((x247)*(x254)))))))+(((x257)*(((((IkReal(-0.0195000000000000))*(x245)))+(((IkReal(-0.0195000000000000))*(x246))))))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.00000000000000))*(x256)*(x257)))+IKsqr(((x256)*(((IKabs(((((IkReal(-0.0225000000000000))*(x245)))+(((IkReal(-0.0225000000000000))*(x246))))) != 0)?((IkReal)1/(((((IkReal(-0.0225000000000000))*(x245)))+(((IkReal(-0.0225000000000000))*(x246)))))):(IkReal)1.0e30))*(((((((((IkReal(-1.00000000000000))*(x246)))+(((IkReal(-1.00000000000000))*(x245)))))*(((((x248)*(x255)))+(((x248)*(x254)))+(((IkReal(-0.0921000000000000))*(sj3)))+(((x249)*(x251)))+(((IkReal(-1.00000000000000))*(x249)*(x250)))+(((IkReal(-0.0960000000000000))*(x245)))+(((IkReal(-0.0960000000000000))*(x246)))+(((IkReal(-0.0225000000000000))*(x248)))+(((IkReal(-0.0225000000000000))*(x247)))+(((x247)*(x255)))+(((x247)*(x254)))))))+(((x257)*(((((IkReal(-0.0195000000000000))*(x245)))+(((IkReal(-0.0195000000000000))*(x246)))))))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((IkReal(-1.00000000000000))*(x256)*(x257)), ((x256)*(((IKabs(((((IkReal(-0.0225000000000000))*(x245)))+(((IkReal(-0.0225000000000000))*(x246))))) != 0)?((IkReal)1/(((((IkReal(-0.0225000000000000))*(x245)))+(((IkReal(-0.0225000000000000))*(x246)))))):(IkReal)1.0e30))*(((((((((IkReal(-1.00000000000000))*(x246)))+(((IkReal(-1.00000000000000))*(x245)))))*(((((x248)*(x255)))+(((x248)*(x254)))+(((IkReal(-0.0921000000000000))*(sj3)))+(((x249)*(x251)))+(((IkReal(-1.00000000000000))*(x249)*(x250)))+(((IkReal(-0.0960000000000000))*(x245)))+(((IkReal(-0.0960000000000000))*(x246)))+(((IkReal(-0.0225000000000000))*(x248)))+(((IkReal(-0.0225000000000000))*(x247)))+(((x247)*(x255)))+(((x247)*(x254)))))))+(((x257)*(((((IkReal(-0.0195000000000000))*(x245)))+(((IkReal(-0.0195000000000000))*(x246)))))))))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[3];
IkReal x258=(cj3)*(cj3);
IkReal x259=(sj3)*(sj3);
IkReal x260=IKsin(j5);
IkReal x261=IKcos(j5);
IkReal x262=((IkReal(1.00000000000000))*(r01));
IkReal x263=((sj2)*(sj3));
IkReal x264=((IkReal(0.130000000000000))*(py));
IkReal x265=((IkReal(0.150000000000000))*(py));
IkReal x266=((cj2)*(cj3));
IkReal x267=((IkReal(0.150000000000000))*(pz));
IkReal x268=((cj3)*(sj2));
IkReal x269=((cj2)*(sj3));
IkReal x270=((IkReal(0.130000000000000))*(pz));
IkReal x271=((sj1)*(x266));
IkReal x272=((IkReal(1.00000000000000))*(cj1)*(r00));
IkReal x273=((IkReal(0.150000000000000))*(cj1)*(px));
IkReal x274=((IkReal(0.130000000000000))*(cj1)*(px));
IkReal x275=((((IkReal(0.0195000000000000))*(x259)))+(((IkReal(0.0195000000000000))*(x258))));
evalcond[0]=((((x260)*(((x258)+(x259)))))+(((IkReal(-1.00000000000000))*(x263)*(x272)))+(((IkReal(-1.00000000000000))*(x262)*(x271)))+(((r02)*(x268)))+(((IkReal(-1.00000000000000))*(sj1)*(x262)*(x263)))+(((IkReal(-1.00000000000000))*(x266)*(x272)))+(((IkReal(-1.00000000000000))*(r02)*(x269))));
evalcond[1]=((((IkReal(0.0798200000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(x263)*(x274)))+(((IkReal(0.0195000000000000))*(x266)))+(((IkReal(0.0195000000000000))*(x263)))+(((IkReal(-1.00000000000000))*(x269)*(x270)))+(((IkReal(0.0832000000000000))*(x259)))+(((IkReal(0.0832000000000000))*(x258)))+(((x260)*(((((IkReal(0.0169000000000000))*(x258)))+(((IkReal(0.0169000000000000))*(x259)))))))+(((IkReal(-1.00000000000000))*(sj1)*(x263)*(x264)))+(((IkReal(-1.00000000000000))*(x266)*(x274)))+(((x261)*(x275)))+(((IkReal(-1.00000000000000))*(x264)*(x271)))+(((x268)*(x270))));
evalcond[2]=((((x267)*(x269)))+(((IkReal(-0.0960000000000000))*(x259)))+(((IkReal(-0.0960000000000000))*(x258)))+(((IkReal(-0.0921000000000000))*(sj3)))+(((x266)*(x273)))+(((sj1)*(x263)*(x265)))+(((x263)*(x273)))+(((x261)*(((((IkReal(-0.0225000000000000))*(x259)))+(((IkReal(-0.0225000000000000))*(x258)))))))+(((IkReal(-1.00000000000000))*(x267)*(x268)))+(((x265)*(x271)))+(((IkReal(-0.0225000000000000))*(x263)))+(((IkReal(-0.0225000000000000))*(x266)))+(((IkReal(-1.00000000000000))*(x260)*(x275))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[2];
dummyeval[0]=cj5;
dummyeval[1]=sj3;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=cj5;
dummyeval[1]=cj3;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[3];
dummyeval[0]=((((IkReal(1.15384615384615))*(sj5)))+(((IkReal(-1.00000000000000))*(cj5))));
dummyeval[1]=cj5;
dummyeval[2]=sj3;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  || IKabs(dummyeval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(2.42750195497764))+(j5)), IkReal(6.28318530717959))));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=sj3;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=sj3;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=cj3;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[3];
IkReal x276=((IkReal(1.00000000000000))*(cj2));
IkReal x277=((IkReal(1.00000000000000))*(sj2));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j3)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.654930538460049))+(((IkReal(-1.00000000000000))*(r01)*(sj1)*(x277)))+(((IkReal(-1.00000000000000))*(r02)*(x276)))+(((IkReal(-1.00000000000000))*(cj1)*(r00)*(x277))));
evalcond[2]=((IkReal(1.45249433236848))+(((IkReal(-1.00000000000000))*(pz)*(x276)))+(((IkReal(0.150000000000000))*(sj2)))+(((IkReal(-1.00000000000000))*(py)*(sj1)*(x277)))+(((IkReal(-1.00000000000000))*(cj1)*(px)*(x277))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x278=((IkReal(1.32329555000000))*(cj1));
IkReal x279=((IkReal(1.32329555000000))*(sj1));
if( IKabs(((((IkReal(-1.00000000000000))*(r01)*(x278)))+(((r00)*(x279))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((cj2)*(r00)*(x278)))+(((cj2)*(r01)*(x279)))+(((IkReal(-1.32329555000000))*(r02)*(sj2))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(r01)*(x278)))+(((r00)*(x279)))))+IKsqr(((((cj2)*(r00)*(x278)))+(((cj2)*(r01)*(x279)))+(((IkReal(-1.32329555000000))*(r02)*(sj2)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((IkReal(-1.00000000000000))*(r01)*(x278)))+(((r00)*(x279)))), ((((cj2)*(r00)*(x278)))+(((cj2)*(r01)*(x279)))+(((IkReal(-1.32329555000000))*(r02)*(sj2)))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x280=IKsin(j4);
IkReal x281=IKcos(j4);
IkReal x282=((cj1)*(cj2));
IkReal x283=((IkReal(1.00000000000000))*(cj1));
IkReal x284=((cj2)*(sj1));
IkReal x285=((IkReal(1.00000000000000))*(sj2));
evalcond[0]=((((IkReal(-0.755689082457808))*(x280)))+(((r00)*(sj1)))+(((IkReal(-1.00000000000000))*(r01)*(x283))));
evalcond[1]=((((IkReal(4.94923857682473e-11))*(x280)))+(((IkReal(-1.00000000000000))*(py)*(x283)))+(((px)*(sj1))));
evalcond[2]=((((IkReal(-0.755689082457808))*(x281)))+(((IkReal(-1.00000000000000))*(r02)*(x285)))+(((r01)*(x284)))+(((r00)*(x282))));
evalcond[3]=((IkReal(0.200000000000000))+(((IkReal(-0.150000000000000))*(cj2)))+(((IkReal(4.94923857682473e-11))*(x281)))+(((IkReal(-1.00000000000000))*(pz)*(x285)))+(((py)*(x284)))+(((px)*(x282))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x286=((IkReal(1.00000000000000))*(cj2));
IkReal x287=((IkReal(1.00000000000000))*(sj2));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j3)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-0.654930538460049))+(((IkReal(-1.00000000000000))*(r02)*(x286)))+(((IkReal(-1.00000000000000))*(r01)*(sj1)*(x287)))+(((IkReal(-1.00000000000000))*(cj1)*(r00)*(x287))));
evalcond[2]=((IkReal(-0.224494332368478))+(((IkReal(-1.00000000000000))*(pz)*(x286)))+(((IkReal(-1.00000000000000))*(cj1)*(px)*(x287)))+(((IkReal(0.150000000000000))*(sj2)))+(((IkReal(-1.00000000000000))*(py)*(sj1)*(x287))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x288=((IkReal(1.32329555000000))*(cj1));
IkReal x289=((IkReal(1.32329555000000))*(sj1));
if( IKabs(((((r00)*(x289)))+(((IkReal(-1.00000000000000))*(r01)*(x288))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(cj2)*(r00)*(x288)))+(((IkReal(1.32329555000000))*(r02)*(sj2)))+(((IkReal(-1.00000000000000))*(cj2)*(r01)*(x289))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((r00)*(x289)))+(((IkReal(-1.00000000000000))*(r01)*(x288)))))+IKsqr(((((IkReal(-1.00000000000000))*(cj2)*(r00)*(x288)))+(((IkReal(1.32329555000000))*(r02)*(sj2)))+(((IkReal(-1.00000000000000))*(cj2)*(r01)*(x289)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((r00)*(x289)))+(((IkReal(-1.00000000000000))*(r01)*(x288)))), ((((IkReal(-1.00000000000000))*(cj2)*(r00)*(x288)))+(((IkReal(1.32329555000000))*(r02)*(sj2)))+(((IkReal(-1.00000000000000))*(cj2)*(r01)*(x289)))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x290=IKsin(j4);
IkReal x291=IKcos(j4);
IkReal x292=((cj1)*(cj2));
IkReal x293=((IkReal(1.00000000000000))*(cj1));
IkReal x294=((cj2)*(sj1));
IkReal x295=((IkReal(1.00000000000000))*(sj2));
evalcond[0]=((((r00)*(sj1)))+(((IkReal(-0.755689082457808))*(x290)))+(((IkReal(-1.00000000000000))*(r01)*(x293))));
evalcond[1]=((((IkReal(-1.00000000000000))*(py)*(x293)))+(((IkReal(4.94923857682473e-11))*(x290)))+(((px)*(sj1))));
evalcond[2]=((((IkReal(0.755689082457808))*(x291)))+(((IkReal(-1.00000000000000))*(r02)*(x295)))+(((r01)*(x294)))+(((r00)*(x292))));
evalcond[3]=((IkReal(-0.200000000000000))+(((IkReal(-0.150000000000000))*(cj2)))+(((IkReal(-1.00000000000000))*(pz)*(x295)))+(((IkReal(-4.94923857682473e-11))*(x291)))+(((py)*(x294)))+(((px)*(x292))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x296=((cj1)*(cj2));
IkReal x297=((IkReal(1.00000000000000))*(sj2));
IkReal x298=((cj2)*(sj1));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j3)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-0.654930538460049))+(((IkReal(-1.00000000000000))*(r02)*(x297)))+(((r01)*(x298)))+(((r00)*(x296))));
evalcond[2]=((IkReal(-0.838494332368478))+(((IkReal(-0.150000000000000))*(cj2)))+(((IkReal(-1.00000000000000))*(pz)*(x297)))+(((py)*(x298)))+(((px)*(x296))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x299=((IkReal(1.32329555000000))*(cj1));
IkReal x300=((IkReal(1.32329555000000))*(sj1));
if( IKabs(((((r00)*(x300)))+(((IkReal(-1.00000000000000))*(r01)*(x299))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(r01)*(sj2)*(x300)))+(((IkReal(-1.32329555000000))*(cj2)*(r02)))+(((IkReal(-1.00000000000000))*(r00)*(sj2)*(x299))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((r00)*(x300)))+(((IkReal(-1.00000000000000))*(r01)*(x299)))))+IKsqr(((((IkReal(-1.00000000000000))*(r01)*(sj2)*(x300)))+(((IkReal(-1.32329555000000))*(cj2)*(r02)))+(((IkReal(-1.00000000000000))*(r00)*(sj2)*(x299)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((r00)*(x300)))+(((IkReal(-1.00000000000000))*(r01)*(x299)))), ((((IkReal(-1.00000000000000))*(r01)*(sj2)*(x300)))+(((IkReal(-1.32329555000000))*(cj2)*(r02)))+(((IkReal(-1.00000000000000))*(r00)*(sj2)*(x299)))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x301=IKsin(j4);
IkReal x302=IKcos(j4);
IkReal x303=((IkReal(1.00000000000000))*(cj1));
IkReal x304=((IkReal(1.00000000000000))*(cj2));
IkReal x305=((IkReal(1.00000000000000))*(sj1)*(sj2));
evalcond[0]=((((IkReal(-0.755689082457808))*(x301)))+(((r00)*(sj1)))+(((IkReal(-1.00000000000000))*(r01)*(x303))));
evalcond[1]=((((IkReal(-1.00000000000000))*(py)*(x303)))+(((px)*(sj1)))+(((IkReal(4.94923857682473e-11))*(x301))));
evalcond[2]=((((IkReal(-0.755689082457808))*(x302)))+(((IkReal(-1.00000000000000))*(r01)*(x305)))+(((IkReal(-1.00000000000000))*(r02)*(x304)))+(((IkReal(-1.00000000000000))*(r00)*(sj2)*(x303))));
evalcond[3]=((IkReal(0.814000000000000))+(((IkReal(-1.00000000000000))*(px)*(sj2)*(x303)))+(((IkReal(-1.00000000000000))*(py)*(x305)))+(((IkReal(-1.00000000000000))*(pz)*(x304)))+(((IkReal(0.150000000000000))*(sj2)))+(((IkReal(4.94923857682473e-11))*(x302))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x306=((cj1)*(cj2));
IkReal x307=((IkReal(1.00000000000000))*(sj2));
IkReal x308=((cj2)*(sj1));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j3)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.654930538460049))+(((IkReal(-1.00000000000000))*(r02)*(x307)))+(((r01)*(x308)))+(((r00)*(x306))));
evalcond[2]=((IkReal(0.838494332368478))+(((IkReal(-0.150000000000000))*(cj2)))+(((px)*(x306)))+(((IkReal(-1.00000000000000))*(pz)*(x307)))+(((py)*(x308))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x309=((IkReal(1.32329555000000))*(cj1));
IkReal x310=((IkReal(1.32329555000000))*(sj1));
if( IKabs(((((IkReal(-1.00000000000000))*(r01)*(x309)))+(((r00)*(x310))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(1.32329555000000))*(cj2)*(r02)))+(((r00)*(sj2)*(x309)))+(((r01)*(sj2)*(x310))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(r01)*(x309)))+(((r00)*(x310)))))+IKsqr(((((IkReal(1.32329555000000))*(cj2)*(r02)))+(((r00)*(sj2)*(x309)))+(((r01)*(sj2)*(x310)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((IkReal(-1.00000000000000))*(r01)*(x309)))+(((r00)*(x310)))), ((((IkReal(1.32329555000000))*(cj2)*(r02)))+(((r00)*(sj2)*(x309)))+(((r01)*(sj2)*(x310)))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x311=IKsin(j4);
IkReal x312=IKcos(j4);
IkReal x313=((IkReal(1.00000000000000))*(cj1));
IkReal x314=((IkReal(1.00000000000000))*(cj2));
IkReal x315=((IkReal(1.00000000000000))*(sj1)*(sj2));
evalcond[0]=((((r00)*(sj1)))+(((IkReal(-1.00000000000000))*(r01)*(x313)))+(((IkReal(-0.755689082457808))*(x311))));
evalcond[1]=((((IkReal(4.94923857682473e-11))*(x311)))+(((IkReal(-1.00000000000000))*(py)*(x313)))+(((px)*(sj1))));
evalcond[2]=((((IkReal(-1.00000000000000))*(r02)*(x314)))+(((IkReal(-1.00000000000000))*(r01)*(x315)))+(((IkReal(-1.00000000000000))*(r00)*(sj2)*(x313)))+(((IkReal(0.755689082457808))*(x312))));
evalcond[3]=((IkReal(0.414000000000000))+(((IkReal(-4.94923857682473e-11))*(x312)))+(((IkReal(-1.00000000000000))*(py)*(x315)))+(((IkReal(-1.00000000000000))*(pz)*(x314)))+(((IkReal(-1.00000000000000))*(px)*(sj2)*(x313)))+(((IkReal(0.150000000000000))*(sj2))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x316=((IkReal(26465911.0000000))*(sj2));
if( IKabs(((((IkReal(1.32329555000000))*(r00)*(sj1)))+(((IkReal(-1.32329555000000))*(cj1)*(r01))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(5.00000000000000e-8))*(((IKabs(cj3) != 0)?((IkReal)1/(cj3)):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(cj1)*(r00)*(x316)))+(((IkReal(17333333.3420657))*(sj3)))+(((IkReal(-1.00000000000000))*(r01)*(sj1)*(x316)))+(((IkReal(-26465911.0000000))*(cj2)*(r02))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(1.32329555000000))*(r00)*(sj1)))+(((IkReal(-1.32329555000000))*(cj1)*(r01)))))+IKsqr(((IkReal(5.00000000000000e-8))*(((IKabs(cj3) != 0)?((IkReal)1/(cj3)):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(cj1)*(r00)*(x316)))+(((IkReal(17333333.3420657))*(sj3)))+(((IkReal(-1.00000000000000))*(r01)*(sj1)*(x316)))+(((IkReal(-26465911.0000000))*(cj2)*(r02)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((IkReal(1.32329555000000))*(r00)*(sj1)))+(((IkReal(-1.32329555000000))*(cj1)*(r01)))), ((IkReal(5.00000000000000e-8))*(((IKabs(cj3) != 0)?((IkReal)1/(cj3)):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(cj1)*(r00)*(x316)))+(((IkReal(17333333.3420657))*(sj3)))+(((IkReal(-1.00000000000000))*(r01)*(sj1)*(x316)))+(((IkReal(-26465911.0000000))*(cj2)*(r02)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x317=IKsin(j4);
IkReal x318=IKcos(j4);
IkReal x319=((cj1)*(cj2));
IkReal x320=((IkReal(1.00000000000000))*(cj2));
IkReal x321=((py)*(sj1));
IkReal x322=((IkReal(1.00000000000000))*(sj2));
IkReal x323=((IkReal(1.00000000000000))*(cj1));
IkReal x324=((r01)*(sj1));
IkReal x325=((IkReal(4.94923857682473e-11))*(x318));
IkReal x326=((IkReal(0.755689082457808))*(x318));
evalcond[0]=((((r00)*(sj1)))+(((IkReal(-1.00000000000000))*(r01)*(x323)))+(((IkReal(-0.755689082457808))*(x317))));
evalcond[1]=((((IkReal(4.94923857682473e-11))*(x317)))+(((px)*(sj1)))+(((IkReal(-1.00000000000000))*(py)*(x323))));
evalcond[2]=((((cj2)*(x324)))+(((r00)*(x319)))+(((IkReal(-1.00000000000000))*(r02)*(x322)))+(((IkReal(-0.654930538460049))*(cj3)))+(((IkReal(-1.00000000000000))*(sj3)*(x326))));
evalcond[3]=((((IkReal(0.654930538460049))*(sj3)))+(((IkReal(-1.00000000000000))*(cj1)*(r00)*(x322)))+(((IkReal(-1.00000000000000))*(cj3)*(x326)))+(((IkReal(-1.00000000000000))*(x322)*(x324)))+(((IkReal(-1.00000000000000))*(r02)*(x320))));
evalcond[4]=((((cj2)*(x321)))+(((IkReal(-0.150000000000000))*(cj2)))+(((IkReal(-0.838494332368478))*(cj3)))+(((sj3)*(x325)))+(((px)*(x319)))+(((IkReal(-1.00000000000000))*(pz)*(x322)))+(((IkReal(0.200000000000000))*(sj3))));
evalcond[5]=((IkReal(0.614000000000000))+(((IkReal(0.838494332368478))*(sj3)))+(((IkReal(-1.00000000000000))*(x321)*(x322)))+(((IkReal(0.200000000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(pz)*(x320)))+(((cj3)*(x325)))+(((IkReal(0.150000000000000))*(sj2)))+(((IkReal(-1.00000000000000))*(cj1)*(px)*(x322))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x327=((IkReal(26465911.0000000))*(cj2));
if( IKabs(((((IkReal(20205128212.7031))*(cj1)*(py)))+(((IkReal(-20205128212.7031))*(px)*(sj1))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(5.00000000000000e-8))*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((IkReal(-17333333.3420657))*(cj3)))+(((r01)*(sj1)*(x327)))+(((IkReal(-26465911.0000000))*(r02)*(sj2)))+(((cj1)*(r00)*(x327))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(20205128212.7031))*(cj1)*(py)))+(((IkReal(-20205128212.7031))*(px)*(sj1)))))+IKsqr(((IkReal(5.00000000000000e-8))*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((IkReal(-17333333.3420657))*(cj3)))+(((r01)*(sj1)*(x327)))+(((IkReal(-26465911.0000000))*(r02)*(sj2)))+(((cj1)*(r00)*(x327)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((IkReal(20205128212.7031))*(cj1)*(py)))+(((IkReal(-20205128212.7031))*(px)*(sj1)))), ((IkReal(5.00000000000000e-8))*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((IkReal(-17333333.3420657))*(cj3)))+(((r01)*(sj1)*(x327)))+(((IkReal(-26465911.0000000))*(r02)*(sj2)))+(((cj1)*(r00)*(x327)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x328=IKsin(j4);
IkReal x329=IKcos(j4);
IkReal x330=((cj1)*(cj2));
IkReal x331=((IkReal(1.00000000000000))*(cj2));
IkReal x332=((py)*(sj1));
IkReal x333=((IkReal(1.00000000000000))*(sj2));
IkReal x334=((IkReal(1.00000000000000))*(cj1));
IkReal x335=((r01)*(sj1));
IkReal x336=((IkReal(4.94923857682473e-11))*(x329));
IkReal x337=((IkReal(0.755689082457808))*(x329));
evalcond[0]=((((r00)*(sj1)))+(((IkReal(-1.00000000000000))*(r01)*(x334)))+(((IkReal(-0.755689082457808))*(x328))));
evalcond[1]=((((IkReal(4.94923857682473e-11))*(x328)))+(((IkReal(-1.00000000000000))*(py)*(x334)))+(((px)*(sj1))));
evalcond[2]=((((IkReal(-1.00000000000000))*(sj3)*(x337)))+(((r00)*(x330)))+(((cj2)*(x335)))+(((IkReal(-1.00000000000000))*(r02)*(x333)))+(((IkReal(-0.654930538460049))*(cj3))));
evalcond[3]=((((IkReal(0.654930538460049))*(sj3)))+(((IkReal(-1.00000000000000))*(x333)*(x335)))+(((IkReal(-1.00000000000000))*(r02)*(x331)))+(((IkReal(-1.00000000000000))*(cj1)*(r00)*(x333)))+(((IkReal(-1.00000000000000))*(cj3)*(x337))));
evalcond[4]=((((IkReal(-0.150000000000000))*(cj2)))+(((sj3)*(x336)))+(((px)*(x330)))+(((cj2)*(x332)))+(((IkReal(-0.838494332368478))*(cj3)))+(((IkReal(-1.00000000000000))*(pz)*(x333)))+(((IkReal(0.200000000000000))*(sj3))));
evalcond[5]=((IkReal(0.614000000000000))+(((IkReal(0.838494332368478))*(sj3)))+(((IkReal(0.200000000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(cj1)*(px)*(x333)))+(((cj3)*(x336)))+(((IkReal(-1.00000000000000))*(pz)*(x331)))+(((IkReal(-1.00000000000000))*(x332)*(x333)))+(((IkReal(0.150000000000000))*(sj2))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x338=((IkReal(26465911.0000000))*(cj2));
if( IKabs(((((IkReal(1.32329555000000))*(r00)*(sj1)))+(((IkReal(-1.32329555000000))*(cj1)*(r01))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(5.00000000000000e-8))*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((IkReal(-17333333.3420657))*(cj3)))+(((IkReal(-26465911.0000000))*(r02)*(sj2)))+(((r01)*(sj1)*(x338)))+(((cj1)*(r00)*(x338))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(1.32329555000000))*(r00)*(sj1)))+(((IkReal(-1.32329555000000))*(cj1)*(r01)))))+IKsqr(((IkReal(5.00000000000000e-8))*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((IkReal(-17333333.3420657))*(cj3)))+(((IkReal(-26465911.0000000))*(r02)*(sj2)))+(((r01)*(sj1)*(x338)))+(((cj1)*(r00)*(x338)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((IkReal(1.32329555000000))*(r00)*(sj1)))+(((IkReal(-1.32329555000000))*(cj1)*(r01)))), ((IkReal(5.00000000000000e-8))*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((IkReal(-17333333.3420657))*(cj3)))+(((IkReal(-26465911.0000000))*(r02)*(sj2)))+(((r01)*(sj1)*(x338)))+(((cj1)*(r00)*(x338)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x339=IKsin(j4);
IkReal x340=IKcos(j4);
IkReal x341=((cj1)*(cj2));
IkReal x342=((IkReal(1.00000000000000))*(cj2));
IkReal x343=((py)*(sj1));
IkReal x344=((IkReal(1.00000000000000))*(sj2));
IkReal x345=((IkReal(1.00000000000000))*(cj1));
IkReal x346=((r01)*(sj1));
IkReal x347=((IkReal(4.94923857682473e-11))*(x340));
IkReal x348=((IkReal(0.755689082457808))*(x340));
evalcond[0]=((((r00)*(sj1)))+(((IkReal(-0.755689082457808))*(x339)))+(((IkReal(-1.00000000000000))*(r01)*(x345))));
evalcond[1]=((((IkReal(4.94923857682473e-11))*(x339)))+(((px)*(sj1)))+(((IkReal(-1.00000000000000))*(py)*(x345))));
evalcond[2]=((((IkReal(-1.00000000000000))*(r02)*(x344)))+(((r00)*(x341)))+(((cj2)*(x346)))+(((IkReal(-0.654930538460049))*(cj3)))+(((IkReal(-1.00000000000000))*(sj3)*(x348))));
evalcond[3]=((((IkReal(-1.00000000000000))*(cj3)*(x348)))+(((IkReal(0.654930538460049))*(sj3)))+(((IkReal(-1.00000000000000))*(r02)*(x342)))+(((IkReal(-1.00000000000000))*(cj1)*(r00)*(x344)))+(((IkReal(-1.00000000000000))*(x344)*(x346))));
evalcond[4]=((((IkReal(-0.150000000000000))*(cj2)))+(((sj3)*(x347)))+(((IkReal(-0.838494332368478))*(cj3)))+(((IkReal(0.200000000000000))*(sj3)))+(((cj2)*(x343)))+(((IkReal(-1.00000000000000))*(pz)*(x344)))+(((px)*(x341))));
evalcond[5]=((IkReal(0.614000000000000))+(((IkReal(0.838494332368478))*(sj3)))+(((IkReal(0.200000000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(cj1)*(px)*(x344)))+(((IkReal(-1.00000000000000))*(x343)*(x344)))+(((IkReal(0.150000000000000))*(sj2)))+(((IkReal(-1.00000000000000))*(pz)*(x342)))+(((cj3)*(x347))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(-0.714090698612158))+(j5)), IkReal(6.28318530717959))));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=sj3;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=sj3;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=cj3;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[3];
IkReal x349=((IkReal(1.00000000000000))*(cj2));
IkReal x350=((IkReal(1.00000000000000))*(sj2));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j3)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-0.654930538460049))+(((IkReal(-1.00000000000000))*(r02)*(x349)))+(((IkReal(-1.00000000000000))*(r01)*(sj1)*(x350)))+(((IkReal(-1.00000000000000))*(cj1)*(r00)*(x350))));
evalcond[2]=((IkReal(1.05550566763152))+(((IkReal(-1.00000000000000))*(cj1)*(px)*(x350)))+(((IkReal(-1.00000000000000))*(py)*(sj1)*(x350)))+(((IkReal(0.150000000000000))*(sj2)))+(((IkReal(-1.00000000000000))*(pz)*(x349))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x351=((IkReal(1.32329555000000))*(cj1));
IkReal x352=((IkReal(1.32329555000000))*(sj1));
if( IKabs(((((r01)*(x351)))+(((IkReal(-1.00000000000000))*(r00)*(x352))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(cj2)*(r01)*(x352)))+(((IkReal(-1.00000000000000))*(cj2)*(r00)*(x351)))+(((IkReal(1.32329555000000))*(r02)*(sj2))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((r01)*(x351)))+(((IkReal(-1.00000000000000))*(r00)*(x352)))))+IKsqr(((((IkReal(-1.00000000000000))*(cj2)*(r01)*(x352)))+(((IkReal(-1.00000000000000))*(cj2)*(r00)*(x351)))+(((IkReal(1.32329555000000))*(r02)*(sj2)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((r01)*(x351)))+(((IkReal(-1.00000000000000))*(r00)*(x352)))), ((((IkReal(-1.00000000000000))*(cj2)*(r01)*(x352)))+(((IkReal(-1.00000000000000))*(cj2)*(r00)*(x351)))+(((IkReal(1.32329555000000))*(r02)*(sj2)))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x353=IKsin(j4);
IkReal x354=IKcos(j4);
IkReal x355=((cj1)*(cj2));
IkReal x356=((IkReal(1.00000000000000))*(cj1));
IkReal x357=((cj2)*(sj1));
IkReal x358=((IkReal(1.00000000000000))*(sj2));
evalcond[0]=((((r00)*(sj1)))+(((IkReal(0.755689082457808))*(x353)))+(((IkReal(-1.00000000000000))*(r01)*(x356))));
evalcond[1]=((((IkReal(-4.94923857682473e-11))*(x353)))+(((px)*(sj1)))+(((IkReal(-1.00000000000000))*(py)*(x356))));
evalcond[2]=((((r01)*(x357)))+(((r00)*(x355)))+(((IkReal(0.755689082457808))*(x354)))+(((IkReal(-1.00000000000000))*(r02)*(x358))));
evalcond[3]=((IkReal(0.200000000000000))+(((px)*(x355)))+(((IkReal(-0.150000000000000))*(cj2)))+(((IkReal(-4.94923857682473e-11))*(x354)))+(((py)*(x357)))+(((IkReal(-1.00000000000000))*(pz)*(x358))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x359=((IkReal(1.00000000000000))*(cj2));
IkReal x360=((IkReal(1.00000000000000))*(sj2));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j3)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.654930538460049))+(((IkReal(-1.00000000000000))*(r01)*(sj1)*(x360)))+(((IkReal(-1.00000000000000))*(cj1)*(r00)*(x360)))+(((IkReal(-1.00000000000000))*(r02)*(x359))));
evalcond[2]=((IkReal(0.172494332368478))+(((IkReal(-1.00000000000000))*(py)*(sj1)*(x360)))+(((IkReal(-1.00000000000000))*(cj1)*(px)*(x360)))+(((IkReal(0.150000000000000))*(sj2)))+(((IkReal(-1.00000000000000))*(pz)*(x359))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x361=((IkReal(1.32329555000000))*(cj1));
IkReal x362=((IkReal(1.32329555000000))*(sj1));
if( IKabs(((((r01)*(x361)))+(((IkReal(-1.00000000000000))*(r00)*(x362))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((cj2)*(r00)*(x361)))+(((cj2)*(r01)*(x362)))+(((IkReal(-1.32329555000000))*(r02)*(sj2))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((r01)*(x361)))+(((IkReal(-1.00000000000000))*(r00)*(x362)))))+IKsqr(((((cj2)*(r00)*(x361)))+(((cj2)*(r01)*(x362)))+(((IkReal(-1.32329555000000))*(r02)*(sj2)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((r01)*(x361)))+(((IkReal(-1.00000000000000))*(r00)*(x362)))), ((((cj2)*(r00)*(x361)))+(((cj2)*(r01)*(x362)))+(((IkReal(-1.32329555000000))*(r02)*(sj2)))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x363=IKsin(j4);
IkReal x364=IKcos(j4);
IkReal x365=((cj1)*(cj2));
IkReal x366=((IkReal(1.00000000000000))*(cj1));
IkReal x367=((cj2)*(sj1));
IkReal x368=((IkReal(1.00000000000000))*(sj2));
evalcond[0]=((((r00)*(sj1)))+(((IkReal(-1.00000000000000))*(r01)*(x366)))+(((IkReal(0.755689082457808))*(x363))));
evalcond[1]=((((IkReal(-1.00000000000000))*(py)*(x366)))+(((px)*(sj1)))+(((IkReal(-4.94923857682473e-11))*(x363))));
evalcond[2]=((((r01)*(x367)))+(((IkReal(-1.00000000000000))*(r02)*(x368)))+(((r00)*(x365)))+(((IkReal(-0.755689082457808))*(x364))));
evalcond[3]=((IkReal(-0.200000000000000))+(((IkReal(-0.150000000000000))*(cj2)))+(((py)*(x367)))+(((px)*(x365)))+(((IkReal(4.94923857682473e-11))*(x364)))+(((IkReal(-1.00000000000000))*(pz)*(x368))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x369=((cj1)*(cj2));
IkReal x370=((IkReal(1.00000000000000))*(sj2));
IkReal x371=((cj2)*(sj1));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j3)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.654930538460049))+(((r01)*(x371)))+(((IkReal(-1.00000000000000))*(r02)*(x370)))+(((r00)*(x369))));
evalcond[2]=((IkReal(-0.441505667631522))+(((IkReal(-0.150000000000000))*(cj2)))+(((px)*(x369)))+(((py)*(x371)))+(((IkReal(-1.00000000000000))*(pz)*(x370))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x372=((IkReal(1.32329555000000))*(cj1));
IkReal x373=((IkReal(1.32329555000000))*(sj1));
if( IKabs(((((IkReal(-1.00000000000000))*(r00)*(x373)))+(((r01)*(x372))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((r00)*(sj2)*(x372)))+(((IkReal(1.32329555000000))*(cj2)*(r02)))+(((r01)*(sj2)*(x373))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(r00)*(x373)))+(((r01)*(x372)))))+IKsqr(((((r00)*(sj2)*(x372)))+(((IkReal(1.32329555000000))*(cj2)*(r02)))+(((r01)*(sj2)*(x373)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((IkReal(-1.00000000000000))*(r00)*(x373)))+(((r01)*(x372)))), ((((r00)*(sj2)*(x372)))+(((IkReal(1.32329555000000))*(cj2)*(r02)))+(((r01)*(sj2)*(x373)))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x374=IKsin(j4);
IkReal x375=IKcos(j4);
IkReal x376=((IkReal(1.00000000000000))*(cj1));
IkReal x377=((IkReal(1.00000000000000))*(cj2));
IkReal x378=((IkReal(1.00000000000000))*(sj1)*(sj2));
evalcond[0]=((((r00)*(sj1)))+(((IkReal(-1.00000000000000))*(r01)*(x376)))+(((IkReal(0.755689082457808))*(x374))));
evalcond[1]=((((px)*(sj1)))+(((IkReal(-1.00000000000000))*(py)*(x376)))+(((IkReal(-4.94923857682473e-11))*(x374))));
evalcond[2]=((((IkReal(-1.00000000000000))*(r00)*(sj2)*(x376)))+(((IkReal(-1.00000000000000))*(r02)*(x377)))+(((IkReal(-1.00000000000000))*(r01)*(x378)))+(((IkReal(0.755689082457808))*(x375))));
evalcond[3]=((IkReal(0.814000000000000))+(((IkReal(-1.00000000000000))*(pz)*(x377)))+(((IkReal(-1.00000000000000))*(py)*(x378)))+(((IkReal(-1.00000000000000))*(px)*(sj2)*(x376)))+(((IkReal(-4.94923857682473e-11))*(x375)))+(((IkReal(0.150000000000000))*(sj2))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x379=((cj1)*(cj2));
IkReal x380=((IkReal(1.00000000000000))*(sj2));
IkReal x381=((cj2)*(sj1));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j3)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-0.654930538460049))+(((r00)*(x379)))+(((IkReal(-1.00000000000000))*(r02)*(x380)))+(((r01)*(x381))));
evalcond[2]=((IkReal(0.441505667631522))+(((IkReal(-0.150000000000000))*(cj2)))+(((px)*(x379)))+(((py)*(x381)))+(((IkReal(-1.00000000000000))*(pz)*(x380))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x382=((IkReal(1.32329555000000))*(cj1));
IkReal x383=((IkReal(1.32329555000000))*(sj1));
if( IKabs(((((IkReal(-1.00000000000000))*(r00)*(x383)))+(((r01)*(x382))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(r00)*(sj2)*(x382)))+(((IkReal(-1.00000000000000))*(r01)*(sj2)*(x383)))+(((IkReal(-1.32329555000000))*(cj2)*(r02))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(r00)*(x383)))+(((r01)*(x382)))))+IKsqr(((((IkReal(-1.00000000000000))*(r00)*(sj2)*(x382)))+(((IkReal(-1.00000000000000))*(r01)*(sj2)*(x383)))+(((IkReal(-1.32329555000000))*(cj2)*(r02)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((IkReal(-1.00000000000000))*(r00)*(x383)))+(((r01)*(x382)))), ((((IkReal(-1.00000000000000))*(r00)*(sj2)*(x382)))+(((IkReal(-1.00000000000000))*(r01)*(sj2)*(x383)))+(((IkReal(-1.32329555000000))*(cj2)*(r02)))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x384=IKsin(j4);
IkReal x385=IKcos(j4);
IkReal x386=((IkReal(1.00000000000000))*(cj1));
IkReal x387=((IkReal(1.00000000000000))*(cj2));
IkReal x388=((IkReal(1.00000000000000))*(sj1)*(sj2));
evalcond[0]=((((r00)*(sj1)))+(((IkReal(0.755689082457808))*(x384)))+(((IkReal(-1.00000000000000))*(r01)*(x386))));
evalcond[1]=((((IkReal(-1.00000000000000))*(py)*(x386)))+(((IkReal(-4.94923857682473e-11))*(x384)))+(((px)*(sj1))));
evalcond[2]=((((IkReal(-0.755689082457808))*(x385)))+(((IkReal(-1.00000000000000))*(r00)*(sj2)*(x386)))+(((IkReal(-1.00000000000000))*(r02)*(x387)))+(((IkReal(-1.00000000000000))*(r01)*(x388))));
evalcond[3]=((IkReal(0.414000000000000))+(((IkReal(-1.00000000000000))*(py)*(x388)))+(((IkReal(-1.00000000000000))*(px)*(sj2)*(x386)))+(((IkReal(0.150000000000000))*(sj2)))+(((IkReal(4.94923857682473e-11))*(x385)))+(((IkReal(-1.00000000000000))*(pz)*(x387))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x389=((IkReal(26465911.0000000))*(sj2));
if( IKabs(((((IkReal(-1.32329555000000))*(r00)*(sj1)))+(((IkReal(1.32329555000000))*(cj1)*(r01))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(5.00000000000000e-8))*(((IKabs(cj3) != 0)?((IkReal)1/(cj3)):(IkReal)1.0e30))*(((((IkReal(26465911.0000000))*(cj2)*(r02)))+(((r01)*(sj1)*(x389)))+(((IkReal(17333333.3420657))*(sj3)))+(((cj1)*(r00)*(x389))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.32329555000000))*(r00)*(sj1)))+(((IkReal(1.32329555000000))*(cj1)*(r01)))))+IKsqr(((IkReal(5.00000000000000e-8))*(((IKabs(cj3) != 0)?((IkReal)1/(cj3)):(IkReal)1.0e30))*(((((IkReal(26465911.0000000))*(cj2)*(r02)))+(((r01)*(sj1)*(x389)))+(((IkReal(17333333.3420657))*(sj3)))+(((cj1)*(r00)*(x389)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((IkReal(-1.32329555000000))*(r00)*(sj1)))+(((IkReal(1.32329555000000))*(cj1)*(r01)))), ((IkReal(5.00000000000000e-8))*(((IKabs(cj3) != 0)?((IkReal)1/(cj3)):(IkReal)1.0e30))*(((((IkReal(26465911.0000000))*(cj2)*(r02)))+(((r01)*(sj1)*(x389)))+(((IkReal(17333333.3420657))*(sj3)))+(((cj1)*(r00)*(x389)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x390=IKsin(j4);
IkReal x391=IKcos(j4);
IkReal x392=((cj1)*(cj2));
IkReal x393=((IkReal(1.00000000000000))*(cj2));
IkReal x394=((py)*(sj1));
IkReal x395=((IkReal(1.00000000000000))*(sj2));
IkReal x396=((IkReal(1.00000000000000))*(cj1));
IkReal x397=((r01)*(sj1));
IkReal x398=((IkReal(4.94923857682473e-11))*(x391));
IkReal x399=((IkReal(0.755689082457808))*(x391));
evalcond[0]=((((r00)*(sj1)))+(((IkReal(0.755689082457808))*(x390)))+(((IkReal(-1.00000000000000))*(r01)*(x396))));
evalcond[1]=((((IkReal(-1.00000000000000))*(py)*(x396)))+(((px)*(sj1)))+(((IkReal(-4.94923857682473e-11))*(x390))));
evalcond[2]=((((r00)*(x392)))+(((IkReal(-1.00000000000000))*(r02)*(x395)))+(((sj3)*(x399)))+(((cj2)*(x397)))+(((IkReal(0.654930538460049))*(cj3))));
evalcond[3]=((((IkReal(-0.654930538460049))*(sj3)))+(((IkReal(-1.00000000000000))*(r02)*(x393)))+(((IkReal(-1.00000000000000))*(x395)*(x397)))+(((cj3)*(x399)))+(((IkReal(-1.00000000000000))*(cj1)*(r00)*(x395))));
evalcond[4]=((((IkReal(-0.150000000000000))*(cj2)))+(((IkReal(-1.00000000000000))*(sj3)*(x398)))+(((IkReal(-1.00000000000000))*(pz)*(x395)))+(((px)*(x392)))+(((cj2)*(x394)))+(((IkReal(-0.441505667631522))*(cj3)))+(((IkReal(0.200000000000000))*(sj3))));
evalcond[5]=((IkReal(0.614000000000000))+(((IkReal(0.441505667631522))*(sj3)))+(((IkReal(-1.00000000000000))*(x394)*(x395)))+(((IkReal(0.200000000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(pz)*(x393)))+(((IkReal(-1.00000000000000))*(cj1)*(px)*(x395)))+(((IkReal(-1.00000000000000))*(cj3)*(x398)))+(((IkReal(0.150000000000000))*(sj2))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x400=((IkReal(26465911.0000000))*(cj2));
if( IKabs(((((IkReal(20205128212.7031))*(px)*(sj1)))+(((IkReal(-20205128212.7031))*(cj1)*(py))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(5.00000000000000e-8))*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(r01)*(sj1)*(x400)))+(((IkReal(-17333333.3420657))*(cj3)))+(((IkReal(-1.00000000000000))*(cj1)*(r00)*(x400)))+(((IkReal(26465911.0000000))*(r02)*(sj2))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(20205128212.7031))*(px)*(sj1)))+(((IkReal(-20205128212.7031))*(cj1)*(py)))))+IKsqr(((IkReal(5.00000000000000e-8))*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(r01)*(sj1)*(x400)))+(((IkReal(-17333333.3420657))*(cj3)))+(((IkReal(-1.00000000000000))*(cj1)*(r00)*(x400)))+(((IkReal(26465911.0000000))*(r02)*(sj2)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((IkReal(20205128212.7031))*(px)*(sj1)))+(((IkReal(-20205128212.7031))*(cj1)*(py)))), ((IkReal(5.00000000000000e-8))*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(r01)*(sj1)*(x400)))+(((IkReal(-17333333.3420657))*(cj3)))+(((IkReal(-1.00000000000000))*(cj1)*(r00)*(x400)))+(((IkReal(26465911.0000000))*(r02)*(sj2)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x401=IKsin(j4);
IkReal x402=IKcos(j4);
IkReal x403=((cj1)*(cj2));
IkReal x404=((IkReal(1.00000000000000))*(cj2));
IkReal x405=((py)*(sj1));
IkReal x406=((IkReal(1.00000000000000))*(sj2));
IkReal x407=((IkReal(1.00000000000000))*(cj1));
IkReal x408=((r01)*(sj1));
IkReal x409=((IkReal(4.94923857682473e-11))*(x402));
IkReal x410=((IkReal(0.755689082457808))*(x402));
evalcond[0]=((((r00)*(sj1)))+(((IkReal(0.755689082457808))*(x401)))+(((IkReal(-1.00000000000000))*(r01)*(x407))));
evalcond[1]=((((IkReal(-4.94923857682473e-11))*(x401)))+(((px)*(sj1)))+(((IkReal(-1.00000000000000))*(py)*(x407))));
evalcond[2]=((((IkReal(-1.00000000000000))*(r02)*(x406)))+(((sj3)*(x410)))+(((r00)*(x403)))+(((cj2)*(x408)))+(((IkReal(0.654930538460049))*(cj3))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x406)*(x408)))+(((IkReal(-0.654930538460049))*(sj3)))+(((IkReal(-1.00000000000000))*(r02)*(x404)))+(((IkReal(-1.00000000000000))*(cj1)*(r00)*(x406)))+(((cj3)*(x410))));
evalcond[4]=((((IkReal(-0.150000000000000))*(cj2)))+(((px)*(x403)))+(((IkReal(-1.00000000000000))*(pz)*(x406)))+(((IkReal(-0.441505667631522))*(cj3)))+(((IkReal(-1.00000000000000))*(sj3)*(x409)))+(((IkReal(0.200000000000000))*(sj3)))+(((cj2)*(x405))));
evalcond[5]=((IkReal(0.614000000000000))+(((IkReal(0.441505667631522))*(sj3)))+(((IkReal(-1.00000000000000))*(cj3)*(x409)))+(((IkReal(0.200000000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(cj1)*(px)*(x406)))+(((IkReal(-1.00000000000000))*(pz)*(x404)))+(((IkReal(-1.00000000000000))*(x405)*(x406)))+(((IkReal(0.150000000000000))*(sj2))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x411=((IkReal(26465911.0000000))*(cj2));
if( IKabs(((((IkReal(-1.32329555000000))*(r00)*(sj1)))+(((IkReal(1.32329555000000))*(cj1)*(r01))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(5.00000000000000e-8))*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((IkReal(-17333333.3420657))*(cj3)))+(((IkReal(-1.00000000000000))*(r01)*(sj1)*(x411)))+(((IkReal(-1.00000000000000))*(cj1)*(r00)*(x411)))+(((IkReal(26465911.0000000))*(r02)*(sj2))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.32329555000000))*(r00)*(sj1)))+(((IkReal(1.32329555000000))*(cj1)*(r01)))))+IKsqr(((IkReal(5.00000000000000e-8))*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((IkReal(-17333333.3420657))*(cj3)))+(((IkReal(-1.00000000000000))*(r01)*(sj1)*(x411)))+(((IkReal(-1.00000000000000))*(cj1)*(r00)*(x411)))+(((IkReal(26465911.0000000))*(r02)*(sj2)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((IkReal(-1.32329555000000))*(r00)*(sj1)))+(((IkReal(1.32329555000000))*(cj1)*(r01)))), ((IkReal(5.00000000000000e-8))*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((IkReal(-17333333.3420657))*(cj3)))+(((IkReal(-1.00000000000000))*(r01)*(sj1)*(x411)))+(((IkReal(-1.00000000000000))*(cj1)*(r00)*(x411)))+(((IkReal(26465911.0000000))*(r02)*(sj2)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x412=IKsin(j4);
IkReal x413=IKcos(j4);
IkReal x414=((cj1)*(cj2));
IkReal x415=((IkReal(1.00000000000000))*(cj2));
IkReal x416=((py)*(sj1));
IkReal x417=((IkReal(1.00000000000000))*(sj2));
IkReal x418=((IkReal(1.00000000000000))*(cj1));
IkReal x419=((r01)*(sj1));
IkReal x420=((IkReal(4.94923857682473e-11))*(x413));
IkReal x421=((IkReal(0.755689082457808))*(x413));
evalcond[0]=((((r00)*(sj1)))+(((IkReal(0.755689082457808))*(x412)))+(((IkReal(-1.00000000000000))*(r01)*(x418))));
evalcond[1]=((((IkReal(-4.94923857682473e-11))*(x412)))+(((px)*(sj1)))+(((IkReal(-1.00000000000000))*(py)*(x418))));
evalcond[2]=((((IkReal(-1.00000000000000))*(r02)*(x417)))+(((r00)*(x414)))+(((sj3)*(x421)))+(((cj2)*(x419)))+(((IkReal(0.654930538460049))*(cj3))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x417)*(x419)))+(((IkReal(-0.654930538460049))*(sj3)))+(((IkReal(-1.00000000000000))*(r02)*(x415)))+(((IkReal(-1.00000000000000))*(cj1)*(r00)*(x417)))+(((cj3)*(x421))));
evalcond[4]=((((IkReal(-0.150000000000000))*(cj2)))+(((IkReal(-1.00000000000000))*(sj3)*(x420)))+(((px)*(x414)))+(((IkReal(-0.441505667631522))*(cj3)))+(((cj2)*(x416)))+(((IkReal(-1.00000000000000))*(pz)*(x417)))+(((IkReal(0.200000000000000))*(sj3))));
evalcond[5]=((IkReal(0.614000000000000))+(((IkReal(0.441505667631522))*(sj3)))+(((IkReal(-1.00000000000000))*(cj3)*(x420)))+(((IkReal(0.200000000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(cj1)*(px)*(x417)))+(((IkReal(-1.00000000000000))*(x416)*(x417)))+(((IkReal(-1.00000000000000))*(pz)*(x415)))+(((IkReal(0.150000000000000))*(sj2))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
IkReal x422=((cj1)*(r00));
IkReal x423=((IkReal(1.00000000000000))*(r01));
IkReal x424=((IkReal(1.00000000000000))*(sj2));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j5)), IkReal(6.28318530717959))));
evalcond[1]=((((r00)*(sj1)))+(((IkReal(-1.00000000000000))*(cj1)*(x423))));
evalcond[2]=((((cj2)*(r01)*(sj1)))+(((IkReal(-1.00000000000000))*(r02)*(x424)))+(((cj2)*(x422)))+(((IkReal(-1.00000000000000))*(cj3))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x422)*(x424)))+(sj3)+(((IkReal(-1.00000000000000))*(cj2)*(r02)))+(((IkReal(-1.00000000000000))*(sj1)*(sj2)*(x423))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=sj3;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=cj3;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
IkReal x425=((cj1)*(r00));
IkReal x426=((IkReal(1.00000000000000))*(cj1));
IkReal x427=((IkReal(1.00000000000000))*(cj2));
IkReal x428=((IkReal(1.00000000000000))*(sj2));
IkReal x429=((r01)*(sj1));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j3)), IkReal(6.28318530717959))));
evalcond[1]=((((r00)*(sj1)))+(((IkReal(-1.00000000000000))*(r01)*(x426))));
evalcond[2]=((((IkReal(-1.00000000000000))*(r02)*(x428)))+(((cj2)*(x425)))+(((cj2)*(x429))));
evalcond[3]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(r02)*(x427)))+(((IkReal(-1.00000000000000))*(x425)*(x428)))+(((IkReal(-1.00000000000000))*(x428)*(x429))));
evalcond[4]=((IkReal(1.38400000000000))+(((IkReal(-1.00000000000000))*(px)*(sj2)*(x426)))+(((IkReal(-1.00000000000000))*(pz)*(x427)))+(((IkReal(0.150000000000000))*(sj2)))+(((IkReal(-1.00000000000000))*(py)*(sj1)*(x428))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x430=((IkReal(6.66666666666667))*(py));
IkReal x431=((IkReal(6.66666666666667))*(px));
if( IKabs(((((IkReal(-1.00000000000000))*(sj1)*(x431)))+(((cj1)*(x430))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.33333333333333))+(cj2)+(((IkReal(6.66666666666667))*(pz)*(sj2)))+(((IkReal(-1.00000000000000))*(cj1)*(cj2)*(x431)))+(((IkReal(-1.00000000000000))*(cj2)*(sj1)*(x430))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(sj1)*(x431)))+(((cj1)*(x430)))))+IKsqr(((IkReal(-1.33333333333333))+(cj2)+(((IkReal(6.66666666666667))*(pz)*(sj2)))+(((IkReal(-1.00000000000000))*(cj1)*(cj2)*(x431)))+(((IkReal(-1.00000000000000))*(cj2)*(sj1)*(x430)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((IkReal(-1.00000000000000))*(sj1)*(x431)))+(((cj1)*(x430)))), ((IkReal(-1.33333333333333))+(cj2)+(((IkReal(6.66666666666667))*(pz)*(sj2)))+(((IkReal(-1.00000000000000))*(cj1)*(cj2)*(x431)))+(((IkReal(-1.00000000000000))*(cj2)*(sj1)*(x430)))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((((IkReal(-1.00000000000000))*(cj1)*(py)))+(((px)*(sj1)))+(((IkReal(0.150000000000000))*(IKsin(j4)))));
evalcond[1]=((IkReal(0.200000000000000))+(((cj1)*(cj2)*(px)))+(((IkReal(-0.150000000000000))*(cj2)))+(((cj2)*(py)*(sj1)))+(((IkReal(0.150000000000000))*(IKcos(j4))))+(((IkReal(-1.00000000000000))*(pz)*(sj2))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x432=((cj1)*(r00));
IkReal x433=((IkReal(1.00000000000000))*(cj1));
IkReal x434=((IkReal(1.00000000000000))*(cj2));
IkReal x435=((IkReal(1.00000000000000))*(sj2));
IkReal x436=((r01)*(sj1));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j3)), IkReal(6.28318530717959))));
evalcond[1]=((((r00)*(sj1)))+(((IkReal(-1.00000000000000))*(r01)*(x433))));
evalcond[2]=((((IkReal(-1.00000000000000))*(r02)*(x435)))+(((cj2)*(x436)))+(((cj2)*(x432))));
evalcond[3]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(x435)*(x436)))+(((IkReal(-1.00000000000000))*(x432)*(x435)))+(((IkReal(-1.00000000000000))*(r02)*(x434))));
evalcond[4]=((IkReal(-0.156000000000000))+(((IkReal(-1.00000000000000))*(py)*(sj1)*(x435)))+(((IkReal(-1.00000000000000))*(px)*(sj2)*(x433)))+(((IkReal(-1.00000000000000))*(pz)*(x434)))+(((IkReal(0.150000000000000))*(sj2))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x437=((IkReal(6.66666666666667))*(px));
IkReal x438=((IkReal(6.66666666666667))*(py));
if( IKabs(((((IkReal(-1.00000000000000))*(sj1)*(x437)))+(((cj1)*(x438))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.33333333333333))+(((IkReal(-6.66666666666667))*(pz)*(sj2)))+(((cj2)*(sj1)*(x438)))+(((IkReal(-1.00000000000000))*(cj2)))+(((cj1)*(cj2)*(x437))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(sj1)*(x437)))+(((cj1)*(x438)))))+IKsqr(((IkReal(-1.33333333333333))+(((IkReal(-6.66666666666667))*(pz)*(sj2)))+(((cj2)*(sj1)*(x438)))+(((IkReal(-1.00000000000000))*(cj2)))+(((cj1)*(cj2)*(x437)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((IkReal(-1.00000000000000))*(sj1)*(x437)))+(((cj1)*(x438)))), ((IkReal(-1.33333333333333))+(((IkReal(-6.66666666666667))*(pz)*(sj2)))+(((cj2)*(sj1)*(x438)))+(((IkReal(-1.00000000000000))*(cj2)))+(((cj1)*(cj2)*(x437)))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((((IkReal(-1.00000000000000))*(cj1)*(py)))+(((px)*(sj1)))+(((IkReal(0.150000000000000))*(IKsin(j4)))));
evalcond[1]=((IkReal(-0.200000000000000))+(((cj1)*(cj2)*(px)))+(((IkReal(-0.150000000000000))*(cj2)))+(((IkReal(-0.150000000000000))*(IKcos(j4))))+(((cj2)*(py)*(sj1)))+(((IkReal(-1.00000000000000))*(pz)*(sj2))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x439=((cj1)*(cj2));
IkReal x440=((IkReal(1.00000000000000))*(cj1));
IkReal x441=((cj2)*(sj1));
IkReal x442=((IkReal(1.00000000000000))*(r02));
IkReal x443=((IkReal(1.00000000000000))*(sj2));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j3)), IkReal(6.28318530717959))));
evalcond[1]=((((r00)*(sj1)))+(((IkReal(-1.00000000000000))*(r01)*(x440))));
evalcond[2]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(sj2)*(x442)))+(((r00)*(x439)))+(((r01)*(x441))));
evalcond[3]=((((IkReal(-1.00000000000000))*(cj2)*(x442)))+(((IkReal(-1.00000000000000))*(r01)*(sj1)*(x443)))+(((IkReal(-1.00000000000000))*(r00)*(sj2)*(x440))));
evalcond[4]=((IkReal(-0.770000000000000))+(((IkReal(-0.150000000000000))*(cj2)))+(((px)*(x439)))+(((py)*(x441)))+(((IkReal(-1.00000000000000))*(pz)*(x443))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x444=((IkReal(6.66666666666667))*(sj1));
IkReal x445=((IkReal(6.66666666666667))*(cj1));
if( IKabs(((((py)*(x445)))+(((IkReal(-1.00000000000000))*(px)*(x444))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-5.42666666666667))+(((IkReal(-1.00000000000000))*(sj2)))+(((IkReal(6.66666666666667))*(cj2)*(pz)))+(((py)*(sj2)*(x444)))+(((px)*(sj2)*(x445))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((py)*(x445)))+(((IkReal(-1.00000000000000))*(px)*(x444)))))+IKsqr(((IkReal(-5.42666666666667))+(((IkReal(-1.00000000000000))*(sj2)))+(((IkReal(6.66666666666667))*(cj2)*(pz)))+(((py)*(sj2)*(x444)))+(((px)*(sj2)*(x445)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((py)*(x445)))+(((IkReal(-1.00000000000000))*(px)*(x444)))), ((IkReal(-5.42666666666667))+(((IkReal(-1.00000000000000))*(sj2)))+(((IkReal(6.66666666666667))*(cj2)*(pz)))+(((py)*(sj2)*(x444)))+(((px)*(sj2)*(x445)))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x446=((IkReal(1.00000000000000))*(sj2));
evalcond[0]=((((IkReal(-1.00000000000000))*(cj1)*(py)))+(((px)*(sj1)))+(((IkReal(0.150000000000000))*(IKsin(j4)))));
evalcond[1]=((IkReal(0.814000000000000))+(((IkReal(-1.00000000000000))*(py)*(sj1)*(x446)))+(((IkReal(-1.00000000000000))*(cj1)*(px)*(x446)))+(((IkReal(0.150000000000000))*(IKcos(j4))))+(((IkReal(-1.00000000000000))*(cj2)*(pz)))+(((IkReal(0.150000000000000))*(sj2))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x447=((cj1)*(cj2));
IkReal x448=((IkReal(1.00000000000000))*(cj1));
IkReal x449=((cj2)*(sj1));
IkReal x450=((IkReal(1.00000000000000))*(r02));
IkReal x451=((IkReal(1.00000000000000))*(sj2));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j3)), IkReal(6.28318530717959))));
evalcond[1]=((((r00)*(sj1)))+(((IkReal(-1.00000000000000))*(r01)*(x448))));
evalcond[2]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(sj2)*(x450)))+(((r01)*(x449)))+(((r00)*(x447))));
evalcond[3]=((((IkReal(-1.00000000000000))*(r01)*(sj1)*(x451)))+(((IkReal(-1.00000000000000))*(r00)*(sj2)*(x448)))+(((IkReal(-1.00000000000000))*(cj2)*(x450))));
evalcond[4]=((IkReal(0.770000000000000))+(((IkReal(-0.150000000000000))*(cj2)))+(((px)*(x447)))+(((py)*(x449)))+(((IkReal(-1.00000000000000))*(pz)*(x451))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x452=((IkReal(6.66666666666667))*(py));
IkReal x453=((IkReal(6.66666666666667))*(px));
if( IKabs(((((cj1)*(x452)))+(((IkReal(-1.00000000000000))*(sj1)*(x453))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(2.76000000000000))+(sj2)+(((IkReal(-6.66666666666667))*(cj2)*(pz)))+(((IkReal(-1.00000000000000))*(sj1)*(sj2)*(x452)))+(((IkReal(-1.00000000000000))*(cj1)*(sj2)*(x453))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((cj1)*(x452)))+(((IkReal(-1.00000000000000))*(sj1)*(x453)))))+IKsqr(((IkReal(2.76000000000000))+(sj2)+(((IkReal(-6.66666666666667))*(cj2)*(pz)))+(((IkReal(-1.00000000000000))*(sj1)*(sj2)*(x452)))+(((IkReal(-1.00000000000000))*(cj1)*(sj2)*(x453)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((cj1)*(x452)))+(((IkReal(-1.00000000000000))*(sj1)*(x453)))), ((IkReal(2.76000000000000))+(sj2)+(((IkReal(-6.66666666666667))*(cj2)*(pz)))+(((IkReal(-1.00000000000000))*(sj1)*(sj2)*(x452)))+(((IkReal(-1.00000000000000))*(cj1)*(sj2)*(x453)))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x454=((IkReal(1.00000000000000))*(sj2));
evalcond[0]=((((IkReal(-1.00000000000000))*(cj1)*(py)))+(((px)*(sj1)))+(((IkReal(0.150000000000000))*(IKsin(j4)))));
evalcond[1]=((IkReal(0.414000000000000))+(((IkReal(-0.150000000000000))*(IKcos(j4))))+(((IkReal(-1.00000000000000))*(cj2)*(pz)))+(((IkReal(-1.00000000000000))*(py)*(sj1)*(x454)))+(((IkReal(-1.00000000000000))*(cj1)*(px)*(x454)))+(((IkReal(0.150000000000000))*(sj2))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x455=((IkReal(20.0000000000000))*(sj2));
if( IKabs(((((IkReal(6.66666666666667))*(cj1)*(py)))+(((IkReal(-6.66666666666667))*(px)*(sj1))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(0.333333333333333))*(((IKabs(cj3) != 0)?((IkReal)1/(cj3)):(IkReal)1.0e30))*(((IkReal(-12.2800000000000))+(((cj1)*(px)*(x455)))+(((IkReal(-4.00000000000000))*(cj3)))+(((py)*(sj1)*(x455)))+(((IkReal(-3.00000000000000))*(sj2)))+(((IkReal(-15.4000000000000))*(sj3)))+(((IkReal(20.0000000000000))*(cj2)*(pz))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(6.66666666666667))*(cj1)*(py)))+(((IkReal(-6.66666666666667))*(px)*(sj1)))))+IKsqr(((IkReal(0.333333333333333))*(((IKabs(cj3) != 0)?((IkReal)1/(cj3)):(IkReal)1.0e30))*(((IkReal(-12.2800000000000))+(((cj1)*(px)*(x455)))+(((IkReal(-4.00000000000000))*(cj3)))+(((py)*(sj1)*(x455)))+(((IkReal(-3.00000000000000))*(sj2)))+(((IkReal(-15.4000000000000))*(sj3)))+(((IkReal(20.0000000000000))*(cj2)*(pz)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((IkReal(6.66666666666667))*(cj1)*(py)))+(((IkReal(-6.66666666666667))*(px)*(sj1)))), ((IkReal(0.333333333333333))*(((IKabs(cj3) != 0)?((IkReal)1/(cj3)):(IkReal)1.0e30))*(((IkReal(-12.2800000000000))+(((cj1)*(px)*(x455)))+(((IkReal(-4.00000000000000))*(cj3)))+(((py)*(sj1)*(x455)))+(((IkReal(-3.00000000000000))*(sj2)))+(((IkReal(-15.4000000000000))*(sj3)))+(((IkReal(20.0000000000000))*(cj2)*(pz)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x456=IKcos(j4);
IkReal x457=((IkReal(1.00000000000000))*(pz));
IkReal x458=((cj1)*(px));
IkReal x459=((IkReal(1.00000000000000))*(py));
IkReal x460=((IkReal(0.150000000000000))*(x456));
evalcond[0]=((((IkReal(-1.00000000000000))*(cj1)*(x459)))+(((px)*(sj1)))+(((IkReal(0.150000000000000))*(IKsin(j4)))));
evalcond[1]=((((IkReal(-0.770000000000000))*(cj3)))+(((IkReal(-0.150000000000000))*(cj2)))+(((sj3)*(x460)))+(((IkReal(-1.00000000000000))*(sj2)*(x457)))+(((cj2)*(py)*(sj1)))+(((cj2)*(x458)))+(((IkReal(0.200000000000000))*(sj3))));
evalcond[2]=((IkReal(0.614000000000000))+(((IkReal(0.200000000000000))*(cj3)))+(((cj3)*(x460)))+(((IkReal(-1.00000000000000))*(sj2)*(x458)))+(((IkReal(-1.00000000000000))*(sj1)*(sj2)*(x459)))+(((IkReal(0.770000000000000))*(sj3)))+(((IkReal(0.150000000000000))*(sj2)))+(((IkReal(-1.00000000000000))*(cj2)*(x457))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x461=((IkReal(20.0000000000000))*(cj2));
if( IKabs(((((IkReal(6.66666666666667))*(cj1)*(py)))+(((IkReal(-6.66666666666667))*(px)*(sj1))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(0.333333333333333))*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((IkReal(15.4000000000000))*(cj3)))+(((IkReal(3.00000000000000))*(cj2)))+(((IkReal(-1.00000000000000))*(py)*(sj1)*(x461)))+(((IkReal(-4.00000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(cj1)*(px)*(x461)))+(((IkReal(20.0000000000000))*(pz)*(sj2))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(6.66666666666667))*(cj1)*(py)))+(((IkReal(-6.66666666666667))*(px)*(sj1)))))+IKsqr(((IkReal(0.333333333333333))*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((IkReal(15.4000000000000))*(cj3)))+(((IkReal(3.00000000000000))*(cj2)))+(((IkReal(-1.00000000000000))*(py)*(sj1)*(x461)))+(((IkReal(-4.00000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(cj1)*(px)*(x461)))+(((IkReal(20.0000000000000))*(pz)*(sj2)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((IkReal(6.66666666666667))*(cj1)*(py)))+(((IkReal(-6.66666666666667))*(px)*(sj1)))), ((IkReal(0.333333333333333))*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((IkReal(15.4000000000000))*(cj3)))+(((IkReal(3.00000000000000))*(cj2)))+(((IkReal(-1.00000000000000))*(py)*(sj1)*(x461)))+(((IkReal(-4.00000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(cj1)*(px)*(x461)))+(((IkReal(20.0000000000000))*(pz)*(sj2)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x462=IKcos(j4);
IkReal x463=((IkReal(1.00000000000000))*(pz));
IkReal x464=((cj1)*(px));
IkReal x465=((IkReal(1.00000000000000))*(py));
IkReal x466=((IkReal(0.150000000000000))*(x462));
evalcond[0]=((((IkReal(-1.00000000000000))*(cj1)*(x465)))+(((px)*(sj1)))+(((IkReal(0.150000000000000))*(IKsin(j4)))));
evalcond[1]=((((IkReal(-0.770000000000000))*(cj3)))+(((IkReal(-0.150000000000000))*(cj2)))+(((sj3)*(x466)))+(((cj2)*(x464)))+(((cj2)*(py)*(sj1)))+(((IkReal(-1.00000000000000))*(sj2)*(x463)))+(((IkReal(0.200000000000000))*(sj3))));
evalcond[2]=((IkReal(0.614000000000000))+(((IkReal(0.200000000000000))*(cj3)))+(((cj3)*(x466)))+(((IkReal(-1.00000000000000))*(sj2)*(x464)))+(((IkReal(-1.00000000000000))*(sj1)*(sj2)*(x465)))+(((IkReal(0.770000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(cj2)*(x463)))+(((IkReal(0.150000000000000))*(sj2))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
IkReal x467=((cj1)*(r00));
IkReal x468=((IkReal(1.00000000000000))*(r01));
IkReal x469=((IkReal(1.00000000000000))*(sj2));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j5)), IkReal(6.28318530717959))));
evalcond[1]=((((r00)*(sj1)))+(((IkReal(-1.00000000000000))*(cj1)*(x468))));
evalcond[2]=((cj3)+(((cj2)*(r01)*(sj1)))+(((cj2)*(x467)))+(((IkReal(-1.00000000000000))*(r02)*(x469))));
evalcond[3]=((((IkReal(-1.00000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(sj1)*(sj2)*(x468)))+(((IkReal(-1.00000000000000))*(cj2)*(r02)))+(((IkReal(-1.00000000000000))*(x467)*(x469))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=sj3;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=cj3;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
IkReal x470=((cj1)*(r00));
IkReal x471=((IkReal(1.00000000000000))*(cj1));
IkReal x472=((IkReal(1.00000000000000))*(cj2));
IkReal x473=((IkReal(1.00000000000000))*(sj2));
IkReal x474=((r01)*(sj1));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j3)), IkReal(6.28318530717959))));
evalcond[1]=((((r00)*(sj1)))+(((IkReal(-1.00000000000000))*(r01)*(x471))));
evalcond[2]=((((cj2)*(x470)))+(((cj2)*(x474)))+(((IkReal(-1.00000000000000))*(r02)*(x473))));
evalcond[3]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(x473)*(x474)))+(((IkReal(-1.00000000000000))*(x470)*(x473)))+(((IkReal(-1.00000000000000))*(r02)*(x472))));
evalcond[4]=((IkReal(1.12400000000000))+(((IkReal(-1.00000000000000))*(pz)*(x472)))+(((IkReal(-1.00000000000000))*(px)*(sj2)*(x471)))+(((IkReal(-1.00000000000000))*(py)*(sj1)*(x473)))+(((IkReal(0.150000000000000))*(sj2))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x475=((IkReal(6.66666666666667))*(px));
IkReal x476=((IkReal(6.66666666666667))*(py));
if( IKabs(((((IkReal(-1.00000000000000))*(cj1)*(x476)))+(((sj1)*(x475))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(1.33333333333333))+(((cj2)*(sj1)*(x476)))+(((IkReal(-6.66666666666667))*(pz)*(sj2)))+(((cj1)*(cj2)*(x475)))+(((IkReal(-1.00000000000000))*(cj2))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(cj1)*(x476)))+(((sj1)*(x475)))))+IKsqr(((IkReal(1.33333333333333))+(((cj2)*(sj1)*(x476)))+(((IkReal(-6.66666666666667))*(pz)*(sj2)))+(((cj1)*(cj2)*(x475)))+(((IkReal(-1.00000000000000))*(cj2)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((IkReal(-1.00000000000000))*(cj1)*(x476)))+(((sj1)*(x475)))), ((IkReal(1.33333333333333))+(((cj2)*(sj1)*(x476)))+(((IkReal(-6.66666666666667))*(pz)*(sj2)))+(((cj1)*(cj2)*(x475)))+(((IkReal(-1.00000000000000))*(cj2)))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((((IkReal(-0.150000000000000))*(IKsin(j4))))+(((IkReal(-1.00000000000000))*(cj1)*(py)))+(((px)*(sj1))));
evalcond[1]=((IkReal(0.200000000000000))+(((cj1)*(cj2)*(px)))+(((IkReal(-0.150000000000000))*(cj2)))+(((IkReal(-0.150000000000000))*(IKcos(j4))))+(((cj2)*(py)*(sj1)))+(((IkReal(-1.00000000000000))*(pz)*(sj2))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x477=((cj1)*(r00));
IkReal x478=((IkReal(1.00000000000000))*(cj1));
IkReal x479=((IkReal(1.00000000000000))*(cj2));
IkReal x480=((IkReal(1.00000000000000))*(sj2));
IkReal x481=((r01)*(sj1));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j3)), IkReal(6.28318530717959))));
evalcond[1]=((((r00)*(sj1)))+(((IkReal(-1.00000000000000))*(r01)*(x478))));
evalcond[2]=((((cj2)*(x481)))+(((cj2)*(x477)))+(((IkReal(-1.00000000000000))*(r02)*(x480))));
evalcond[3]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(x480)*(x481)))+(((IkReal(-1.00000000000000))*(x477)*(x480)))+(((IkReal(-1.00000000000000))*(r02)*(x479))));
evalcond[4]=((IkReal(0.104000000000000))+(((IkReal(-1.00000000000000))*(pz)*(x479)))+(((IkReal(-1.00000000000000))*(py)*(sj1)*(x480)))+(((IkReal(-1.00000000000000))*(px)*(sj2)*(x478)))+(((IkReal(0.150000000000000))*(sj2))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x482=((IkReal(6.66666666666667))*(py));
IkReal x483=((IkReal(6.66666666666667))*(px));
if( IKabs(((((IkReal(-1.00000000000000))*(cj1)*(x482)))+(((sj1)*(x483))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(1.33333333333333))+(((IkReal(-1.00000000000000))*(cj2)*(sj1)*(x482)))+(cj2)+(((IkReal(6.66666666666667))*(pz)*(sj2)))+(((IkReal(-1.00000000000000))*(cj1)*(cj2)*(x483))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(cj1)*(x482)))+(((sj1)*(x483)))))+IKsqr(((IkReal(1.33333333333333))+(((IkReal(-1.00000000000000))*(cj2)*(sj1)*(x482)))+(cj2)+(((IkReal(6.66666666666667))*(pz)*(sj2)))+(((IkReal(-1.00000000000000))*(cj1)*(cj2)*(x483)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((IkReal(-1.00000000000000))*(cj1)*(x482)))+(((sj1)*(x483)))), ((IkReal(1.33333333333333))+(((IkReal(-1.00000000000000))*(cj2)*(sj1)*(x482)))+(cj2)+(((IkReal(6.66666666666667))*(pz)*(sj2)))+(((IkReal(-1.00000000000000))*(cj1)*(cj2)*(x483)))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((((IkReal(-0.150000000000000))*(IKsin(j4))))+(((IkReal(-1.00000000000000))*(cj1)*(py)))+(((px)*(sj1))));
evalcond[1]=((IkReal(-0.200000000000000))+(((cj1)*(cj2)*(px)))+(((IkReal(-0.150000000000000))*(cj2)))+(((cj2)*(py)*(sj1)))+(((IkReal(0.150000000000000))*(IKcos(j4))))+(((IkReal(-1.00000000000000))*(pz)*(sj2))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x484=((cj1)*(cj2));
IkReal x485=((IkReal(1.00000000000000))*(cj1));
IkReal x486=((cj2)*(sj1));
IkReal x487=((IkReal(1.00000000000000))*(r02));
IkReal x488=((IkReal(1.00000000000000))*(sj2));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j3)), IkReal(6.28318530717959))));
evalcond[1]=((((r00)*(sj1)))+(((IkReal(-1.00000000000000))*(r01)*(x485))));
evalcond[2]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(sj2)*(x487)))+(((r01)*(x486)))+(((r00)*(x484))));
evalcond[3]=((((IkReal(-1.00000000000000))*(r00)*(sj2)*(x485)))+(((IkReal(-1.00000000000000))*(cj2)*(x487)))+(((IkReal(-1.00000000000000))*(r01)*(sj1)*(x488))));
evalcond[4]=((IkReal(-0.510000000000000))+(((IkReal(-1.00000000000000))*(pz)*(x488)))+(((IkReal(-0.150000000000000))*(cj2)))+(((py)*(x486)))+(((px)*(x484))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x489=((IkReal(6.66666666666667))*(py));
IkReal x490=((IkReal(6.66666666666667))*(px));
if( IKabs(((((IkReal(-1.00000000000000))*(cj1)*(x489)))+(((sj1)*(x490))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(5.42666666666667))+(sj2)+(((IkReal(-6.66666666666667))*(cj2)*(pz)))+(((IkReal(-1.00000000000000))*(cj1)*(sj2)*(x490)))+(((IkReal(-1.00000000000000))*(sj1)*(sj2)*(x489))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(cj1)*(x489)))+(((sj1)*(x490)))))+IKsqr(((IkReal(5.42666666666667))+(sj2)+(((IkReal(-6.66666666666667))*(cj2)*(pz)))+(((IkReal(-1.00000000000000))*(cj1)*(sj2)*(x490)))+(((IkReal(-1.00000000000000))*(sj1)*(sj2)*(x489)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((IkReal(-1.00000000000000))*(cj1)*(x489)))+(((sj1)*(x490)))), ((IkReal(5.42666666666667))+(sj2)+(((IkReal(-6.66666666666667))*(cj2)*(pz)))+(((IkReal(-1.00000000000000))*(cj1)*(sj2)*(x490)))+(((IkReal(-1.00000000000000))*(sj1)*(sj2)*(x489)))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x491=((IkReal(1.00000000000000))*(sj2));
evalcond[0]=((((IkReal(-0.150000000000000))*(IKsin(j4))))+(((IkReal(-1.00000000000000))*(cj1)*(py)))+(((px)*(sj1))));
evalcond[1]=((IkReal(0.814000000000000))+(((IkReal(-1.00000000000000))*(cj1)*(px)*(x491)))+(((IkReal(-0.150000000000000))*(IKcos(j4))))+(((IkReal(-1.00000000000000))*(cj2)*(pz)))+(((IkReal(-1.00000000000000))*(py)*(sj1)*(x491)))+(((IkReal(0.150000000000000))*(sj2))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x492=((cj1)*(cj2));
IkReal x493=((IkReal(1.00000000000000))*(cj1));
IkReal x494=((cj2)*(sj1));
IkReal x495=((IkReal(1.00000000000000))*(r02));
IkReal x496=((IkReal(1.00000000000000))*(sj2));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j3)), IkReal(6.28318530717959))));
evalcond[1]=((((r00)*(sj1)))+(((IkReal(-1.00000000000000))*(r01)*(x493))));
evalcond[2]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(sj2)*(x495)))+(((r00)*(x492)))+(((r01)*(x494))));
evalcond[3]=((((IkReal(-1.00000000000000))*(r00)*(sj2)*(x493)))+(((IkReal(-1.00000000000000))*(cj2)*(x495)))+(((IkReal(-1.00000000000000))*(r01)*(sj1)*(x496))));
evalcond[4]=((IkReal(0.510000000000000))+(((IkReal(-0.150000000000000))*(cj2)))+(((py)*(x494)))+(((px)*(x492)))+(((IkReal(-1.00000000000000))*(pz)*(x496))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x497=((IkReal(6.66666666666667))*(sj1));
IkReal x498=((IkReal(6.66666666666667))*(cj1));
if( IKabs(((((px)*(x497)))+(((IkReal(-1.00000000000000))*(py)*(x498))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-2.76000000000000))+(((IkReal(-1.00000000000000))*(sj2)))+(((IkReal(6.66666666666667))*(cj2)*(pz)))+(((py)*(sj2)*(x497)))+(((px)*(sj2)*(x498))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((px)*(x497)))+(((IkReal(-1.00000000000000))*(py)*(x498)))))+IKsqr(((IkReal(-2.76000000000000))+(((IkReal(-1.00000000000000))*(sj2)))+(((IkReal(6.66666666666667))*(cj2)*(pz)))+(((py)*(sj2)*(x497)))+(((px)*(sj2)*(x498)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((px)*(x497)))+(((IkReal(-1.00000000000000))*(py)*(x498)))), ((IkReal(-2.76000000000000))+(((IkReal(-1.00000000000000))*(sj2)))+(((IkReal(6.66666666666667))*(cj2)*(pz)))+(((py)*(sj2)*(x497)))+(((px)*(sj2)*(x498)))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x499=((IkReal(1.00000000000000))*(sj2));
evalcond[0]=((((IkReal(-0.150000000000000))*(IKsin(j4))))+(((IkReal(-1.00000000000000))*(cj1)*(py)))+(((px)*(sj1))));
evalcond[1]=((IkReal(0.414000000000000))+(((IkReal(-1.00000000000000))*(cj1)*(px)*(x499)))+(((IkReal(0.150000000000000))*(IKcos(j4))))+(((IkReal(-1.00000000000000))*(cj2)*(pz)))+(((IkReal(-1.00000000000000))*(py)*(sj1)*(x499)))+(((IkReal(0.150000000000000))*(sj2))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x500=((IkReal(20.0000000000000))*(sj2));
if( IKabs(((((IkReal(6.66666666666667))*(px)*(sj1)))+(((IkReal(-6.66666666666667))*(cj1)*(py))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(0.333333333333333))*(((IKabs(cj3) != 0)?((IkReal)1/(cj3)):(IkReal)1.0e30))*(((IkReal(12.2800000000000))+(((IkReal(10.2000000000000))*(sj3)))+(((IkReal(4.00000000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(py)*(sj1)*(x500)))+(((IkReal(3.00000000000000))*(sj2)))+(((IkReal(-1.00000000000000))*(cj1)*(px)*(x500)))+(((IkReal(-20.0000000000000))*(cj2)*(pz))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(6.66666666666667))*(px)*(sj1)))+(((IkReal(-6.66666666666667))*(cj1)*(py)))))+IKsqr(((IkReal(0.333333333333333))*(((IKabs(cj3) != 0)?((IkReal)1/(cj3)):(IkReal)1.0e30))*(((IkReal(12.2800000000000))+(((IkReal(10.2000000000000))*(sj3)))+(((IkReal(4.00000000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(py)*(sj1)*(x500)))+(((IkReal(3.00000000000000))*(sj2)))+(((IkReal(-1.00000000000000))*(cj1)*(px)*(x500)))+(((IkReal(-20.0000000000000))*(cj2)*(pz)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((IkReal(6.66666666666667))*(px)*(sj1)))+(((IkReal(-6.66666666666667))*(cj1)*(py)))), ((IkReal(0.333333333333333))*(((IKabs(cj3) != 0)?((IkReal)1/(cj3)):(IkReal)1.0e30))*(((IkReal(12.2800000000000))+(((IkReal(10.2000000000000))*(sj3)))+(((IkReal(4.00000000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(py)*(sj1)*(x500)))+(((IkReal(3.00000000000000))*(sj2)))+(((IkReal(-1.00000000000000))*(cj1)*(px)*(x500)))+(((IkReal(-20.0000000000000))*(cj2)*(pz)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x501=IKcos(j4);
IkReal x502=((IkReal(1.00000000000000))*(pz));
IkReal x503=((cj1)*(px));
IkReal x504=((IkReal(1.00000000000000))*(py));
IkReal x505=((IkReal(0.150000000000000))*(x501));
evalcond[0]=((((IkReal(-0.150000000000000))*(IKsin(j4))))+(((px)*(sj1)))+(((IkReal(-1.00000000000000))*(cj1)*(x504))));
evalcond[1]=((((IkReal(-0.150000000000000))*(cj2)))+(((IkReal(-1.00000000000000))*(sj3)*(x505)))+(((IkReal(-1.00000000000000))*(sj2)*(x502)))+(((cj2)*(x503)))+(((cj2)*(py)*(sj1)))+(((IkReal(-0.510000000000000))*(cj3)))+(((IkReal(0.200000000000000))*(sj3))));
evalcond[2]=((IkReal(0.614000000000000))+(((IkReal(0.200000000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(sj1)*(sj2)*(x504)))+(((IkReal(-1.00000000000000))*(sj2)*(x503)))+(((IkReal(-1.00000000000000))*(cj2)*(x502)))+(((IkReal(-1.00000000000000))*(cj3)*(x505)))+(((IkReal(0.150000000000000))*(sj2)))+(((IkReal(0.510000000000000))*(sj3))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x506=((IkReal(20.0000000000000))*(cj2));
if( IKabs(((((IkReal(6.66666666666667))*(px)*(sj1)))+(((IkReal(-6.66666666666667))*(cj1)*(py))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(0.333333333333333))*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((IkReal(-10.2000000000000))*(cj3)))+(((py)*(sj1)*(x506)))+(((IkReal(4.00000000000000))*(sj3)))+(((IkReal(-20.0000000000000))*(pz)*(sj2)))+(((IkReal(-3.00000000000000))*(cj2)))+(((cj1)*(px)*(x506))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(6.66666666666667))*(px)*(sj1)))+(((IkReal(-6.66666666666667))*(cj1)*(py)))))+IKsqr(((IkReal(0.333333333333333))*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((IkReal(-10.2000000000000))*(cj3)))+(((py)*(sj1)*(x506)))+(((IkReal(4.00000000000000))*(sj3)))+(((IkReal(-20.0000000000000))*(pz)*(sj2)))+(((IkReal(-3.00000000000000))*(cj2)))+(((cj1)*(px)*(x506)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((IkReal(6.66666666666667))*(px)*(sj1)))+(((IkReal(-6.66666666666667))*(cj1)*(py)))), ((IkReal(0.333333333333333))*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((IkReal(-10.2000000000000))*(cj3)))+(((py)*(sj1)*(x506)))+(((IkReal(4.00000000000000))*(sj3)))+(((IkReal(-20.0000000000000))*(pz)*(sj2)))+(((IkReal(-3.00000000000000))*(cj2)))+(((cj1)*(px)*(x506)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x507=IKcos(j4);
IkReal x508=((IkReal(1.00000000000000))*(pz));
IkReal x509=((cj1)*(px));
IkReal x510=((IkReal(1.00000000000000))*(py));
IkReal x511=((IkReal(0.150000000000000))*(x507));
evalcond[0]=((((IkReal(-0.150000000000000))*(IKsin(j4))))+(((IkReal(-1.00000000000000))*(cj1)*(x510)))+(((px)*(sj1))));
evalcond[1]=((((IkReal(-0.150000000000000))*(cj2)))+(((IkReal(-1.00000000000000))*(sj2)*(x508)))+(((cj2)*(x509)))+(((IkReal(-1.00000000000000))*(sj3)*(x511)))+(((cj2)*(py)*(sj1)))+(((IkReal(-0.510000000000000))*(cj3)))+(((IkReal(0.200000000000000))*(sj3))));
evalcond[2]=((IkReal(0.614000000000000))+(((IkReal(0.200000000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(cj3)*(x511)))+(((IkReal(-1.00000000000000))*(sj2)*(x509)))+(((IkReal(-1.00000000000000))*(cj2)*(x508)))+(((IkReal(-1.00000000000000))*(sj1)*(sj2)*(x510)))+(((IkReal(0.150000000000000))*(sj2)))+(((IkReal(0.510000000000000))*(sj3))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
IkReal x512=((cj1)*(cj2));
IkReal x513=((IkReal(1.00000000000000))*(sj2));
IkReal x514=((cj2)*(sj1));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j3)), IkReal(6.28318530717959))));
evalcond[1]=((((r01)*(x514)))+(((IkReal(-1.00000000000000))*(sj5)))+(((IkReal(-1.00000000000000))*(r02)*(x513)))+(((r00)*(x512))));
evalcond[2]=((IkReal(-0.640000000000000))+(((IkReal(-0.150000000000000))*(cj5)))+(((IkReal(-0.150000000000000))*(cj2)))+(((px)*(x512)))+(((py)*(x514)))+(((IkReal(-0.130000000000000))*(sj5)))+(((IkReal(-1.00000000000000))*(pz)*(x513))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst0;
gconst0=IKsign(cj5);
dummyeval[0]=cj5;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst1;
gconst1=IKsign(((((IkReal(-0.130000000000000))*(cj5)))+(((IkReal(0.150000000000000))*(sj5)))));
dummyeval[0]=((((IkReal(1.15384615384615))*(sj5)))+(((IkReal(-1.00000000000000))*(cj5))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=((((IkReal(1.15384615384615))*(sj5)))+(((IkReal(-1.00000000000000))*(cj5))));
dummyeval[1]=cj5;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x515=((IkReal(1.00000000000000))*(sj2));
if( IKabs(((((IKabs(((((IkReal(-0.130000000000000))*(cj5)))+(((IkReal(0.150000000000000))*(sj5))))) != 0)?((IkReal)1/(((((IkReal(-0.130000000000000))*(cj5)))+(((IkReal(0.150000000000000))*(sj5)))))):(IkReal)1.0e30))*(((((cj1)*(py)))+(((IkReal(-1.00000000000000))*(px)*(sj1))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IKabs(cj5) != 0)?((IkReal)1/(cj5)):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(cj1)*(r00)*(x515)))+(((IkReal(-1.00000000000000))*(r01)*(sj1)*(x515)))+(((IkReal(-1.00000000000000))*(cj2)*(r02))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(((((IkReal(-0.130000000000000))*(cj5)))+(((IkReal(0.150000000000000))*(sj5))))) != 0)?((IkReal)1/(((((IkReal(-0.130000000000000))*(cj5)))+(((IkReal(0.150000000000000))*(sj5)))))):(IkReal)1.0e30))*(((((cj1)*(py)))+(((IkReal(-1.00000000000000))*(px)*(sj1)))))))+IKsqr(((((IKabs(cj5) != 0)?((IkReal)1/(cj5)):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(cj1)*(r00)*(x515)))+(((IkReal(-1.00000000000000))*(r01)*(sj1)*(x515)))+(((IkReal(-1.00000000000000))*(cj2)*(r02)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((IKabs(((((IkReal(-0.130000000000000))*(cj5)))+(((IkReal(0.150000000000000))*(sj5))))) != 0)?((IkReal)1/(((((IkReal(-0.130000000000000))*(cj5)))+(((IkReal(0.150000000000000))*(sj5)))))):(IkReal)1.0e30))*(((((cj1)*(py)))+(((IkReal(-1.00000000000000))*(px)*(sj1)))))), ((((IKabs(cj5) != 0)?((IkReal)1/(cj5)):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(cj1)*(r00)*(x515)))+(((IkReal(-1.00000000000000))*(r01)*(sj1)*(x515)))+(((IkReal(-1.00000000000000))*(cj2)*(r02)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x516=IKsin(j4);
IkReal x517=IKcos(j4);
IkReal x518=((IkReal(1.00000000000000))*(cj1));
IkReal x519=((IkReal(0.150000000000000))*(sj5));
IkReal x520=((IkReal(1.00000000000000))*(cj2));
IkReal x521=((IkReal(1.00000000000000))*(sj1)*(sj2));
IkReal x522=((cj5)*(x516));
IkReal x523=((cj5)*(x517));
evalcond[0]=((((r00)*(sj1)))+(((IkReal(-1.00000000000000))*(r01)*(x518)))+(((IkReal(-1.00000000000000))*(x522))));
evalcond[1]=((((x516)*(x519)))+(((px)*(sj1)))+(((IkReal(-1.00000000000000))*(py)*(x518)))+(((IkReal(-0.130000000000000))*(x522))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x523)))+(((IkReal(-1.00000000000000))*(r01)*(x521)))+(((IkReal(-1.00000000000000))*(r02)*(x520)))+(((IkReal(-1.00000000000000))*(r00)*(sj2)*(x518))));
evalcond[3]=((IkReal(0.814000000000000))+(((x517)*(x519)))+(((IkReal(-1.00000000000000))*(px)*(sj2)*(x518)))+(((IkReal(-1.00000000000000))*(py)*(x521)))+(((IkReal(-1.00000000000000))*(pz)*(x520)))+(((IkReal(0.150000000000000))*(sj2)))+(((IkReal(-0.130000000000000))*(x523))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((gconst1)*(((((cj1)*(py)))+(((IkReal(-1.00000000000000))*(px)*(sj1))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst1)*(((IkReal(-0.814000000000000))+(((cj2)*(pz)))+(((py)*(sj1)*(sj2)))+(((IkReal(-0.150000000000000))*(sj2)))+(((cj1)*(px)*(sj2))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst1)*(((((cj1)*(py)))+(((IkReal(-1.00000000000000))*(px)*(sj1)))))), ((gconst1)*(((IkReal(-0.814000000000000))+(((cj2)*(pz)))+(((py)*(sj1)*(sj2)))+(((IkReal(-0.150000000000000))*(sj2)))+(((cj1)*(px)*(sj2)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x524=IKsin(j4);
IkReal x525=IKcos(j4);
IkReal x526=((IkReal(1.00000000000000))*(cj1));
IkReal x527=((IkReal(0.150000000000000))*(sj5));
IkReal x528=((IkReal(1.00000000000000))*(cj2));
IkReal x529=((IkReal(1.00000000000000))*(sj1)*(sj2));
IkReal x530=((cj5)*(x524));
IkReal x531=((cj5)*(x525));
evalcond[0]=((((r00)*(sj1)))+(((IkReal(-1.00000000000000))*(x530)))+(((IkReal(-1.00000000000000))*(r01)*(x526))));
evalcond[1]=((((x524)*(x527)))+(((IkReal(-1.00000000000000))*(py)*(x526)))+(((px)*(sj1)))+(((IkReal(-0.130000000000000))*(x530))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x531)))+(((IkReal(-1.00000000000000))*(r01)*(x529)))+(((IkReal(-1.00000000000000))*(r02)*(x528)))+(((IkReal(-1.00000000000000))*(r00)*(sj2)*(x526))));
evalcond[3]=((IkReal(0.814000000000000))+(((IkReal(-1.00000000000000))*(px)*(sj2)*(x526)))+(((x525)*(x527)))+(((IkReal(-1.00000000000000))*(py)*(x529)))+(((IkReal(-1.00000000000000))*(pz)*(x528)))+(((IkReal(0.150000000000000))*(sj2)))+(((IkReal(-0.130000000000000))*(x531))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x532=((IkReal(1.00000000000000))*(cj1));
if( IKabs(((gconst0)*(((((r00)*(sj1)))+(((IkReal(-1.00000000000000))*(r01)*(x532))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst0)*(((((IkReal(-1.00000000000000))*(r01)*(sj1)*(sj2)))+(((IkReal(-1.00000000000000))*(cj2)*(r02)))+(((IkReal(-1.00000000000000))*(r00)*(sj2)*(x532))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst0)*(((((r00)*(sj1)))+(((IkReal(-1.00000000000000))*(r01)*(x532)))))), ((gconst0)*(((((IkReal(-1.00000000000000))*(r01)*(sj1)*(sj2)))+(((IkReal(-1.00000000000000))*(cj2)*(r02)))+(((IkReal(-1.00000000000000))*(r00)*(sj2)*(x532)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x533=IKsin(j4);
IkReal x534=IKcos(j4);
IkReal x535=((IkReal(1.00000000000000))*(cj1));
IkReal x536=((IkReal(0.150000000000000))*(sj5));
IkReal x537=((IkReal(1.00000000000000))*(cj2));
IkReal x538=((IkReal(1.00000000000000))*(sj1)*(sj2));
IkReal x539=((cj5)*(x533));
IkReal x540=((cj5)*(x534));
evalcond[0]=((((r00)*(sj1)))+(((IkReal(-1.00000000000000))*(x539)))+(((IkReal(-1.00000000000000))*(r01)*(x535))));
evalcond[1]=((((IkReal(-1.00000000000000))*(py)*(x535)))+(((px)*(sj1)))+(((x533)*(x536)))+(((IkReal(-0.130000000000000))*(x539))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x540)))+(((IkReal(-1.00000000000000))*(r01)*(x538)))+(((IkReal(-1.00000000000000))*(r02)*(x537)))+(((IkReal(-1.00000000000000))*(r00)*(sj2)*(x535))));
evalcond[3]=((IkReal(0.814000000000000))+(((IkReal(-1.00000000000000))*(px)*(sj2)*(x535)))+(((IkReal(-1.00000000000000))*(py)*(x538)))+(((x534)*(x536)))+(((IkReal(-1.00000000000000))*(pz)*(x537)))+(((IkReal(-0.130000000000000))*(x540)))+(((IkReal(0.150000000000000))*(sj2))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
IkReal x541=((cj1)*(cj2));
IkReal x542=((IkReal(1.00000000000000))*(sj2));
IkReal x543=((cj2)*(sj1));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j3)), IkReal(6.28318530717959))));
evalcond[1]=((sj5)+(((IkReal(-1.00000000000000))*(r02)*(x542)))+(((r00)*(x541)))+(((r01)*(x543))));
evalcond[2]=((IkReal(0.640000000000000))+(((py)*(x543)))+(((IkReal(-0.150000000000000))*(cj2)))+(((px)*(x541)))+(((IkReal(0.130000000000000))*(sj5)))+(((IkReal(-1.00000000000000))*(pz)*(x542)))+(((IkReal(0.150000000000000))*(cj5))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst2;
gconst2=IKsign(cj5);
dummyeval[0]=cj5;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst3;
gconst3=IKsign(((((IkReal(-0.130000000000000))*(cj5)))+(((IkReal(0.150000000000000))*(sj5)))));
dummyeval[0]=((((IkReal(1.15384615384615))*(sj5)))+(((IkReal(-1.00000000000000))*(cj5))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=((((IkReal(1.15384615384615))*(sj5)))+(((IkReal(-1.00000000000000))*(cj5))));
dummyeval[1]=cj5;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((((IKabs(((((IkReal(-0.130000000000000))*(cj5)))+(((IkReal(0.150000000000000))*(sj5))))) != 0)?((IkReal)1/(((((IkReal(-0.130000000000000))*(cj5)))+(((IkReal(0.150000000000000))*(sj5)))))):(IkReal)1.0e30))*(((((cj1)*(py)))+(((IkReal(-1.00000000000000))*(px)*(sj1))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IKabs(cj5) != 0)?((IkReal)1/(cj5)):(IkReal)1.0e30))*(((((cj2)*(r02)))+(((cj1)*(r00)*(sj2)))+(((r01)*(sj1)*(sj2))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(((((IkReal(-0.130000000000000))*(cj5)))+(((IkReal(0.150000000000000))*(sj5))))) != 0)?((IkReal)1/(((((IkReal(-0.130000000000000))*(cj5)))+(((IkReal(0.150000000000000))*(sj5)))))):(IkReal)1.0e30))*(((((cj1)*(py)))+(((IkReal(-1.00000000000000))*(px)*(sj1)))))))+IKsqr(((((IKabs(cj5) != 0)?((IkReal)1/(cj5)):(IkReal)1.0e30))*(((((cj2)*(r02)))+(((cj1)*(r00)*(sj2)))+(((r01)*(sj1)*(sj2)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((IKabs(((((IkReal(-0.130000000000000))*(cj5)))+(((IkReal(0.150000000000000))*(sj5))))) != 0)?((IkReal)1/(((((IkReal(-0.130000000000000))*(cj5)))+(((IkReal(0.150000000000000))*(sj5)))))):(IkReal)1.0e30))*(((((cj1)*(py)))+(((IkReal(-1.00000000000000))*(px)*(sj1)))))), ((((IKabs(cj5) != 0)?((IkReal)1/(cj5)):(IkReal)1.0e30))*(((((cj2)*(r02)))+(((cj1)*(r00)*(sj2)))+(((r01)*(sj1)*(sj2)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x544=IKsin(j4);
IkReal x545=IKcos(j4);
IkReal x546=((IkReal(1.00000000000000))*(cj1));
IkReal x547=((IkReal(1.00000000000000))*(cj2));
IkReal x548=((IkReal(0.150000000000000))*(sj5));
IkReal x549=((IkReal(1.00000000000000))*(sj1)*(sj2));
IkReal x550=((cj5)*(x544));
IkReal x551=((cj5)*(x545));
evalcond[0]=((((r00)*(sj1)))+(((IkReal(-1.00000000000000))*(x550)))+(((IkReal(-1.00000000000000))*(r01)*(x546))));
evalcond[1]=((((x544)*(x548)))+(((IkReal(-1.00000000000000))*(py)*(x546)))+(((px)*(sj1)))+(((IkReal(-0.130000000000000))*(x550))));
evalcond[2]=((((IkReal(-1.00000000000000))*(r01)*(x549)))+(((IkReal(-1.00000000000000))*(r02)*(x547)))+(x551)+(((IkReal(-1.00000000000000))*(r00)*(sj2)*(x546))));
evalcond[3]=((IkReal(0.414000000000000))+(((IkReal(-1.00000000000000))*(x545)*(x548)))+(((IkReal(0.130000000000000))*(x551)))+(((IkReal(-1.00000000000000))*(px)*(sj2)*(x546)))+(((IkReal(-1.00000000000000))*(pz)*(x547)))+(((IkReal(-1.00000000000000))*(py)*(x549)))+(((IkReal(0.150000000000000))*(sj2))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x552=((IkReal(1.00000000000000))*(sj2));
if( IKabs(((gconst3)*(((((cj1)*(py)))+(((IkReal(-1.00000000000000))*(px)*(sj1))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst3)*(((IkReal(0.414000000000000))+(((IkReal(-1.00000000000000))*(cj1)*(px)*(x552)))+(((IkReal(-1.00000000000000))*(py)*(sj1)*(x552)))+(((IkReal(-1.00000000000000))*(cj2)*(pz)))+(((IkReal(0.150000000000000))*(sj2))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst3)*(((((cj1)*(py)))+(((IkReal(-1.00000000000000))*(px)*(sj1)))))), ((gconst3)*(((IkReal(0.414000000000000))+(((IkReal(-1.00000000000000))*(cj1)*(px)*(x552)))+(((IkReal(-1.00000000000000))*(py)*(sj1)*(x552)))+(((IkReal(-1.00000000000000))*(cj2)*(pz)))+(((IkReal(0.150000000000000))*(sj2)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x553=IKsin(j4);
IkReal x554=IKcos(j4);
IkReal x555=((IkReal(1.00000000000000))*(cj1));
IkReal x556=((IkReal(1.00000000000000))*(cj2));
IkReal x557=((IkReal(0.150000000000000))*(sj5));
IkReal x558=((IkReal(1.00000000000000))*(sj1)*(sj2));
IkReal x559=((cj5)*(x553));
IkReal x560=((cj5)*(x554));
evalcond[0]=((((r00)*(sj1)))+(((IkReal(-1.00000000000000))*(x559)))+(((IkReal(-1.00000000000000))*(r01)*(x555))));
evalcond[1]=((((px)*(sj1)))+(((IkReal(-1.00000000000000))*(py)*(x555)))+(((IkReal(-0.130000000000000))*(x559)))+(((x553)*(x557))));
evalcond[2]=((((IkReal(-1.00000000000000))*(r01)*(x558)))+(((IkReal(-1.00000000000000))*(r02)*(x556)))+(x560)+(((IkReal(-1.00000000000000))*(r00)*(sj2)*(x555))));
evalcond[3]=((IkReal(0.414000000000000))+(((IkReal(-1.00000000000000))*(x554)*(x557)))+(((IkReal(-1.00000000000000))*(px)*(sj2)*(x555)))+(((IkReal(0.130000000000000))*(x560)))+(((IkReal(-1.00000000000000))*(py)*(x558)))+(((IkReal(-1.00000000000000))*(pz)*(x556)))+(((IkReal(0.150000000000000))*(sj2))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((gconst2)*(((((r00)*(sj1)))+(((IkReal(-1.00000000000000))*(cj1)*(r01))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst2)*(((((cj2)*(r02)))+(((cj1)*(r00)*(sj2)))+(((r01)*(sj1)*(sj2))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst2)*(((((r00)*(sj1)))+(((IkReal(-1.00000000000000))*(cj1)*(r01)))))), ((gconst2)*(((((cj2)*(r02)))+(((cj1)*(r00)*(sj2)))+(((r01)*(sj1)*(sj2)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x561=IKsin(j4);
IkReal x562=IKcos(j4);
IkReal x563=((IkReal(1.00000000000000))*(cj1));
IkReal x564=((IkReal(1.00000000000000))*(cj2));
IkReal x565=((IkReal(0.150000000000000))*(sj5));
IkReal x566=((IkReal(1.00000000000000))*(sj1)*(sj2));
IkReal x567=((cj5)*(x561));
IkReal x568=((cj5)*(x562));
evalcond[0]=((((r00)*(sj1)))+(((IkReal(-1.00000000000000))*(x567)))+(((IkReal(-1.00000000000000))*(r01)*(x563))));
evalcond[1]=((((IkReal(-0.130000000000000))*(x567)))+(((IkReal(-1.00000000000000))*(py)*(x563)))+(((x561)*(x565)))+(((px)*(sj1))));
evalcond[2]=((((IkReal(-1.00000000000000))*(r00)*(sj2)*(x563)))+(x568)+(((IkReal(-1.00000000000000))*(r01)*(x566)))+(((IkReal(-1.00000000000000))*(r02)*(x564))));
evalcond[3]=((IkReal(0.414000000000000))+(((IkReal(-1.00000000000000))*(py)*(x566)))+(((IkReal(-1.00000000000000))*(pz)*(x564)))+(((IkReal(-1.00000000000000))*(x562)*(x565)))+(((IkReal(0.130000000000000))*(x568)))+(((IkReal(0.150000000000000))*(sj2)))+(((IkReal(-1.00000000000000))*(px)*(sj2)*(x563))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
IkReal x569=((IkReal(1.00000000000000))*(cj2));
IkReal x570=((IkReal(1.00000000000000))*(sj2));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j3)), IkReal(6.28318530717959))));
evalcond[1]=((((IkReal(-1.00000000000000))*(r01)*(sj1)*(x570)))+(sj5)+(((IkReal(-1.00000000000000))*(cj1)*(r00)*(x570)))+(((IkReal(-1.00000000000000))*(r02)*(x569))));
evalcond[2]=((IkReal(1.25400000000000))+(((IkReal(-1.00000000000000))*(cj1)*(px)*(x570)))+(((IkReal(-1.00000000000000))*(pz)*(x569)))+(((IkReal(-1.00000000000000))*(py)*(sj1)*(x570)))+(((IkReal(0.130000000000000))*(sj5)))+(((IkReal(0.150000000000000))*(cj5)))+(((IkReal(0.150000000000000))*(sj2))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst4;
gconst4=IKsign(cj5);
dummyeval[0]=cj5;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst5;
gconst5=IKsign(((((IkReal(-0.130000000000000))*(cj5)))+(((IkReal(0.150000000000000))*(sj5)))));
dummyeval[0]=((((IkReal(1.15384615384615))*(sj5)))+(((IkReal(-1.00000000000000))*(cj5))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=((((IkReal(1.15384615384615))*(sj5)))+(((IkReal(-1.00000000000000))*(cj5))));
dummyeval[1]=cj5;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((((IKabs(((((IkReal(-0.130000000000000))*(cj5)))+(((IkReal(0.150000000000000))*(sj5))))) != 0)?((IkReal)1/(((((IkReal(-0.130000000000000))*(cj5)))+(((IkReal(0.150000000000000))*(sj5)))))):(IkReal)1.0e30))*(((((cj1)*(py)))+(((IkReal(-1.00000000000000))*(px)*(sj1))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IKabs(cj5) != 0)?((IkReal)1/(cj5)):(IkReal)1.0e30))*(((((cj2)*(r01)*(sj1)))+(((IkReal(-1.00000000000000))*(r02)*(sj2)))+(((cj1)*(cj2)*(r00))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(((((IkReal(-0.130000000000000))*(cj5)))+(((IkReal(0.150000000000000))*(sj5))))) != 0)?((IkReal)1/(((((IkReal(-0.130000000000000))*(cj5)))+(((IkReal(0.150000000000000))*(sj5)))))):(IkReal)1.0e30))*(((((cj1)*(py)))+(((IkReal(-1.00000000000000))*(px)*(sj1)))))))+IKsqr(((((IKabs(cj5) != 0)?((IkReal)1/(cj5)):(IkReal)1.0e30))*(((((cj2)*(r01)*(sj1)))+(((IkReal(-1.00000000000000))*(r02)*(sj2)))+(((cj1)*(cj2)*(r00)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((IKabs(((((IkReal(-0.130000000000000))*(cj5)))+(((IkReal(0.150000000000000))*(sj5))))) != 0)?((IkReal)1/(((((IkReal(-0.130000000000000))*(cj5)))+(((IkReal(0.150000000000000))*(sj5)))))):(IkReal)1.0e30))*(((((cj1)*(py)))+(((IkReal(-1.00000000000000))*(px)*(sj1)))))), ((((IKabs(cj5) != 0)?((IkReal)1/(cj5)):(IkReal)1.0e30))*(((((cj2)*(r01)*(sj1)))+(((IkReal(-1.00000000000000))*(r02)*(sj2)))+(((cj1)*(cj2)*(r00)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x571=IKsin(j4);
IkReal x572=IKcos(j4);
IkReal x573=((cj1)*(cj2));
IkReal x574=((IkReal(1.00000000000000))*(cj1));
IkReal x575=((IkReal(0.150000000000000))*(sj5));
IkReal x576=((IkReal(1.00000000000000))*(cj5));
IkReal x577=((IkReal(1.00000000000000))*(sj2));
IkReal x578=((IkReal(0.130000000000000))*(cj5));
IkReal x579=((cj2)*(sj1));
evalcond[0]=((((r00)*(sj1)))+(((IkReal(-1.00000000000000))*(r01)*(x574)))+(((IkReal(-1.00000000000000))*(x571)*(x576))));
evalcond[1]=((((x571)*(x575)))+(((IkReal(-1.00000000000000))*(x571)*(x578)))+(((IkReal(-1.00000000000000))*(py)*(x574)))+(((px)*(sj1))));
evalcond[2]=((((r01)*(x579)))+(((r00)*(x573)))+(((IkReal(-1.00000000000000))*(r02)*(x577)))+(((IkReal(-1.00000000000000))*(x572)*(x576))));
evalcond[3]=((IkReal(0.200000000000000))+(((IkReal(-0.150000000000000))*(cj2)))+(((py)*(x579)))+(((px)*(x573)))+(((IkReal(-1.00000000000000))*(pz)*(x577)))+(((x572)*(x575)))+(((IkReal(-1.00000000000000))*(x572)*(x578))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x580=((IkReal(1.00000000000000))*(sj1));
if( IKabs(((gconst5)*(((((IkReal(-1.00000000000000))*(px)*(x580)))+(((cj1)*(py))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst5)*(((IkReal(-0.200000000000000))+(((IkReal(-1.00000000000000))*(cj2)*(py)*(x580)))+(((pz)*(sj2)))+(((IkReal(-1.00000000000000))*(cj1)*(cj2)*(px)))+(((IkReal(0.150000000000000))*(cj2))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst5)*(((((IkReal(-1.00000000000000))*(px)*(x580)))+(((cj1)*(py)))))), ((gconst5)*(((IkReal(-0.200000000000000))+(((IkReal(-1.00000000000000))*(cj2)*(py)*(x580)))+(((pz)*(sj2)))+(((IkReal(-1.00000000000000))*(cj1)*(cj2)*(px)))+(((IkReal(0.150000000000000))*(cj2)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x581=IKsin(j4);
IkReal x582=IKcos(j4);
IkReal x583=((cj1)*(cj2));
IkReal x584=((IkReal(1.00000000000000))*(cj1));
IkReal x585=((IkReal(0.150000000000000))*(sj5));
IkReal x586=((IkReal(1.00000000000000))*(cj5));
IkReal x587=((IkReal(1.00000000000000))*(sj2));
IkReal x588=((IkReal(0.130000000000000))*(cj5));
IkReal x589=((cj2)*(sj1));
evalcond[0]=((((r00)*(sj1)))+(((IkReal(-1.00000000000000))*(r01)*(x584)))+(((IkReal(-1.00000000000000))*(x581)*(x586))));
evalcond[1]=((((x581)*(x585)))+(((IkReal(-1.00000000000000))*(py)*(x584)))+(((px)*(sj1)))+(((IkReal(-1.00000000000000))*(x581)*(x588))));
evalcond[2]=((((IkReal(-1.00000000000000))*(r02)*(x587)))+(((IkReal(-1.00000000000000))*(x582)*(x586)))+(((r01)*(x589)))+(((r00)*(x583))));
evalcond[3]=((IkReal(0.200000000000000))+(((IkReal(-0.150000000000000))*(cj2)))+(((px)*(x583)))+(((IkReal(-1.00000000000000))*(x582)*(x588)))+(((x582)*(x585)))+(((IkReal(-1.00000000000000))*(pz)*(x587)))+(((py)*(x589))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((gconst4)*(((((r00)*(sj1)))+(((IkReal(-1.00000000000000))*(cj1)*(r01))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst4)*(((((cj2)*(r01)*(sj1)))+(((IkReal(-1.00000000000000))*(r02)*(sj2)))+(((cj1)*(cj2)*(r00))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst4)*(((((r00)*(sj1)))+(((IkReal(-1.00000000000000))*(cj1)*(r01)))))), ((gconst4)*(((((cj2)*(r01)*(sj1)))+(((IkReal(-1.00000000000000))*(r02)*(sj2)))+(((cj1)*(cj2)*(r00)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x590=IKsin(j4);
IkReal x591=IKcos(j4);
IkReal x592=((cj1)*(cj2));
IkReal x593=((IkReal(1.00000000000000))*(cj1));
IkReal x594=((IkReal(0.150000000000000))*(sj5));
IkReal x595=((IkReal(1.00000000000000))*(cj5));
IkReal x596=((IkReal(1.00000000000000))*(sj2));
IkReal x597=((IkReal(0.130000000000000))*(cj5));
IkReal x598=((cj2)*(sj1));
evalcond[0]=((((r00)*(sj1)))+(((IkReal(-1.00000000000000))*(r01)*(x593)))+(((IkReal(-1.00000000000000))*(x590)*(x595))));
evalcond[1]=((((IkReal(-1.00000000000000))*(py)*(x593)))+(((IkReal(-1.00000000000000))*(x590)*(x597)))+(((x590)*(x594)))+(((px)*(sj1))));
evalcond[2]=((((r01)*(x598)))+(((r00)*(x592)))+(((IkReal(-1.00000000000000))*(r02)*(x596)))+(((IkReal(-1.00000000000000))*(x591)*(x595))));
evalcond[3]=((IkReal(0.200000000000000))+(((IkReal(-0.150000000000000))*(cj2)))+(((py)*(x598)))+(((IkReal(-1.00000000000000))*(pz)*(x596)))+(((px)*(x592)))+(((x591)*(x594)))+(((IkReal(-1.00000000000000))*(x591)*(x597))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
IkReal x599=((IkReal(1.00000000000000))*(cj2));
IkReal x600=((IkReal(1.00000000000000))*(sj2));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j3)), IkReal(6.28318530717959))));
evalcond[1]=((((IkReal(-1.00000000000000))*(cj1)*(r00)*(x600)))+(((IkReal(-1.00000000000000))*(sj5)))+(((IkReal(-1.00000000000000))*(r02)*(x599)))+(((IkReal(-1.00000000000000))*(r01)*(sj1)*(x600))));
evalcond[2]=((IkReal(-0.0260000000000000))+(((IkReal(-0.150000000000000))*(cj5)))+(((IkReal(-1.00000000000000))*(py)*(sj1)*(x600)))+(((IkReal(-1.00000000000000))*(pz)*(x599)))+(((IkReal(-0.130000000000000))*(sj5)))+(((IkReal(-1.00000000000000))*(cj1)*(px)*(x600)))+(((IkReal(0.150000000000000))*(sj2))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst6;
gconst6=IKsign(cj5);
dummyeval[0]=cj5;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst7;
gconst7=IKsign(((((IkReal(-0.130000000000000))*(cj5)))+(((IkReal(0.150000000000000))*(sj5)))));
dummyeval[0]=((((IkReal(1.15384615384615))*(sj5)))+(((IkReal(-1.00000000000000))*(cj5))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=((((IkReal(1.15384615384615))*(sj5)))+(((IkReal(-1.00000000000000))*(cj5))));
dummyeval[1]=cj5;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x601=((IkReal(1.00000000000000))*(sj1));
if( IKabs(((((IKabs(((((IkReal(-0.130000000000000))*(cj5)))+(((IkReal(0.150000000000000))*(sj5))))) != 0)?((IkReal)1/(((((IkReal(-0.130000000000000))*(cj5)))+(((IkReal(0.150000000000000))*(sj5)))))):(IkReal)1.0e30))*(((((cj1)*(py)))+(((IkReal(-1.00000000000000))*(px)*(x601))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IKabs(cj5) != 0)?((IkReal)1/(cj5)):(IkReal)1.0e30))*(((((r02)*(sj2)))+(((IkReal(-1.00000000000000))*(cj2)*(r01)*(x601)))+(((IkReal(-1.00000000000000))*(cj1)*(cj2)*(r00))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(((((IkReal(-0.130000000000000))*(cj5)))+(((IkReal(0.150000000000000))*(sj5))))) != 0)?((IkReal)1/(((((IkReal(-0.130000000000000))*(cj5)))+(((IkReal(0.150000000000000))*(sj5)))))):(IkReal)1.0e30))*(((((cj1)*(py)))+(((IkReal(-1.00000000000000))*(px)*(x601)))))))+IKsqr(((((IKabs(cj5) != 0)?((IkReal)1/(cj5)):(IkReal)1.0e30))*(((((r02)*(sj2)))+(((IkReal(-1.00000000000000))*(cj2)*(r01)*(x601)))+(((IkReal(-1.00000000000000))*(cj1)*(cj2)*(r00)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((IKabs(((((IkReal(-0.130000000000000))*(cj5)))+(((IkReal(0.150000000000000))*(sj5))))) != 0)?((IkReal)1/(((((IkReal(-0.130000000000000))*(cj5)))+(((IkReal(0.150000000000000))*(sj5)))))):(IkReal)1.0e30))*(((((cj1)*(py)))+(((IkReal(-1.00000000000000))*(px)*(x601)))))), ((((IKabs(cj5) != 0)?((IkReal)1/(cj5)):(IkReal)1.0e30))*(((((r02)*(sj2)))+(((IkReal(-1.00000000000000))*(cj2)*(r01)*(x601)))+(((IkReal(-1.00000000000000))*(cj1)*(cj2)*(r00)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x602=IKsin(j4);
IkReal x603=IKcos(j4);
IkReal x604=((cj1)*(cj2));
IkReal x605=((IkReal(1.00000000000000))*(cj1));
IkReal x606=((IkReal(1.00000000000000))*(sj2));
IkReal x607=((IkReal(0.150000000000000))*(sj5));
IkReal x608=((cj2)*(sj1));
IkReal x609=((cj5)*(x602));
IkReal x610=((cj5)*(x603));
evalcond[0]=((((r00)*(sj1)))+(((IkReal(-1.00000000000000))*(r01)*(x605)))+(((IkReal(-1.00000000000000))*(x609))));
evalcond[1]=((((IkReal(-0.130000000000000))*(x609)))+(((px)*(sj1)))+(((IkReal(-1.00000000000000))*(py)*(x605)))+(((x602)*(x607))));
evalcond[2]=((((r00)*(x604)))+(x610)+(((IkReal(-1.00000000000000))*(r02)*(x606)))+(((r01)*(x608))));
evalcond[3]=((IkReal(-0.200000000000000))+(((IkReal(-0.150000000000000))*(cj2)))+(((IkReal(-1.00000000000000))*(x603)*(x607)))+(((px)*(x604)))+(((py)*(x608)))+(((IkReal(0.130000000000000))*(x610)))+(((IkReal(-1.00000000000000))*(pz)*(x606))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((gconst7)*(((((cj1)*(py)))+(((IkReal(-1.00000000000000))*(px)*(sj1))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst7)*(((IkReal(-0.200000000000000))+(((cj1)*(cj2)*(px)))+(((IkReal(-0.150000000000000))*(cj2)))+(((cj2)*(py)*(sj1)))+(((IkReal(-1.00000000000000))*(pz)*(sj2))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst7)*(((((cj1)*(py)))+(((IkReal(-1.00000000000000))*(px)*(sj1)))))), ((gconst7)*(((IkReal(-0.200000000000000))+(((cj1)*(cj2)*(px)))+(((IkReal(-0.150000000000000))*(cj2)))+(((cj2)*(py)*(sj1)))+(((IkReal(-1.00000000000000))*(pz)*(sj2)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x611=IKsin(j4);
IkReal x612=IKcos(j4);
IkReal x613=((cj1)*(cj2));
IkReal x614=((IkReal(1.00000000000000))*(cj1));
IkReal x615=((IkReal(1.00000000000000))*(sj2));
IkReal x616=((IkReal(0.150000000000000))*(sj5));
IkReal x617=((cj2)*(sj1));
IkReal x618=((cj5)*(x611));
IkReal x619=((cj5)*(x612));
evalcond[0]=((((r00)*(sj1)))+(((IkReal(-1.00000000000000))*(r01)*(x614)))+(((IkReal(-1.00000000000000))*(x618))));
evalcond[1]=((((x611)*(x616)))+(((IkReal(-1.00000000000000))*(py)*(x614)))+(((px)*(sj1)))+(((IkReal(-0.130000000000000))*(x618))));
evalcond[2]=((((r00)*(x613)))+(((r01)*(x617)))+(x619)+(((IkReal(-1.00000000000000))*(r02)*(x615))));
evalcond[3]=((IkReal(-0.200000000000000))+(((IkReal(-1.00000000000000))*(x612)*(x616)))+(((IkReal(-0.150000000000000))*(cj2)))+(((px)*(x613)))+(((IkReal(-1.00000000000000))*(pz)*(x615)))+(((py)*(x617)))+(((IkReal(0.130000000000000))*(x619))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x620=((IkReal(1.00000000000000))*(r01));
if( IKabs(((gconst6)*(((((r00)*(sj1)))+(((IkReal(-1.00000000000000))*(cj1)*(x620))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst6)*(((((IkReal(-1.00000000000000))*(cj2)*(sj1)*(x620)))+(((r02)*(sj2)))+(((IkReal(-1.00000000000000))*(cj1)*(cj2)*(r00))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst6)*(((((r00)*(sj1)))+(((IkReal(-1.00000000000000))*(cj1)*(x620)))))), ((gconst6)*(((((IkReal(-1.00000000000000))*(cj2)*(sj1)*(x620)))+(((r02)*(sj2)))+(((IkReal(-1.00000000000000))*(cj1)*(cj2)*(r00)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x621=IKsin(j4);
IkReal x622=IKcos(j4);
IkReal x623=((cj1)*(cj2));
IkReal x624=((IkReal(1.00000000000000))*(cj1));
IkReal x625=((IkReal(1.00000000000000))*(sj2));
IkReal x626=((IkReal(0.150000000000000))*(sj5));
IkReal x627=((cj2)*(sj1));
IkReal x628=((cj5)*(x621));
IkReal x629=((cj5)*(x622));
evalcond[0]=((((r00)*(sj1)))+(((IkReal(-1.00000000000000))*(r01)*(x624)))+(((IkReal(-1.00000000000000))*(x628))));
evalcond[1]=((((IkReal(-0.130000000000000))*(x628)))+(((px)*(sj1)))+(((x621)*(x626)))+(((IkReal(-1.00000000000000))*(py)*(x624))));
evalcond[2]=((((IkReal(-1.00000000000000))*(r02)*(x625)))+(((r01)*(x627)))+(((r00)*(x623)))+(x629));
evalcond[3]=((IkReal(-0.200000000000000))+(((IkReal(-1.00000000000000))*(pz)*(x625)))+(((IkReal(-0.150000000000000))*(cj2)))+(((py)*(x627)))+(((IkReal(-1.00000000000000))*(x622)*(x626)))+(((IkReal(0.130000000000000))*(x629)))+(((px)*(x623))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((((IKabs(((((IkReal(-0.130000000000000))*(cj5)))+(((IkReal(0.150000000000000))*(sj5))))) != 0)?((IkReal)1/(((((IkReal(-0.130000000000000))*(cj5)))+(((IkReal(0.150000000000000))*(sj5)))))):(IkReal)1.0e30))*(((((cj1)*(py)))+(((IkReal(-1.00000000000000))*(px)*(sj1))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IKabs(cj5) != 0)?((IkReal)1/(cj5)):(IkReal)1.0e30))*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((cj2)*(r01)*(sj1)))+(((IkReal(-1.00000000000000))*(r02)*(sj2)))+(((IkReal(-1.00000000000000))*(cj3)*(sj5)))+(((cj1)*(cj2)*(r00))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(((((IkReal(-0.130000000000000))*(cj5)))+(((IkReal(0.150000000000000))*(sj5))))) != 0)?((IkReal)1/(((((IkReal(-0.130000000000000))*(cj5)))+(((IkReal(0.150000000000000))*(sj5)))))):(IkReal)1.0e30))*(((((cj1)*(py)))+(((IkReal(-1.00000000000000))*(px)*(sj1)))))))+IKsqr(((((IKabs(cj5) != 0)?((IkReal)1/(cj5)):(IkReal)1.0e30))*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((cj2)*(r01)*(sj1)))+(((IkReal(-1.00000000000000))*(r02)*(sj2)))+(((IkReal(-1.00000000000000))*(cj3)*(sj5)))+(((cj1)*(cj2)*(r00)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((IKabs(((((IkReal(-0.130000000000000))*(cj5)))+(((IkReal(0.150000000000000))*(sj5))))) != 0)?((IkReal)1/(((((IkReal(-0.130000000000000))*(cj5)))+(((IkReal(0.150000000000000))*(sj5)))))):(IkReal)1.0e30))*(((((cj1)*(py)))+(((IkReal(-1.00000000000000))*(px)*(sj1)))))), ((((IKabs(cj5) != 0)?((IkReal)1/(cj5)):(IkReal)1.0e30))*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((cj2)*(r01)*(sj1)))+(((IkReal(-1.00000000000000))*(r02)*(sj2)))+(((IkReal(-1.00000000000000))*(cj3)*(sj5)))+(((cj1)*(cj2)*(r00)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x630=IKsin(j4);
IkReal x631=IKcos(j4);
IkReal x632=((cj1)*(cj2));
IkReal x633=((IkReal(1.00000000000000))*(cj2));
IkReal x634=((IkReal(0.150000000000000))*(cj3));
IkReal x635=((cj3)*(sj5));
IkReal x636=((IkReal(0.150000000000000))*(sj5));
IkReal x637=((py)*(sj1));
IkReal x638=((IkReal(1.00000000000000))*(sj2));
IkReal x639=((IkReal(1.00000000000000))*(cj1));
IkReal x640=((r01)*(sj1));
IkReal x641=((sj3)*(sj5));
IkReal x642=((cj5)*(x630));
IkReal x643=((IkReal(1.00000000000000))*(cj5)*(x631));
IkReal x644=((IkReal(0.130000000000000))*(cj5)*(x631));
evalcond[0]=((((r00)*(sj1)))+(((IkReal(-1.00000000000000))*(x642)))+(((IkReal(-1.00000000000000))*(r01)*(x639))));
evalcond[1]=((((px)*(sj1)))+(((x630)*(x636)))+(((IkReal(-0.130000000000000))*(x642)))+(((IkReal(-1.00000000000000))*(py)*(x639))));
evalcond[2]=((((IkReal(-1.00000000000000))*(r02)*(x638)))+(((IkReal(-1.00000000000000))*(sj3)*(x643)))+(((cj2)*(x640)))+(((r00)*(x632)))+(((IkReal(-1.00000000000000))*(x635))));
evalcond[3]=((((IkReal(-1.00000000000000))*(r02)*(x633)))+(((IkReal(-1.00000000000000))*(cj1)*(r00)*(x638)))+(((IkReal(-1.00000000000000))*(cj3)*(x643)))+(x641)+(((IkReal(-1.00000000000000))*(x638)*(x640))));
evalcond[4]=((((IkReal(-1.00000000000000))*(pz)*(x638)))+(((IkReal(-0.150000000000000))*(cj2)))+(((sj3)*(x631)*(x636)))+(((IkReal(-1.00000000000000))*(sj3)*(x644)))+(((IkReal(-0.130000000000000))*(x635)))+(((IkReal(-0.640000000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(cj5)*(x634)))+(((IkReal(0.200000000000000))*(sj3)))+(((cj2)*(x637)))+(((px)*(x632))));
evalcond[5]=((IkReal(0.614000000000000))+(((IkReal(-1.00000000000000))*(pz)*(x633)))+(((IkReal(0.200000000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(x637)*(x638)))+(((IkReal(0.150000000000000))*(cj5)*(sj3)))+(((sj5)*(x631)*(x634)))+(((IkReal(-1.00000000000000))*(cj3)*(x644)))+(((IkReal(0.640000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(cj1)*(px)*(x638)))+(((IkReal(0.130000000000000))*(x641)))+(((IkReal(0.150000000000000))*(sj2))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x645=((IKabs(cj5) != 0)?((IkReal)1/(cj5)):(IkReal)1.0e30);
IkReal x646=((IkReal(1.00000000000000))*(cj1));
if( IKabs(((x645)*(((((r00)*(sj1)))+(((IkReal(-1.00000000000000))*(r01)*(x646))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x645)*(((IKabs(cj3) != 0)?((IkReal)1/(cj3)):(IkReal)1.0e30))*(((((sj3)*(sj5)))+(((IkReal(-1.00000000000000))*(r00)*(sj2)*(x646)))+(((IkReal(-1.00000000000000))*(r01)*(sj1)*(sj2)))+(((IkReal(-1.00000000000000))*(cj2)*(r02))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x645)*(((((r00)*(sj1)))+(((IkReal(-1.00000000000000))*(r01)*(x646)))))))+IKsqr(((x645)*(((IKabs(cj3) != 0)?((IkReal)1/(cj3)):(IkReal)1.0e30))*(((((sj3)*(sj5)))+(((IkReal(-1.00000000000000))*(r00)*(sj2)*(x646)))+(((IkReal(-1.00000000000000))*(r01)*(sj1)*(sj2)))+(((IkReal(-1.00000000000000))*(cj2)*(r02)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x645)*(((((r00)*(sj1)))+(((IkReal(-1.00000000000000))*(r01)*(x646)))))), ((x645)*(((IKabs(cj3) != 0)?((IkReal)1/(cj3)):(IkReal)1.0e30))*(((((sj3)*(sj5)))+(((IkReal(-1.00000000000000))*(r00)*(sj2)*(x646)))+(((IkReal(-1.00000000000000))*(r01)*(sj1)*(sj2)))+(((IkReal(-1.00000000000000))*(cj2)*(r02)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x647=IKsin(j4);
IkReal x648=IKcos(j4);
IkReal x649=((cj1)*(cj2));
IkReal x650=((IkReal(1.00000000000000))*(cj2));
IkReal x651=((IkReal(0.150000000000000))*(cj3));
IkReal x652=((cj3)*(sj5));
IkReal x653=((IkReal(0.150000000000000))*(sj5));
IkReal x654=((py)*(sj1));
IkReal x655=((IkReal(1.00000000000000))*(sj2));
IkReal x656=((IkReal(1.00000000000000))*(cj1));
IkReal x657=((r01)*(sj1));
IkReal x658=((sj3)*(sj5));
IkReal x659=((cj5)*(x647));
IkReal x660=((IkReal(1.00000000000000))*(cj5)*(x648));
IkReal x661=((IkReal(0.130000000000000))*(cj5)*(x648));
evalcond[0]=((((r00)*(sj1)))+(((IkReal(-1.00000000000000))*(x659)))+(((IkReal(-1.00000000000000))*(r01)*(x656))));
evalcond[1]=((((x647)*(x653)))+(((IkReal(-0.130000000000000))*(x659)))+(((px)*(sj1)))+(((IkReal(-1.00000000000000))*(py)*(x656))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x652)))+(((IkReal(-1.00000000000000))*(sj3)*(x660)))+(((cj2)*(x657)))+(((IkReal(-1.00000000000000))*(r02)*(x655)))+(((r00)*(x649))));
evalcond[3]=((((IkReal(-1.00000000000000))*(cj3)*(x660)))+(((IkReal(-1.00000000000000))*(x655)*(x657)))+(((IkReal(-1.00000000000000))*(r02)*(x650)))+(x658)+(((IkReal(-1.00000000000000))*(cj1)*(r00)*(x655))));
evalcond[4]=((((IkReal(-0.130000000000000))*(x652)))+(((IkReal(-0.150000000000000))*(cj2)))+(((sj3)*(x648)*(x653)))+(((IkReal(-1.00000000000000))*(sj3)*(x661)))+(((cj2)*(x654)))+(((IkReal(-0.640000000000000))*(cj3)))+(((px)*(x649)))+(((IkReal(-1.00000000000000))*(pz)*(x655)))+(((IkReal(-1.00000000000000))*(cj5)*(x651)))+(((IkReal(0.200000000000000))*(sj3))));
evalcond[5]=((IkReal(0.614000000000000))+(((IkReal(-1.00000000000000))*(cj3)*(x661)))+(((IkReal(0.200000000000000))*(cj3)))+(((IkReal(0.150000000000000))*(cj5)*(sj3)))+(((IkReal(-1.00000000000000))*(cj1)*(px)*(x655)))+(((IkReal(0.640000000000000))*(sj3)))+(((IkReal(0.130000000000000))*(x658)))+(((sj5)*(x648)*(x651)))+(((IkReal(-1.00000000000000))*(pz)*(x650)))+(((IkReal(0.150000000000000))*(sj2)))+(((IkReal(-1.00000000000000))*(x654)*(x655))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x662=((IKabs(cj5) != 0)?((IkReal)1/(cj5)):(IkReal)1.0e30);
if( IKabs(((x662)*(((((r00)*(sj1)))+(((IkReal(-1.00000000000000))*(cj1)*(r01))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x662)*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((cj2)*(r01)*(sj1)))+(((IkReal(-1.00000000000000))*(r02)*(sj2)))+(((IkReal(-1.00000000000000))*(cj3)*(sj5)))+(((cj1)*(cj2)*(r00))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x662)*(((((r00)*(sj1)))+(((IkReal(-1.00000000000000))*(cj1)*(r01)))))))+IKsqr(((x662)*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((cj2)*(r01)*(sj1)))+(((IkReal(-1.00000000000000))*(r02)*(sj2)))+(((IkReal(-1.00000000000000))*(cj3)*(sj5)))+(((cj1)*(cj2)*(r00)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x662)*(((((r00)*(sj1)))+(((IkReal(-1.00000000000000))*(cj1)*(r01)))))), ((x662)*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((cj2)*(r01)*(sj1)))+(((IkReal(-1.00000000000000))*(r02)*(sj2)))+(((IkReal(-1.00000000000000))*(cj3)*(sj5)))+(((cj1)*(cj2)*(r00)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x663=IKsin(j4);
IkReal x664=IKcos(j4);
IkReal x665=((cj1)*(cj2));
IkReal x666=((IkReal(1.00000000000000))*(cj2));
IkReal x667=((IkReal(0.150000000000000))*(cj3));
IkReal x668=((cj3)*(sj5));
IkReal x669=((IkReal(0.150000000000000))*(sj5));
IkReal x670=((py)*(sj1));
IkReal x671=((IkReal(1.00000000000000))*(sj2));
IkReal x672=((IkReal(1.00000000000000))*(cj1));
IkReal x673=((r01)*(sj1));
IkReal x674=((sj3)*(sj5));
IkReal x675=((cj5)*(x663));
IkReal x676=((IkReal(1.00000000000000))*(cj5)*(x664));
IkReal x677=((IkReal(0.130000000000000))*(cj5)*(x664));
evalcond[0]=((((r00)*(sj1)))+(((IkReal(-1.00000000000000))*(x675)))+(((IkReal(-1.00000000000000))*(r01)*(x672))));
evalcond[1]=((((x663)*(x669)))+(((IkReal(-0.130000000000000))*(x675)))+(((IkReal(-1.00000000000000))*(py)*(x672)))+(((px)*(sj1))));
evalcond[2]=((((IkReal(-1.00000000000000))*(r02)*(x671)))+(((cj2)*(x673)))+(((r00)*(x665)))+(((IkReal(-1.00000000000000))*(x668)))+(((IkReal(-1.00000000000000))*(sj3)*(x676))));
evalcond[3]=((((IkReal(-1.00000000000000))*(cj3)*(x676)))+(((IkReal(-1.00000000000000))*(cj1)*(r00)*(x671)))+(x674)+(((IkReal(-1.00000000000000))*(x671)*(x673)))+(((IkReal(-1.00000000000000))*(r02)*(x666))));
evalcond[4]=((((cj2)*(x670)))+(((IkReal(-0.150000000000000))*(cj2)))+(((sj3)*(x664)*(x669)))+(((px)*(x665)))+(((IkReal(-1.00000000000000))*(pz)*(x671)))+(((IkReal(-0.640000000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(cj5)*(x667)))+(((IkReal(-1.00000000000000))*(sj3)*(x677)))+(((IkReal(-0.130000000000000))*(x668)))+(((IkReal(0.200000000000000))*(sj3))));
evalcond[5]=((IkReal(0.614000000000000))+(((IkReal(-1.00000000000000))*(cj1)*(px)*(x671)))+(((IkReal(-1.00000000000000))*(cj3)*(x677)))+(((IkReal(0.130000000000000))*(x674)))+(((IkReal(0.200000000000000))*(cj3)))+(((IkReal(0.150000000000000))*(cj5)*(sj3)))+(((sj5)*(x664)*(x667)))+(((IkReal(-1.00000000000000))*(x670)*(x671)))+(((IkReal(0.640000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pz)*(x666)))+(((IkReal(0.150000000000000))*(sj2))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x678=(cj3)*(cj3);
IkReal x679=(sj3)*(sj3);
IkReal x680=((IkReal(1.00000000000000))*(r01));
IkReal x681=((sj2)*(sj3));
IkReal x682=((IkReal(0.130000000000000))*(py));
IkReal x683=((cj2)*(cj3));
IkReal x684=((cj2)*(sj3));
IkReal x685=((IkReal(0.130000000000000))*(pz));
IkReal x686=((cj3)*(sj2));
IkReal x687=((sj1)*(x683));
IkReal x688=((IkReal(1.00000000000000))*(cj1)*(r00));
IkReal x689=((IkReal(0.130000000000000))*(cj1)*(px));
IkReal x690=((IKabs(((x678)+(x679))) != 0)?((IkReal)1/(((x678)+(x679)))):(IkReal)1.0e30);
IkReal x691=((((IkReal(-1.00000000000000))*(x681)*(x688)))+(((IkReal(-1.00000000000000))*(x680)*(x687)))+(((IkReal(-1.00000000000000))*(sj1)*(x680)*(x681)))+(((IkReal(-1.00000000000000))*(x683)*(x688)))+(((IkReal(-1.00000000000000))*(r02)*(x684)))+(((r02)*(x686))));
if( IKabs(((IkReal(-1.00000000000000))*(x690)*(x691))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x690)*(((IKabs(((((IkReal(0.0195000000000000))*(x678)))+(((IkReal(0.0195000000000000))*(x679))))) != 0)?((IkReal)1/(((((IkReal(0.0195000000000000))*(x678)))+(((IkReal(0.0195000000000000))*(x679)))))):(IkReal)1.0e30))*(((((((((IkReal(-1.00000000000000))*(x678)))+(((IkReal(-1.00000000000000))*(x679)))))*(((((IkReal(0.0798200000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(x681)*(x689)))+(((IkReal(0.0832000000000000))*(x679)))+(((IkReal(0.0832000000000000))*(x678)))+(((IkReal(0.0195000000000000))*(x683)))+(((IkReal(0.0195000000000000))*(x681)))+(((x685)*(x686)))+(((IkReal(-1.00000000000000))*(sj1)*(x681)*(x682)))+(((IkReal(-1.00000000000000))*(x684)*(x685)))+(((IkReal(-1.00000000000000))*(x682)*(x687)))+(((IkReal(-1.00000000000000))*(x683)*(x689)))))))+(((x691)*(((((IkReal(0.0169000000000000))*(x679)))+(((IkReal(0.0169000000000000))*(x678))))))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.00000000000000))*(x690)*(x691)))+IKsqr(((x690)*(((IKabs(((((IkReal(0.0195000000000000))*(x678)))+(((IkReal(0.0195000000000000))*(x679))))) != 0)?((IkReal)1/(((((IkReal(0.0195000000000000))*(x678)))+(((IkReal(0.0195000000000000))*(x679)))))):(IkReal)1.0e30))*(((((((((IkReal(-1.00000000000000))*(x678)))+(((IkReal(-1.00000000000000))*(x679)))))*(((((IkReal(0.0798200000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(x681)*(x689)))+(((IkReal(0.0832000000000000))*(x679)))+(((IkReal(0.0832000000000000))*(x678)))+(((IkReal(0.0195000000000000))*(x683)))+(((IkReal(0.0195000000000000))*(x681)))+(((x685)*(x686)))+(((IkReal(-1.00000000000000))*(sj1)*(x681)*(x682)))+(((IkReal(-1.00000000000000))*(x684)*(x685)))+(((IkReal(-1.00000000000000))*(x682)*(x687)))+(((IkReal(-1.00000000000000))*(x683)*(x689)))))))+(((x691)*(((((IkReal(0.0169000000000000))*(x679)))+(((IkReal(0.0169000000000000))*(x678)))))))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((IkReal(-1.00000000000000))*(x690)*(x691)), ((x690)*(((IKabs(((((IkReal(0.0195000000000000))*(x678)))+(((IkReal(0.0195000000000000))*(x679))))) != 0)?((IkReal)1/(((((IkReal(0.0195000000000000))*(x678)))+(((IkReal(0.0195000000000000))*(x679)))))):(IkReal)1.0e30))*(((((((((IkReal(-1.00000000000000))*(x678)))+(((IkReal(-1.00000000000000))*(x679)))))*(((((IkReal(0.0798200000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(x681)*(x689)))+(((IkReal(0.0832000000000000))*(x679)))+(((IkReal(0.0832000000000000))*(x678)))+(((IkReal(0.0195000000000000))*(x683)))+(((IkReal(0.0195000000000000))*(x681)))+(((x685)*(x686)))+(((IkReal(-1.00000000000000))*(sj1)*(x681)*(x682)))+(((IkReal(-1.00000000000000))*(x684)*(x685)))+(((IkReal(-1.00000000000000))*(x682)*(x687)))+(((IkReal(-1.00000000000000))*(x683)*(x689)))))))+(((x691)*(((((IkReal(0.0169000000000000))*(x679)))+(((IkReal(0.0169000000000000))*(x678)))))))))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[3];
IkReal x692=(cj3)*(cj3);
IkReal x693=(sj3)*(sj3);
IkReal x694=IKsin(j5);
IkReal x695=IKcos(j5);
IkReal x696=((IkReal(1.00000000000000))*(r01));
IkReal x697=((sj2)*(sj3));
IkReal x698=((IkReal(0.130000000000000))*(py));
IkReal x699=((IkReal(0.150000000000000))*(py));
IkReal x700=((cj2)*(cj3));
IkReal x701=((IkReal(0.150000000000000))*(pz));
IkReal x702=((cj3)*(sj2));
IkReal x703=((cj2)*(sj3));
IkReal x704=((IkReal(0.130000000000000))*(pz));
IkReal x705=((sj1)*(x700));
IkReal x706=((IkReal(1.00000000000000))*(cj1)*(r00));
IkReal x707=((IkReal(0.150000000000000))*(cj1)*(px));
IkReal x708=((IkReal(0.130000000000000))*(cj1)*(px));
IkReal x709=((((IkReal(0.0195000000000000))*(x692)))+(((IkReal(0.0195000000000000))*(x693))));
evalcond[0]=((((x694)*(((x692)+(x693)))))+(((IkReal(-1.00000000000000))*(x696)*(x705)))+(((IkReal(-1.00000000000000))*(sj1)*(x696)*(x697)))+(((IkReal(-1.00000000000000))*(x697)*(x706)))+(((r02)*(x702)))+(((IkReal(-1.00000000000000))*(r02)*(x703)))+(((IkReal(-1.00000000000000))*(x700)*(x706))));
evalcond[1]=((((x694)*(((((IkReal(0.0169000000000000))*(x693)))+(((IkReal(0.0169000000000000))*(x692)))))))+(((IkReal(0.0798200000000000))*(sj3)))+(((x702)*(x704)))+(((IkReal(-1.00000000000000))*(x703)*(x704)))+(((x695)*(x709)))+(((IkReal(0.0195000000000000))*(x700)))+(((IkReal(0.0832000000000000))*(x692)))+(((IkReal(0.0832000000000000))*(x693)))+(((IkReal(-1.00000000000000))*(sj1)*(x697)*(x698)))+(((IkReal(0.0195000000000000))*(x697)))+(((IkReal(-1.00000000000000))*(x698)*(x705)))+(((IkReal(-1.00000000000000))*(x697)*(x708)))+(((IkReal(-1.00000000000000))*(x700)*(x708))));
evalcond[2]=((((IkReal(-0.0921000000000000))*(sj3)))+(((IkReal(-0.0225000000000000))*(x700)))+(((sj1)*(x697)*(x699)))+(((x701)*(x703)))+(((x700)*(x707)))+(((IkReal(-0.0225000000000000))*(x697)))+(((IkReal(-0.0960000000000000))*(x693)))+(((IkReal(-0.0960000000000000))*(x692)))+(((IkReal(-1.00000000000000))*(x694)*(x709)))+(((x695)*(((((IkReal(-0.0225000000000000))*(x693)))+(((IkReal(-0.0225000000000000))*(x692)))))))+(((x697)*(x707)))+(((IkReal(-1.00000000000000))*(x701)*(x702)))+(((x699)*(x705))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[2];
dummyeval[0]=cj5;
dummyeval[1]=sj3;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=cj5;
dummyeval[1]=cj3;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[3];
dummyeval[0]=((((IkReal(1.15384615384615))*(sj5)))+(((IkReal(-1.00000000000000))*(cj5))));
dummyeval[1]=cj5;
dummyeval[2]=sj3;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  || IKabs(dummyeval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(2.42750195497764))+(j5)), IkReal(6.28318530717959))));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=sj3;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=sj3;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=cj3;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[3];
IkReal x710=((IkReal(1.00000000000000))*(cj2));
IkReal x711=((IkReal(1.00000000000000))*(sj2));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j3)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.654930538460049))+(((IkReal(-1.00000000000000))*(r02)*(x710)))+(((IkReal(-1.00000000000000))*(r01)*(sj1)*(x711)))+(((IkReal(-1.00000000000000))*(cj1)*(r00)*(x711))));
evalcond[2]=((IkReal(1.45249433236848))+(((IkReal(-1.00000000000000))*(pz)*(x710)))+(((IkReal(-1.00000000000000))*(py)*(sj1)*(x711)))+(((IkReal(-1.00000000000000))*(cj1)*(px)*(x711)))+(((IkReal(0.150000000000000))*(sj2))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x712=((IkReal(1.32329555000000))*(cj1));
IkReal x713=((IkReal(1.32329555000000))*(sj1));
if( IKabs(((((r00)*(x713)))+(((IkReal(-1.00000000000000))*(r01)*(x712))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((cj2)*(r00)*(x712)))+(((cj2)*(r01)*(x713)))+(((IkReal(-1.32329555000000))*(r02)*(sj2))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((r00)*(x713)))+(((IkReal(-1.00000000000000))*(r01)*(x712)))))+IKsqr(((((cj2)*(r00)*(x712)))+(((cj2)*(r01)*(x713)))+(((IkReal(-1.32329555000000))*(r02)*(sj2)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((r00)*(x713)))+(((IkReal(-1.00000000000000))*(r01)*(x712)))), ((((cj2)*(r00)*(x712)))+(((cj2)*(r01)*(x713)))+(((IkReal(-1.32329555000000))*(r02)*(sj2)))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x714=IKsin(j4);
IkReal x715=IKcos(j4);
IkReal x716=((cj1)*(cj2));
IkReal x717=((IkReal(1.00000000000000))*(cj1));
IkReal x718=((cj2)*(sj1));
IkReal x719=((IkReal(1.00000000000000))*(sj2));
evalcond[0]=((((r00)*(sj1)))+(((IkReal(-1.00000000000000))*(r01)*(x717)))+(((IkReal(-0.755689082457808))*(x714))));
evalcond[1]=((((IkReal(4.94923857682473e-11))*(x714)))+(((px)*(sj1)))+(((IkReal(-1.00000000000000))*(py)*(x717))));
evalcond[2]=((((IkReal(-1.00000000000000))*(r02)*(x719)))+(((r01)*(x718)))+(((r00)*(x716)))+(((IkReal(-0.755689082457808))*(x715))));
evalcond[3]=((IkReal(0.200000000000000))+(((IkReal(-1.00000000000000))*(pz)*(x719)))+(((IkReal(-0.150000000000000))*(cj2)))+(((IkReal(4.94923857682473e-11))*(x715)))+(((px)*(x716)))+(((py)*(x718))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x720=((IkReal(1.00000000000000))*(cj2));
IkReal x721=((IkReal(1.00000000000000))*(sj2));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j3)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-0.654930538460049))+(((IkReal(-1.00000000000000))*(r02)*(x720)))+(((IkReal(-1.00000000000000))*(cj1)*(r00)*(x721)))+(((IkReal(-1.00000000000000))*(r01)*(sj1)*(x721))));
evalcond[2]=((IkReal(-0.224494332368478))+(((IkReal(-1.00000000000000))*(py)*(sj1)*(x721)))+(((IkReal(-1.00000000000000))*(cj1)*(px)*(x721)))+(((IkReal(0.150000000000000))*(sj2)))+(((IkReal(-1.00000000000000))*(pz)*(x720))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x722=((IkReal(1.32329555000000))*(cj1));
IkReal x723=((IkReal(1.32329555000000))*(sj1));
if( IKabs(((((r00)*(x723)))+(((IkReal(-1.00000000000000))*(r01)*(x722))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(1.32329555000000))*(r02)*(sj2)))+(((IkReal(-1.00000000000000))*(cj2)*(r01)*(x723)))+(((IkReal(-1.00000000000000))*(cj2)*(r00)*(x722))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((r00)*(x723)))+(((IkReal(-1.00000000000000))*(r01)*(x722)))))+IKsqr(((((IkReal(1.32329555000000))*(r02)*(sj2)))+(((IkReal(-1.00000000000000))*(cj2)*(r01)*(x723)))+(((IkReal(-1.00000000000000))*(cj2)*(r00)*(x722)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((r00)*(x723)))+(((IkReal(-1.00000000000000))*(r01)*(x722)))), ((((IkReal(1.32329555000000))*(r02)*(sj2)))+(((IkReal(-1.00000000000000))*(cj2)*(r01)*(x723)))+(((IkReal(-1.00000000000000))*(cj2)*(r00)*(x722)))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x724=IKsin(j4);
IkReal x725=IKcos(j4);
IkReal x726=((cj1)*(cj2));
IkReal x727=((IkReal(1.00000000000000))*(cj1));
IkReal x728=((cj2)*(sj1));
IkReal x729=((IkReal(1.00000000000000))*(sj2));
evalcond[0]=((((r00)*(sj1)))+(((IkReal(-0.755689082457808))*(x724)))+(((IkReal(-1.00000000000000))*(r01)*(x727))));
evalcond[1]=((((IkReal(4.94923857682473e-11))*(x724)))+(((px)*(sj1)))+(((IkReal(-1.00000000000000))*(py)*(x727))));
evalcond[2]=((((IkReal(-1.00000000000000))*(r02)*(x729)))+(((IkReal(0.755689082457808))*(x725)))+(((r01)*(x728)))+(((r00)*(x726))));
evalcond[3]=((IkReal(-0.200000000000000))+(((IkReal(-0.150000000000000))*(cj2)))+(((py)*(x728)))+(((px)*(x726)))+(((IkReal(-4.94923857682473e-11))*(x725)))+(((IkReal(-1.00000000000000))*(pz)*(x729))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x730=((cj1)*(cj2));
IkReal x731=((IkReal(1.00000000000000))*(sj2));
IkReal x732=((cj2)*(sj1));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j3)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-0.654930538460049))+(((IkReal(-1.00000000000000))*(r02)*(x731)))+(((r00)*(x730)))+(((r01)*(x732))));
evalcond[2]=((IkReal(-0.838494332368478))+(((IkReal(-0.150000000000000))*(cj2)))+(((px)*(x730)))+(((py)*(x732)))+(((IkReal(-1.00000000000000))*(pz)*(x731))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x733=((IkReal(1.32329555000000))*(cj1));
IkReal x734=((IkReal(1.32329555000000))*(sj1));
if( IKabs(((((IkReal(-1.00000000000000))*(r01)*(x733)))+(((r00)*(x734))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(r01)*(sj2)*(x734)))+(((IkReal(-1.00000000000000))*(r00)*(sj2)*(x733)))+(((IkReal(-1.32329555000000))*(cj2)*(r02))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(r01)*(x733)))+(((r00)*(x734)))))+IKsqr(((((IkReal(-1.00000000000000))*(r01)*(sj2)*(x734)))+(((IkReal(-1.00000000000000))*(r00)*(sj2)*(x733)))+(((IkReal(-1.32329555000000))*(cj2)*(r02)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((IkReal(-1.00000000000000))*(r01)*(x733)))+(((r00)*(x734)))), ((((IkReal(-1.00000000000000))*(r01)*(sj2)*(x734)))+(((IkReal(-1.00000000000000))*(r00)*(sj2)*(x733)))+(((IkReal(-1.32329555000000))*(cj2)*(r02)))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x735=IKsin(j4);
IkReal x736=IKcos(j4);
IkReal x737=((IkReal(1.00000000000000))*(cj1));
IkReal x738=((IkReal(1.00000000000000))*(cj2));
IkReal x739=((IkReal(1.00000000000000))*(sj1)*(sj2));
evalcond[0]=((((IkReal(-1.00000000000000))*(r01)*(x737)))+(((IkReal(-0.755689082457808))*(x735)))+(((r00)*(sj1))));
evalcond[1]=((((IkReal(4.94923857682473e-11))*(x735)))+(((px)*(sj1)))+(((IkReal(-1.00000000000000))*(py)*(x737))));
evalcond[2]=((((IkReal(-1.00000000000000))*(r01)*(x739)))+(((IkReal(-0.755689082457808))*(x736)))+(((IkReal(-1.00000000000000))*(r00)*(sj2)*(x737)))+(((IkReal(-1.00000000000000))*(r02)*(x738))));
evalcond[3]=((IkReal(0.814000000000000))+(((IkReal(-1.00000000000000))*(px)*(sj2)*(x737)))+(((IkReal(4.94923857682473e-11))*(x736)))+(((IkReal(-1.00000000000000))*(pz)*(x738)))+(((IkReal(-1.00000000000000))*(py)*(x739)))+(((IkReal(0.150000000000000))*(sj2))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x740=((cj1)*(cj2));
IkReal x741=((IkReal(1.00000000000000))*(sj2));
IkReal x742=((cj2)*(sj1));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j3)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.654930538460049))+(((IkReal(-1.00000000000000))*(r02)*(x741)))+(((r00)*(x740)))+(((r01)*(x742))));
evalcond[2]=((IkReal(0.838494332368478))+(((py)*(x742)))+(((IkReal(-0.150000000000000))*(cj2)))+(((px)*(x740)))+(((IkReal(-1.00000000000000))*(pz)*(x741))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x743=((IkReal(1.32329555000000))*(cj1));
IkReal x744=((IkReal(1.32329555000000))*(sj1));
if( IKabs(((((r00)*(x744)))+(((IkReal(-1.00000000000000))*(r01)*(x743))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((r00)*(sj2)*(x743)))+(((r01)*(sj2)*(x744)))+(((IkReal(1.32329555000000))*(cj2)*(r02))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((r00)*(x744)))+(((IkReal(-1.00000000000000))*(r01)*(x743)))))+IKsqr(((((r00)*(sj2)*(x743)))+(((r01)*(sj2)*(x744)))+(((IkReal(1.32329555000000))*(cj2)*(r02)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((r00)*(x744)))+(((IkReal(-1.00000000000000))*(r01)*(x743)))), ((((r00)*(sj2)*(x743)))+(((r01)*(sj2)*(x744)))+(((IkReal(1.32329555000000))*(cj2)*(r02)))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x745=IKsin(j4);
IkReal x746=IKcos(j4);
IkReal x747=((IkReal(1.00000000000000))*(cj1));
IkReal x748=((IkReal(1.00000000000000))*(cj2));
IkReal x749=((IkReal(1.00000000000000))*(sj1)*(sj2));
evalcond[0]=((((r00)*(sj1)))+(((IkReal(-1.00000000000000))*(r01)*(x747)))+(((IkReal(-0.755689082457808))*(x745))));
evalcond[1]=((((IkReal(-1.00000000000000))*(py)*(x747)))+(((IkReal(4.94923857682473e-11))*(x745)))+(((px)*(sj1))));
evalcond[2]=((((IkReal(0.755689082457808))*(x746)))+(((IkReal(-1.00000000000000))*(r00)*(sj2)*(x747)))+(((IkReal(-1.00000000000000))*(r02)*(x748)))+(((IkReal(-1.00000000000000))*(r01)*(x749))));
evalcond[3]=((IkReal(0.414000000000000))+(((IkReal(-4.94923857682473e-11))*(x746)))+(((IkReal(-1.00000000000000))*(pz)*(x748)))+(((IkReal(-1.00000000000000))*(py)*(x749)))+(((IkReal(-1.00000000000000))*(px)*(sj2)*(x747)))+(((IkReal(0.150000000000000))*(sj2))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x750=((IkReal(26465911.0000000))*(sj2));
if( IKabs(((((IkReal(1.32329555000000))*(r00)*(sj1)))+(((IkReal(-1.32329555000000))*(cj1)*(r01))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(5.00000000000000e-8))*(((IKabs(cj3) != 0)?((IkReal)1/(cj3)):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(cj1)*(r00)*(x750)))+(((IkReal(-1.00000000000000))*(r01)*(sj1)*(x750)))+(((IkReal(17333333.3420657))*(sj3)))+(((IkReal(-26465911.0000000))*(cj2)*(r02))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(1.32329555000000))*(r00)*(sj1)))+(((IkReal(-1.32329555000000))*(cj1)*(r01)))))+IKsqr(((IkReal(5.00000000000000e-8))*(((IKabs(cj3) != 0)?((IkReal)1/(cj3)):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(cj1)*(r00)*(x750)))+(((IkReal(-1.00000000000000))*(r01)*(sj1)*(x750)))+(((IkReal(17333333.3420657))*(sj3)))+(((IkReal(-26465911.0000000))*(cj2)*(r02)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((IkReal(1.32329555000000))*(r00)*(sj1)))+(((IkReal(-1.32329555000000))*(cj1)*(r01)))), ((IkReal(5.00000000000000e-8))*(((IKabs(cj3) != 0)?((IkReal)1/(cj3)):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(cj1)*(r00)*(x750)))+(((IkReal(-1.00000000000000))*(r01)*(sj1)*(x750)))+(((IkReal(17333333.3420657))*(sj3)))+(((IkReal(-26465911.0000000))*(cj2)*(r02)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x751=IKsin(j4);
IkReal x752=IKcos(j4);
IkReal x753=((cj1)*(cj2));
IkReal x754=((IkReal(1.00000000000000))*(cj2));
IkReal x755=((py)*(sj1));
IkReal x756=((IkReal(1.00000000000000))*(sj2));
IkReal x757=((IkReal(1.00000000000000))*(cj1));
IkReal x758=((r01)*(sj1));
IkReal x759=((IkReal(4.94923857682473e-11))*(x752));
IkReal x760=((IkReal(0.755689082457808))*(x752));
evalcond[0]=((((r00)*(sj1)))+(((IkReal(-1.00000000000000))*(r01)*(x757)))+(((IkReal(-0.755689082457808))*(x751))));
evalcond[1]=((((IkReal(-1.00000000000000))*(py)*(x757)))+(((px)*(sj1)))+(((IkReal(4.94923857682473e-11))*(x751))));
evalcond[2]=((((IkReal(-1.00000000000000))*(r02)*(x756)))+(((cj2)*(x758)))+(((r00)*(x753)))+(((IkReal(-0.654930538460049))*(cj3)))+(((IkReal(-1.00000000000000))*(sj3)*(x760))));
evalcond[3]=((((IkReal(-1.00000000000000))*(cj1)*(r00)*(x756)))+(((IkReal(0.654930538460049))*(sj3)))+(((IkReal(-1.00000000000000))*(cj3)*(x760)))+(((IkReal(-1.00000000000000))*(r02)*(x754)))+(((IkReal(-1.00000000000000))*(x756)*(x758))));
evalcond[4]=((((IkReal(-0.150000000000000))*(cj2)))+(((px)*(x753)))+(((IkReal(-0.838494332368478))*(cj3)))+(((cj2)*(x755)))+(((IkReal(-1.00000000000000))*(pz)*(x756)))+(((sj3)*(x759)))+(((IkReal(0.200000000000000))*(sj3))));
evalcond[5]=((IkReal(0.614000000000000))+(((IkReal(0.838494332368478))*(sj3)))+(((IkReal(-1.00000000000000))*(cj1)*(px)*(x756)))+(((IkReal(0.200000000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(x755)*(x756)))+(((cj3)*(x759)))+(((IkReal(-1.00000000000000))*(pz)*(x754)))+(((IkReal(0.150000000000000))*(sj2))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x761=((IkReal(26465911.0000000))*(cj2));
if( IKabs(((((IkReal(20205128212.7031))*(cj1)*(py)))+(((IkReal(-20205128212.7031))*(px)*(sj1))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(5.00000000000000e-8))*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((IkReal(-17333333.3420657))*(cj3)))+(((cj1)*(r00)*(x761)))+(((r01)*(sj1)*(x761)))+(((IkReal(-26465911.0000000))*(r02)*(sj2))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(20205128212.7031))*(cj1)*(py)))+(((IkReal(-20205128212.7031))*(px)*(sj1)))))+IKsqr(((IkReal(5.00000000000000e-8))*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((IkReal(-17333333.3420657))*(cj3)))+(((cj1)*(r00)*(x761)))+(((r01)*(sj1)*(x761)))+(((IkReal(-26465911.0000000))*(r02)*(sj2)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((IkReal(20205128212.7031))*(cj1)*(py)))+(((IkReal(-20205128212.7031))*(px)*(sj1)))), ((IkReal(5.00000000000000e-8))*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((IkReal(-17333333.3420657))*(cj3)))+(((cj1)*(r00)*(x761)))+(((r01)*(sj1)*(x761)))+(((IkReal(-26465911.0000000))*(r02)*(sj2)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x762=IKsin(j4);
IkReal x763=IKcos(j4);
IkReal x764=((cj1)*(cj2));
IkReal x765=((IkReal(1.00000000000000))*(cj2));
IkReal x766=((py)*(sj1));
IkReal x767=((IkReal(1.00000000000000))*(sj2));
IkReal x768=((IkReal(1.00000000000000))*(cj1));
IkReal x769=((r01)*(sj1));
IkReal x770=((IkReal(4.94923857682473e-11))*(x763));
IkReal x771=((IkReal(0.755689082457808))*(x763));
evalcond[0]=((((r00)*(sj1)))+(((IkReal(-1.00000000000000))*(r01)*(x768)))+(((IkReal(-0.755689082457808))*(x762))));
evalcond[1]=((((IkReal(-1.00000000000000))*(py)*(x768)))+(((px)*(sj1)))+(((IkReal(4.94923857682473e-11))*(x762))));
evalcond[2]=((((IkReal(-1.00000000000000))*(sj3)*(x771)))+(((cj2)*(x769)))+(((IkReal(-1.00000000000000))*(r02)*(x767)))+(((IkReal(-0.654930538460049))*(cj3)))+(((r00)*(x764))));
evalcond[3]=((((IkReal(0.654930538460049))*(sj3)))+(((IkReal(-1.00000000000000))*(cj3)*(x771)))+(((IkReal(-1.00000000000000))*(cj1)*(r00)*(x767)))+(((IkReal(-1.00000000000000))*(x767)*(x769)))+(((IkReal(-1.00000000000000))*(r02)*(x765))));
evalcond[4]=((((cj2)*(x766)))+(((IkReal(-0.150000000000000))*(cj2)))+(((px)*(x764)))+(((IkReal(-0.838494332368478))*(cj3)))+(((sj3)*(x770)))+(((IkReal(0.200000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pz)*(x767))));
evalcond[5]=((IkReal(0.614000000000000))+(((IkReal(0.838494332368478))*(sj3)))+(((IkReal(0.200000000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(x766)*(x767)))+(((cj3)*(x770)))+(((IkReal(-1.00000000000000))*(cj1)*(px)*(x767)))+(((IkReal(0.150000000000000))*(sj2)))+(((IkReal(-1.00000000000000))*(pz)*(x765))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x772=((IkReal(26465911.0000000))*(cj2));
if( IKabs(((((IkReal(1.32329555000000))*(r00)*(sj1)))+(((IkReal(-1.32329555000000))*(cj1)*(r01))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(5.00000000000000e-8))*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((IkReal(-17333333.3420657))*(cj3)))+(((r01)*(sj1)*(x772)))+(((IkReal(-26465911.0000000))*(r02)*(sj2)))+(((cj1)*(r00)*(x772))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(1.32329555000000))*(r00)*(sj1)))+(((IkReal(-1.32329555000000))*(cj1)*(r01)))))+IKsqr(((IkReal(5.00000000000000e-8))*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((IkReal(-17333333.3420657))*(cj3)))+(((r01)*(sj1)*(x772)))+(((IkReal(-26465911.0000000))*(r02)*(sj2)))+(((cj1)*(r00)*(x772)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((IkReal(1.32329555000000))*(r00)*(sj1)))+(((IkReal(-1.32329555000000))*(cj1)*(r01)))), ((IkReal(5.00000000000000e-8))*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((IkReal(-17333333.3420657))*(cj3)))+(((r01)*(sj1)*(x772)))+(((IkReal(-26465911.0000000))*(r02)*(sj2)))+(((cj1)*(r00)*(x772)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x773=IKsin(j4);
IkReal x774=IKcos(j4);
IkReal x775=((cj1)*(cj2));
IkReal x776=((IkReal(1.00000000000000))*(cj2));
IkReal x777=((py)*(sj1));
IkReal x778=((IkReal(1.00000000000000))*(sj2));
IkReal x779=((IkReal(1.00000000000000))*(cj1));
IkReal x780=((r01)*(sj1));
IkReal x781=((IkReal(4.94923857682473e-11))*(x774));
IkReal x782=((IkReal(0.755689082457808))*(x774));
evalcond[0]=((((r00)*(sj1)))+(((IkReal(-1.00000000000000))*(r01)*(x779)))+(((IkReal(-0.755689082457808))*(x773))));
evalcond[1]=((((IkReal(-1.00000000000000))*(py)*(x779)))+(((IkReal(4.94923857682473e-11))*(x773)))+(((px)*(sj1))));
evalcond[2]=((((IkReal(-1.00000000000000))*(r02)*(x778)))+(((r00)*(x775)))+(((IkReal(-1.00000000000000))*(sj3)*(x782)))+(((IkReal(-0.654930538460049))*(cj3)))+(((cj2)*(x780))));
evalcond[3]=((((IkReal(0.654930538460049))*(sj3)))+(((IkReal(-1.00000000000000))*(cj3)*(x782)))+(((IkReal(-1.00000000000000))*(r02)*(x776)))+(((IkReal(-1.00000000000000))*(cj1)*(r00)*(x778)))+(((IkReal(-1.00000000000000))*(x778)*(x780))));
evalcond[4]=((((IkReal(-0.150000000000000))*(cj2)))+(((cj2)*(x777)))+(((IkReal(-0.838494332368478))*(cj3)))+(((px)*(x775)))+(((IkReal(-1.00000000000000))*(pz)*(x778)))+(((IkReal(0.200000000000000))*(sj3)))+(((sj3)*(x781))));
evalcond[5]=((IkReal(0.614000000000000))+(((IkReal(-1.00000000000000))*(cj1)*(px)*(x778)))+(((IkReal(0.838494332368478))*(sj3)))+(((IkReal(0.200000000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(pz)*(x776)))+(((IkReal(-1.00000000000000))*(x777)*(x778)))+(((cj3)*(x781)))+(((IkReal(0.150000000000000))*(sj2))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(-0.714090698612158))+(j5)), IkReal(6.28318530717959))));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=sj3;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=sj3;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=cj3;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[3];
IkReal x783=((IkReal(1.00000000000000))*(cj2));
IkReal x784=((IkReal(1.00000000000000))*(sj2));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j3)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-0.654930538460049))+(((IkReal(-1.00000000000000))*(cj1)*(r00)*(x784)))+(((IkReal(-1.00000000000000))*(r01)*(sj1)*(x784)))+(((IkReal(-1.00000000000000))*(r02)*(x783))));
evalcond[2]=((IkReal(1.05550566763152))+(((IkReal(-1.00000000000000))*(cj1)*(px)*(x784)))+(((IkReal(-1.00000000000000))*(pz)*(x783)))+(((IkReal(0.150000000000000))*(sj2)))+(((IkReal(-1.00000000000000))*(py)*(sj1)*(x784))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x785=((IkReal(1.32329555000000))*(cj1));
IkReal x786=((IkReal(1.32329555000000))*(sj1));
if( IKabs(((((r01)*(x785)))+(((IkReal(-1.00000000000000))*(r00)*(x786))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(1.32329555000000))*(r02)*(sj2)))+(((IkReal(-1.00000000000000))*(cj2)*(r00)*(x785)))+(((IkReal(-1.00000000000000))*(cj2)*(r01)*(x786))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((r01)*(x785)))+(((IkReal(-1.00000000000000))*(r00)*(x786)))))+IKsqr(((((IkReal(1.32329555000000))*(r02)*(sj2)))+(((IkReal(-1.00000000000000))*(cj2)*(r00)*(x785)))+(((IkReal(-1.00000000000000))*(cj2)*(r01)*(x786)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((r01)*(x785)))+(((IkReal(-1.00000000000000))*(r00)*(x786)))), ((((IkReal(1.32329555000000))*(r02)*(sj2)))+(((IkReal(-1.00000000000000))*(cj2)*(r00)*(x785)))+(((IkReal(-1.00000000000000))*(cj2)*(r01)*(x786)))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x787=IKsin(j4);
IkReal x788=IKcos(j4);
IkReal x789=((cj1)*(cj2));
IkReal x790=((IkReal(1.00000000000000))*(cj1));
IkReal x791=((cj2)*(sj1));
IkReal x792=((IkReal(1.00000000000000))*(sj2));
evalcond[0]=((((r00)*(sj1)))+(((IkReal(0.755689082457808))*(x787)))+(((IkReal(-1.00000000000000))*(r01)*(x790))));
evalcond[1]=((((IkReal(-4.94923857682473e-11))*(x787)))+(((px)*(sj1)))+(((IkReal(-1.00000000000000))*(py)*(x790))));
evalcond[2]=((((r00)*(x789)))+(((r01)*(x791)))+(((IkReal(0.755689082457808))*(x788)))+(((IkReal(-1.00000000000000))*(r02)*(x792))));
evalcond[3]=((IkReal(0.200000000000000))+(((IkReal(-0.150000000000000))*(cj2)))+(((IkReal(-4.94923857682473e-11))*(x788)))+(((px)*(x789)))+(((py)*(x791)))+(((IkReal(-1.00000000000000))*(pz)*(x792))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x793=((IkReal(1.00000000000000))*(cj2));
IkReal x794=((IkReal(1.00000000000000))*(sj2));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j3)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.654930538460049))+(((IkReal(-1.00000000000000))*(cj1)*(r00)*(x794)))+(((IkReal(-1.00000000000000))*(r01)*(sj1)*(x794)))+(((IkReal(-1.00000000000000))*(r02)*(x793))));
evalcond[2]=((IkReal(0.172494332368478))+(((IkReal(-1.00000000000000))*(cj1)*(px)*(x794)))+(((IkReal(-1.00000000000000))*(pz)*(x793)))+(((IkReal(-1.00000000000000))*(py)*(sj1)*(x794)))+(((IkReal(0.150000000000000))*(sj2))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x795=((IkReal(1.32329555000000))*(cj1));
IkReal x796=((IkReal(1.32329555000000))*(sj1));
if( IKabs(((((r01)*(x795)))+(((IkReal(-1.00000000000000))*(r00)*(x796))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((cj2)*(r01)*(x796)))+(((cj2)*(r00)*(x795)))+(((IkReal(-1.32329555000000))*(r02)*(sj2))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((r01)*(x795)))+(((IkReal(-1.00000000000000))*(r00)*(x796)))))+IKsqr(((((cj2)*(r01)*(x796)))+(((cj2)*(r00)*(x795)))+(((IkReal(-1.32329555000000))*(r02)*(sj2)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((r01)*(x795)))+(((IkReal(-1.00000000000000))*(r00)*(x796)))), ((((cj2)*(r01)*(x796)))+(((cj2)*(r00)*(x795)))+(((IkReal(-1.32329555000000))*(r02)*(sj2)))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x797=IKsin(j4);
IkReal x798=IKcos(j4);
IkReal x799=((cj1)*(cj2));
IkReal x800=((IkReal(1.00000000000000))*(cj1));
IkReal x801=((cj2)*(sj1));
IkReal x802=((IkReal(1.00000000000000))*(sj2));
evalcond[0]=((((r00)*(sj1)))+(((IkReal(0.755689082457808))*(x797)))+(((IkReal(-1.00000000000000))*(r01)*(x800))));
evalcond[1]=((((IkReal(-4.94923857682473e-11))*(x797)))+(((px)*(sj1)))+(((IkReal(-1.00000000000000))*(py)*(x800))));
evalcond[2]=((((r00)*(x799)))+(((IkReal(-1.00000000000000))*(r02)*(x802)))+(((r01)*(x801)))+(((IkReal(-0.755689082457808))*(x798))));
evalcond[3]=((IkReal(-0.200000000000000))+(((IkReal(-0.150000000000000))*(cj2)))+(((px)*(x799)))+(((IkReal(4.94923857682473e-11))*(x798)))+(((py)*(x801)))+(((IkReal(-1.00000000000000))*(pz)*(x802))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x803=((cj1)*(cj2));
IkReal x804=((IkReal(1.00000000000000))*(sj2));
IkReal x805=((cj2)*(sj1));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j3)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.654930538460049))+(((IkReal(-1.00000000000000))*(r02)*(x804)))+(((r01)*(x805)))+(((r00)*(x803))));
evalcond[2]=((IkReal(-0.441505667631522))+(((IkReal(-0.150000000000000))*(cj2)))+(((px)*(x803)))+(((py)*(x805)))+(((IkReal(-1.00000000000000))*(pz)*(x804))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x806=((IkReal(1.32329555000000))*(cj1));
IkReal x807=((IkReal(1.32329555000000))*(sj1));
if( IKabs(((((IkReal(-1.00000000000000))*(r00)*(x807)))+(((r01)*(x806))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((r00)*(sj2)*(x806)))+(((IkReal(1.32329555000000))*(cj2)*(r02)))+(((r01)*(sj2)*(x807))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(r00)*(x807)))+(((r01)*(x806)))))+IKsqr(((((r00)*(sj2)*(x806)))+(((IkReal(1.32329555000000))*(cj2)*(r02)))+(((r01)*(sj2)*(x807)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((IkReal(-1.00000000000000))*(r00)*(x807)))+(((r01)*(x806)))), ((((r00)*(sj2)*(x806)))+(((IkReal(1.32329555000000))*(cj2)*(r02)))+(((r01)*(sj2)*(x807)))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x808=IKsin(j4);
IkReal x809=IKcos(j4);
IkReal x810=((IkReal(1.00000000000000))*(cj1));
IkReal x811=((IkReal(1.00000000000000))*(cj2));
IkReal x812=((IkReal(1.00000000000000))*(sj1)*(sj2));
evalcond[0]=((((r00)*(sj1)))+(((IkReal(-1.00000000000000))*(r01)*(x810)))+(((IkReal(0.755689082457808))*(x808))));
evalcond[1]=((((IkReal(-4.94923857682473e-11))*(x808)))+(((IkReal(-1.00000000000000))*(py)*(x810)))+(((px)*(sj1))));
evalcond[2]=((((IkReal(-1.00000000000000))*(r00)*(sj2)*(x810)))+(((IkReal(-1.00000000000000))*(r02)*(x811)))+(((IkReal(-1.00000000000000))*(r01)*(x812)))+(((IkReal(0.755689082457808))*(x809))));
evalcond[3]=((IkReal(0.814000000000000))+(((IkReal(-4.94923857682473e-11))*(x809)))+(((IkReal(-1.00000000000000))*(py)*(x812)))+(((IkReal(-1.00000000000000))*(pz)*(x811)))+(((IkReal(-1.00000000000000))*(px)*(sj2)*(x810)))+(((IkReal(0.150000000000000))*(sj2))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x813=((cj1)*(cj2));
IkReal x814=((IkReal(1.00000000000000))*(sj2));
IkReal x815=((cj2)*(sj1));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j3)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-0.654930538460049))+(((r01)*(x815)))+(((r00)*(x813)))+(((IkReal(-1.00000000000000))*(r02)*(x814))));
evalcond[2]=((IkReal(0.441505667631522))+(((IkReal(-0.150000000000000))*(cj2)))+(((py)*(x815)))+(((px)*(x813)))+(((IkReal(-1.00000000000000))*(pz)*(x814))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x816=((IkReal(1.32329555000000))*(cj1));
IkReal x817=((IkReal(1.32329555000000))*(sj1));
if( IKabs(((((r01)*(x816)))+(((IkReal(-1.00000000000000))*(r00)*(x817))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(r01)*(sj2)*(x817)))+(((IkReal(-1.00000000000000))*(r00)*(sj2)*(x816)))+(((IkReal(-1.32329555000000))*(cj2)*(r02))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((r01)*(x816)))+(((IkReal(-1.00000000000000))*(r00)*(x817)))))+IKsqr(((((IkReal(-1.00000000000000))*(r01)*(sj2)*(x817)))+(((IkReal(-1.00000000000000))*(r00)*(sj2)*(x816)))+(((IkReal(-1.32329555000000))*(cj2)*(r02)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((r01)*(x816)))+(((IkReal(-1.00000000000000))*(r00)*(x817)))), ((((IkReal(-1.00000000000000))*(r01)*(sj2)*(x817)))+(((IkReal(-1.00000000000000))*(r00)*(sj2)*(x816)))+(((IkReal(-1.32329555000000))*(cj2)*(r02)))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x818=IKsin(j4);
IkReal x819=IKcos(j4);
IkReal x820=((IkReal(1.00000000000000))*(cj1));
IkReal x821=((IkReal(1.00000000000000))*(cj2));
IkReal x822=((IkReal(1.00000000000000))*(sj1)*(sj2));
evalcond[0]=((((IkReal(-1.00000000000000))*(r01)*(x820)))+(((r00)*(sj1)))+(((IkReal(0.755689082457808))*(x818))));
evalcond[1]=((((IkReal(-1.00000000000000))*(py)*(x820)))+(((px)*(sj1)))+(((IkReal(-4.94923857682473e-11))*(x818))));
evalcond[2]=((((IkReal(-0.755689082457808))*(x819)))+(((IkReal(-1.00000000000000))*(r02)*(x821)))+(((IkReal(-1.00000000000000))*(r01)*(x822)))+(((IkReal(-1.00000000000000))*(r00)*(sj2)*(x820))));
evalcond[3]=((IkReal(0.414000000000000))+(((IkReal(-1.00000000000000))*(pz)*(x821)))+(((IkReal(-1.00000000000000))*(py)*(x822)))+(((IkReal(-1.00000000000000))*(px)*(sj2)*(x820)))+(((IkReal(0.150000000000000))*(sj2)))+(((IkReal(4.94923857682473e-11))*(x819))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x823=((IkReal(26465911.0000000))*(sj2));
if( IKabs(((((IkReal(-1.32329555000000))*(r00)*(sj1)))+(((IkReal(1.32329555000000))*(cj1)*(r01))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(5.00000000000000e-8))*(((IKabs(cj3) != 0)?((IkReal)1/(cj3)):(IkReal)1.0e30))*(((((IkReal(26465911.0000000))*(cj2)*(r02)))+(((r01)*(sj1)*(x823)))+(((IkReal(17333333.3420657))*(sj3)))+(((cj1)*(r00)*(x823))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.32329555000000))*(r00)*(sj1)))+(((IkReal(1.32329555000000))*(cj1)*(r01)))))+IKsqr(((IkReal(5.00000000000000e-8))*(((IKabs(cj3) != 0)?((IkReal)1/(cj3)):(IkReal)1.0e30))*(((((IkReal(26465911.0000000))*(cj2)*(r02)))+(((r01)*(sj1)*(x823)))+(((IkReal(17333333.3420657))*(sj3)))+(((cj1)*(r00)*(x823)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((IkReal(-1.32329555000000))*(r00)*(sj1)))+(((IkReal(1.32329555000000))*(cj1)*(r01)))), ((IkReal(5.00000000000000e-8))*(((IKabs(cj3) != 0)?((IkReal)1/(cj3)):(IkReal)1.0e30))*(((((IkReal(26465911.0000000))*(cj2)*(r02)))+(((r01)*(sj1)*(x823)))+(((IkReal(17333333.3420657))*(sj3)))+(((cj1)*(r00)*(x823)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x824=IKsin(j4);
IkReal x825=IKcos(j4);
IkReal x826=((cj1)*(cj2));
IkReal x827=((IkReal(1.00000000000000))*(cj2));
IkReal x828=((py)*(sj1));
IkReal x829=((IkReal(1.00000000000000))*(sj2));
IkReal x830=((IkReal(1.00000000000000))*(cj1));
IkReal x831=((r01)*(sj1));
IkReal x832=((IkReal(4.94923857682473e-11))*(x825));
IkReal x833=((IkReal(0.755689082457808))*(x825));
evalcond[0]=((((r00)*(sj1)))+(((IkReal(0.755689082457808))*(x824)))+(((IkReal(-1.00000000000000))*(r01)*(x830))));
evalcond[1]=((((IkReal(-1.00000000000000))*(py)*(x830)))+(((px)*(sj1)))+(((IkReal(-4.94923857682473e-11))*(x824))));
evalcond[2]=((((IkReal(-1.00000000000000))*(r02)*(x829)))+(((r00)*(x826)))+(((sj3)*(x833)))+(((cj2)*(x831)))+(((IkReal(0.654930538460049))*(cj3))));
evalcond[3]=((((IkReal(-1.00000000000000))*(r02)*(x827)))+(((IkReal(-0.654930538460049))*(sj3)))+(((cj3)*(x833)))+(((IkReal(-1.00000000000000))*(cj1)*(r00)*(x829)))+(((IkReal(-1.00000000000000))*(x829)*(x831))));
evalcond[4]=((((IkReal(-0.150000000000000))*(cj2)))+(((IkReal(-1.00000000000000))*(pz)*(x829)))+(((px)*(x826)))+(((IkReal(-0.441505667631522))*(cj3)))+(((IkReal(0.200000000000000))*(sj3)))+(((cj2)*(x828)))+(((IkReal(-1.00000000000000))*(sj3)*(x832))));
evalcond[5]=((IkReal(0.614000000000000))+(((IkReal(0.441505667631522))*(sj3)))+(((IkReal(-1.00000000000000))*(x828)*(x829)))+(((IkReal(-1.00000000000000))*(pz)*(x827)))+(((IkReal(0.200000000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(cj1)*(px)*(x829)))+(((IkReal(0.150000000000000))*(sj2)))+(((IkReal(-1.00000000000000))*(cj3)*(x832))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x834=((IkReal(26465911.0000000))*(cj2));
if( IKabs(((((IkReal(20205128212.7031))*(px)*(sj1)))+(((IkReal(-20205128212.7031))*(cj1)*(py))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(5.00000000000000e-8))*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((IkReal(-17333333.3420657))*(cj3)))+(((IkReal(-1.00000000000000))*(cj1)*(r00)*(x834)))+(((IkReal(-1.00000000000000))*(r01)*(sj1)*(x834)))+(((IkReal(26465911.0000000))*(r02)*(sj2))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(20205128212.7031))*(px)*(sj1)))+(((IkReal(-20205128212.7031))*(cj1)*(py)))))+IKsqr(((IkReal(5.00000000000000e-8))*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((IkReal(-17333333.3420657))*(cj3)))+(((IkReal(-1.00000000000000))*(cj1)*(r00)*(x834)))+(((IkReal(-1.00000000000000))*(r01)*(sj1)*(x834)))+(((IkReal(26465911.0000000))*(r02)*(sj2)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((IkReal(20205128212.7031))*(px)*(sj1)))+(((IkReal(-20205128212.7031))*(cj1)*(py)))), ((IkReal(5.00000000000000e-8))*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((IkReal(-17333333.3420657))*(cj3)))+(((IkReal(-1.00000000000000))*(cj1)*(r00)*(x834)))+(((IkReal(-1.00000000000000))*(r01)*(sj1)*(x834)))+(((IkReal(26465911.0000000))*(r02)*(sj2)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x835=IKsin(j4);
IkReal x836=IKcos(j4);
IkReal x837=((cj1)*(cj2));
IkReal x838=((IkReal(1.00000000000000))*(cj2));
IkReal x839=((py)*(sj1));
IkReal x840=((IkReal(1.00000000000000))*(sj2));
IkReal x841=((IkReal(1.00000000000000))*(cj1));
IkReal x842=((r01)*(sj1));
IkReal x843=((IkReal(4.94923857682473e-11))*(x836));
IkReal x844=((IkReal(0.755689082457808))*(x836));
evalcond[0]=((((r00)*(sj1)))+(((IkReal(0.755689082457808))*(x835)))+(((IkReal(-1.00000000000000))*(r01)*(x841))));
evalcond[1]=((((IkReal(-1.00000000000000))*(py)*(x841)))+(((px)*(sj1)))+(((IkReal(-4.94923857682473e-11))*(x835))));
evalcond[2]=((((IkReal(-1.00000000000000))*(r02)*(x840)))+(((r00)*(x837)))+(((cj2)*(x842)))+(((sj3)*(x844)))+(((IkReal(0.654930538460049))*(cj3))));
evalcond[3]=((((IkReal(-1.00000000000000))*(cj1)*(r00)*(x840)))+(((IkReal(-1.00000000000000))*(r02)*(x838)))+(((IkReal(-0.654930538460049))*(sj3)))+(((IkReal(-1.00000000000000))*(x840)*(x842)))+(((cj3)*(x844))));
evalcond[4]=((((IkReal(-1.00000000000000))*(sj3)*(x843)))+(((IkReal(-0.150000000000000))*(cj2)))+(((IkReal(-1.00000000000000))*(pz)*(x840)))+(((cj2)*(x839)))+(((IkReal(-0.441505667631522))*(cj3)))+(((IkReal(0.200000000000000))*(sj3)))+(((px)*(x837))));
evalcond[5]=((IkReal(0.614000000000000))+(((IkReal(0.441505667631522))*(sj3)))+(((IkReal(-1.00000000000000))*(pz)*(x838)))+(((IkReal(0.200000000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(cj1)*(px)*(x840)))+(((IkReal(-1.00000000000000))*(x839)*(x840)))+(((IkReal(0.150000000000000))*(sj2)))+(((IkReal(-1.00000000000000))*(cj3)*(x843))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x845=((IkReal(26465911.0000000))*(cj2));
if( IKabs(((((IkReal(-1.32329555000000))*(r00)*(sj1)))+(((IkReal(1.32329555000000))*(cj1)*(r01))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(5.00000000000000e-8))*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(cj1)*(r00)*(x845)))+(((IkReal(-17333333.3420657))*(cj3)))+(((IkReal(-1.00000000000000))*(r01)*(sj1)*(x845)))+(((IkReal(26465911.0000000))*(r02)*(sj2))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.32329555000000))*(r00)*(sj1)))+(((IkReal(1.32329555000000))*(cj1)*(r01)))))+IKsqr(((IkReal(5.00000000000000e-8))*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(cj1)*(r00)*(x845)))+(((IkReal(-17333333.3420657))*(cj3)))+(((IkReal(-1.00000000000000))*(r01)*(sj1)*(x845)))+(((IkReal(26465911.0000000))*(r02)*(sj2)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((IkReal(-1.32329555000000))*(r00)*(sj1)))+(((IkReal(1.32329555000000))*(cj1)*(r01)))), ((IkReal(5.00000000000000e-8))*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(cj1)*(r00)*(x845)))+(((IkReal(-17333333.3420657))*(cj3)))+(((IkReal(-1.00000000000000))*(r01)*(sj1)*(x845)))+(((IkReal(26465911.0000000))*(r02)*(sj2)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x846=IKsin(j4);
IkReal x847=IKcos(j4);
IkReal x848=((cj1)*(cj2));
IkReal x849=((IkReal(1.00000000000000))*(cj2));
IkReal x850=((py)*(sj1));
IkReal x851=((IkReal(1.00000000000000))*(sj2));
IkReal x852=((IkReal(1.00000000000000))*(cj1));
IkReal x853=((r01)*(sj1));
IkReal x854=((IkReal(4.94923857682473e-11))*(x847));
IkReal x855=((IkReal(0.755689082457808))*(x847));
evalcond[0]=((((r00)*(sj1)))+(((IkReal(-1.00000000000000))*(r01)*(x852)))+(((IkReal(0.755689082457808))*(x846))));
evalcond[1]=((((IkReal(-4.94923857682473e-11))*(x846)))+(((IkReal(-1.00000000000000))*(py)*(x852)))+(((px)*(sj1))));
evalcond[2]=((((cj2)*(x853)))+(((sj3)*(x855)))+(((r00)*(x848)))+(((IkReal(-1.00000000000000))*(r02)*(x851)))+(((IkReal(0.654930538460049))*(cj3))));
evalcond[3]=((((IkReal(-1.00000000000000))*(r02)*(x849)))+(((IkReal(-0.654930538460049))*(sj3)))+(((cj3)*(x855)))+(((IkReal(-1.00000000000000))*(cj1)*(r00)*(x851)))+(((IkReal(-1.00000000000000))*(x851)*(x853))));
evalcond[4]=((((IkReal(-0.150000000000000))*(cj2)))+(((cj2)*(x850)))+(((IkReal(-1.00000000000000))*(sj3)*(x854)))+(((IkReal(-1.00000000000000))*(pz)*(x851)))+(((IkReal(-0.441505667631522))*(cj3)))+(((IkReal(0.200000000000000))*(sj3)))+(((px)*(x848))));
evalcond[5]=((IkReal(0.614000000000000))+(((IkReal(0.441505667631522))*(sj3)))+(((IkReal(0.200000000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(pz)*(x849)))+(((IkReal(-1.00000000000000))*(x850)*(x851)))+(((IkReal(-1.00000000000000))*(cj1)*(px)*(x851)))+(((IkReal(-1.00000000000000))*(cj3)*(x854)))+(((IkReal(0.150000000000000))*(sj2))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
IkReal x856=((cj1)*(r00));
IkReal x857=((IkReal(1.00000000000000))*(r01));
IkReal x858=((IkReal(1.00000000000000))*(sj2));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j5)), IkReal(6.28318530717959))));
evalcond[1]=((((r00)*(sj1)))+(((IkReal(-1.00000000000000))*(cj1)*(x857))));
evalcond[2]=((((cj2)*(x856)))+(((cj2)*(r01)*(sj1)))+(((IkReal(-1.00000000000000))*(r02)*(x858)))+(((IkReal(-1.00000000000000))*(cj3))));
evalcond[3]=((sj3)+(((IkReal(-1.00000000000000))*(sj1)*(sj2)*(x857)))+(((IkReal(-1.00000000000000))*(x856)*(x858)))+(((IkReal(-1.00000000000000))*(cj2)*(r02))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=sj3;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=cj3;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
IkReal x859=((cj1)*(r00));
IkReal x860=((IkReal(1.00000000000000))*(cj1));
IkReal x861=((IkReal(1.00000000000000))*(cj2));
IkReal x862=((IkReal(1.00000000000000))*(sj2));
IkReal x863=((r01)*(sj1));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j3)), IkReal(6.28318530717959))));
evalcond[1]=((((r00)*(sj1)))+(((IkReal(-1.00000000000000))*(r01)*(x860))));
evalcond[2]=((((cj2)*(x863)))+(((cj2)*(x859)))+(((IkReal(-1.00000000000000))*(r02)*(x862))));
evalcond[3]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(x862)*(x863)))+(((IkReal(-1.00000000000000))*(r02)*(x861)))+(((IkReal(-1.00000000000000))*(x859)*(x862))));
evalcond[4]=((IkReal(1.38400000000000))+(((IkReal(-1.00000000000000))*(px)*(sj2)*(x860)))+(((IkReal(-1.00000000000000))*(pz)*(x861)))+(((IkReal(-1.00000000000000))*(py)*(sj1)*(x862)))+(((IkReal(0.150000000000000))*(sj2))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x864=((IkReal(6.66666666666667))*(py));
IkReal x865=((IkReal(6.66666666666667))*(px));
if( IKabs(((((IkReal(-1.00000000000000))*(sj1)*(x865)))+(((cj1)*(x864))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.33333333333333))+(cj2)+(((IkReal(-1.00000000000000))*(cj1)*(cj2)*(x865)))+(((IkReal(6.66666666666667))*(pz)*(sj2)))+(((IkReal(-1.00000000000000))*(cj2)*(sj1)*(x864))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(sj1)*(x865)))+(((cj1)*(x864)))))+IKsqr(((IkReal(-1.33333333333333))+(cj2)+(((IkReal(-1.00000000000000))*(cj1)*(cj2)*(x865)))+(((IkReal(6.66666666666667))*(pz)*(sj2)))+(((IkReal(-1.00000000000000))*(cj2)*(sj1)*(x864)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((IkReal(-1.00000000000000))*(sj1)*(x865)))+(((cj1)*(x864)))), ((IkReal(-1.33333333333333))+(cj2)+(((IkReal(-1.00000000000000))*(cj1)*(cj2)*(x865)))+(((IkReal(6.66666666666667))*(pz)*(sj2)))+(((IkReal(-1.00000000000000))*(cj2)*(sj1)*(x864)))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((((IkReal(-1.00000000000000))*(cj1)*(py)))+(((px)*(sj1)))+(((IkReal(0.150000000000000))*(IKsin(j4)))));
evalcond[1]=((IkReal(0.200000000000000))+(((cj1)*(cj2)*(px)))+(((IkReal(-0.150000000000000))*(cj2)))+(((cj2)*(py)*(sj1)))+(((IkReal(0.150000000000000))*(IKcos(j4))))+(((IkReal(-1.00000000000000))*(pz)*(sj2))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x866=((cj1)*(r00));
IkReal x867=((IkReal(1.00000000000000))*(cj1));
IkReal x868=((IkReal(1.00000000000000))*(cj2));
IkReal x869=((IkReal(1.00000000000000))*(sj2));
IkReal x870=((r01)*(sj1));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j3)), IkReal(6.28318530717959))));
evalcond[1]=((((r00)*(sj1)))+(((IkReal(-1.00000000000000))*(r01)*(x867))));
evalcond[2]=((((cj2)*(x870)))+(((cj2)*(x866)))+(((IkReal(-1.00000000000000))*(r02)*(x869))));
evalcond[3]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(x866)*(x869)))+(((IkReal(-1.00000000000000))*(x869)*(x870)))+(((IkReal(-1.00000000000000))*(r02)*(x868))));
evalcond[4]=((IkReal(-0.156000000000000))+(((IkReal(-1.00000000000000))*(px)*(sj2)*(x867)))+(((IkReal(-1.00000000000000))*(pz)*(x868)))+(((IkReal(-1.00000000000000))*(py)*(sj1)*(x869)))+(((IkReal(0.150000000000000))*(sj2))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x871=((IkReal(6.66666666666667))*(px));
IkReal x872=((IkReal(6.66666666666667))*(py));
if( IKabs(((((IkReal(-1.00000000000000))*(sj1)*(x871)))+(((cj1)*(x872))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.33333333333333))+(((cj1)*(cj2)*(x871)))+(((cj2)*(sj1)*(x872)))+(((IkReal(-6.66666666666667))*(pz)*(sj2)))+(((IkReal(-1.00000000000000))*(cj2))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(sj1)*(x871)))+(((cj1)*(x872)))))+IKsqr(((IkReal(-1.33333333333333))+(((cj1)*(cj2)*(x871)))+(((cj2)*(sj1)*(x872)))+(((IkReal(-6.66666666666667))*(pz)*(sj2)))+(((IkReal(-1.00000000000000))*(cj2)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((IkReal(-1.00000000000000))*(sj1)*(x871)))+(((cj1)*(x872)))), ((IkReal(-1.33333333333333))+(((cj1)*(cj2)*(x871)))+(((cj2)*(sj1)*(x872)))+(((IkReal(-6.66666666666667))*(pz)*(sj2)))+(((IkReal(-1.00000000000000))*(cj2)))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((((IkReal(-1.00000000000000))*(cj1)*(py)))+(((px)*(sj1)))+(((IkReal(0.150000000000000))*(IKsin(j4)))));
evalcond[1]=((IkReal(-0.200000000000000))+(((cj1)*(cj2)*(px)))+(((IkReal(-0.150000000000000))*(cj2)))+(((IkReal(-0.150000000000000))*(IKcos(j4))))+(((cj2)*(py)*(sj1)))+(((IkReal(-1.00000000000000))*(pz)*(sj2))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x873=((cj1)*(cj2));
IkReal x874=((IkReal(1.00000000000000))*(cj1));
IkReal x875=((cj2)*(sj1));
IkReal x876=((IkReal(1.00000000000000))*(r02));
IkReal x877=((IkReal(1.00000000000000))*(sj2));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j3)), IkReal(6.28318530717959))));
evalcond[1]=((((r00)*(sj1)))+(((IkReal(-1.00000000000000))*(r01)*(x874))));
evalcond[2]=((IkReal(-1.00000000000000))+(((r01)*(x875)))+(((r00)*(x873)))+(((IkReal(-1.00000000000000))*(sj2)*(x876))));
evalcond[3]=((((IkReal(-1.00000000000000))*(cj2)*(x876)))+(((IkReal(-1.00000000000000))*(r00)*(sj2)*(x874)))+(((IkReal(-1.00000000000000))*(r01)*(sj1)*(x877))));
evalcond[4]=((IkReal(-0.770000000000000))+(((IkReal(-0.150000000000000))*(cj2)))+(((IkReal(-1.00000000000000))*(pz)*(x877)))+(((px)*(x873)))+(((py)*(x875))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x878=((IkReal(6.66666666666667))*(sj1));
IkReal x879=((IkReal(6.66666666666667))*(cj1));
if( IKabs(((((py)*(x879)))+(((IkReal(-1.00000000000000))*(px)*(x878))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-5.42666666666667))+(((IkReal(-1.00000000000000))*(sj2)))+(((py)*(sj2)*(x878)))+(((IkReal(6.66666666666667))*(cj2)*(pz)))+(((px)*(sj2)*(x879))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((py)*(x879)))+(((IkReal(-1.00000000000000))*(px)*(x878)))))+IKsqr(((IkReal(-5.42666666666667))+(((IkReal(-1.00000000000000))*(sj2)))+(((py)*(sj2)*(x878)))+(((IkReal(6.66666666666667))*(cj2)*(pz)))+(((px)*(sj2)*(x879)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((py)*(x879)))+(((IkReal(-1.00000000000000))*(px)*(x878)))), ((IkReal(-5.42666666666667))+(((IkReal(-1.00000000000000))*(sj2)))+(((py)*(sj2)*(x878)))+(((IkReal(6.66666666666667))*(cj2)*(pz)))+(((px)*(sj2)*(x879)))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x880=((IkReal(1.00000000000000))*(sj2));
evalcond[0]=((((IkReal(-1.00000000000000))*(cj1)*(py)))+(((px)*(sj1)))+(((IkReal(0.150000000000000))*(IKsin(j4)))));
evalcond[1]=((IkReal(0.814000000000000))+(((IkReal(-1.00000000000000))*(py)*(sj1)*(x880)))+(((IkReal(0.150000000000000))*(IKcos(j4))))+(((IkReal(-1.00000000000000))*(cj2)*(pz)))+(((IkReal(-1.00000000000000))*(cj1)*(px)*(x880)))+(((IkReal(0.150000000000000))*(sj2))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x881=((cj1)*(cj2));
IkReal x882=((IkReal(1.00000000000000))*(cj1));
IkReal x883=((cj2)*(sj1));
IkReal x884=((IkReal(1.00000000000000))*(r02));
IkReal x885=((IkReal(1.00000000000000))*(sj2));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j3)), IkReal(6.28318530717959))));
evalcond[1]=((((r00)*(sj1)))+(((IkReal(-1.00000000000000))*(r01)*(x882))));
evalcond[2]=((IkReal(1.00000000000000))+(((r00)*(x881)))+(((r01)*(x883)))+(((IkReal(-1.00000000000000))*(sj2)*(x884))));
evalcond[3]=((((IkReal(-1.00000000000000))*(cj2)*(x884)))+(((IkReal(-1.00000000000000))*(r01)*(sj1)*(x885)))+(((IkReal(-1.00000000000000))*(r00)*(sj2)*(x882))));
evalcond[4]=((IkReal(0.770000000000000))+(((IkReal(-0.150000000000000))*(cj2)))+(((px)*(x881)))+(((py)*(x883)))+(((IkReal(-1.00000000000000))*(pz)*(x885))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x886=((IkReal(6.66666666666667))*(py));
IkReal x887=((IkReal(6.66666666666667))*(px));
if( IKabs(((((cj1)*(x886)))+(((IkReal(-1.00000000000000))*(sj1)*(x887))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(2.76000000000000))+(sj2)+(((IkReal(-1.00000000000000))*(sj1)*(sj2)*(x886)))+(((IkReal(-6.66666666666667))*(cj2)*(pz)))+(((IkReal(-1.00000000000000))*(cj1)*(sj2)*(x887))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((cj1)*(x886)))+(((IkReal(-1.00000000000000))*(sj1)*(x887)))))+IKsqr(((IkReal(2.76000000000000))+(sj2)+(((IkReal(-1.00000000000000))*(sj1)*(sj2)*(x886)))+(((IkReal(-6.66666666666667))*(cj2)*(pz)))+(((IkReal(-1.00000000000000))*(cj1)*(sj2)*(x887)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((cj1)*(x886)))+(((IkReal(-1.00000000000000))*(sj1)*(x887)))), ((IkReal(2.76000000000000))+(sj2)+(((IkReal(-1.00000000000000))*(sj1)*(sj2)*(x886)))+(((IkReal(-6.66666666666667))*(cj2)*(pz)))+(((IkReal(-1.00000000000000))*(cj1)*(sj2)*(x887)))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x888=((IkReal(1.00000000000000))*(sj2));
evalcond[0]=((((IkReal(-1.00000000000000))*(cj1)*(py)))+(((px)*(sj1)))+(((IkReal(0.150000000000000))*(IKsin(j4)))));
evalcond[1]=((IkReal(0.414000000000000))+(((IkReal(-0.150000000000000))*(IKcos(j4))))+(((IkReal(-1.00000000000000))*(py)*(sj1)*(x888)))+(((IkReal(-1.00000000000000))*(cj2)*(pz)))+(((IkReal(-1.00000000000000))*(cj1)*(px)*(x888)))+(((IkReal(0.150000000000000))*(sj2))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x889=((IkReal(20.0000000000000))*(sj2));
if( IKabs(((((IkReal(6.66666666666667))*(cj1)*(py)))+(((IkReal(-6.66666666666667))*(px)*(sj1))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(0.333333333333333))*(((IKabs(cj3) != 0)?((IkReal)1/(cj3)):(IkReal)1.0e30))*(((IkReal(-12.2800000000000))+(((IkReal(-4.00000000000000))*(cj3)))+(((cj1)*(px)*(x889)))+(((IkReal(-3.00000000000000))*(sj2)))+(((IkReal(-15.4000000000000))*(sj3)))+(((IkReal(20.0000000000000))*(cj2)*(pz)))+(((py)*(sj1)*(x889))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(6.66666666666667))*(cj1)*(py)))+(((IkReal(-6.66666666666667))*(px)*(sj1)))))+IKsqr(((IkReal(0.333333333333333))*(((IKabs(cj3) != 0)?((IkReal)1/(cj3)):(IkReal)1.0e30))*(((IkReal(-12.2800000000000))+(((IkReal(-4.00000000000000))*(cj3)))+(((cj1)*(px)*(x889)))+(((IkReal(-3.00000000000000))*(sj2)))+(((IkReal(-15.4000000000000))*(sj3)))+(((IkReal(20.0000000000000))*(cj2)*(pz)))+(((py)*(sj1)*(x889)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((IkReal(6.66666666666667))*(cj1)*(py)))+(((IkReal(-6.66666666666667))*(px)*(sj1)))), ((IkReal(0.333333333333333))*(((IKabs(cj3) != 0)?((IkReal)1/(cj3)):(IkReal)1.0e30))*(((IkReal(-12.2800000000000))+(((IkReal(-4.00000000000000))*(cj3)))+(((cj1)*(px)*(x889)))+(((IkReal(-3.00000000000000))*(sj2)))+(((IkReal(-15.4000000000000))*(sj3)))+(((IkReal(20.0000000000000))*(cj2)*(pz)))+(((py)*(sj1)*(x889)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x890=IKcos(j4);
IkReal x891=((IkReal(1.00000000000000))*(pz));
IkReal x892=((cj1)*(px));
IkReal x893=((IkReal(1.00000000000000))*(py));
IkReal x894=((IkReal(0.150000000000000))*(x890));
evalcond[0]=((((px)*(sj1)))+(((IkReal(0.150000000000000))*(IKsin(j4))))+(((IkReal(-1.00000000000000))*(cj1)*(x893))));
evalcond[1]=((((IkReal(-0.770000000000000))*(cj3)))+(((cj2)*(x892)))+(((IkReal(-0.150000000000000))*(cj2)))+(((cj2)*(py)*(sj1)))+(((sj3)*(x894)))+(((IkReal(0.200000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(sj2)*(x891))));
evalcond[2]=((IkReal(0.614000000000000))+(((IkReal(-1.00000000000000))*(cj2)*(x891)))+(((cj3)*(x894)))+(((IkReal(0.200000000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(sj1)*(sj2)*(x893)))+(((IkReal(-1.00000000000000))*(sj2)*(x892)))+(((IkReal(0.770000000000000))*(sj3)))+(((IkReal(0.150000000000000))*(sj2))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x895=((IkReal(20.0000000000000))*(cj2));
if( IKabs(((((IkReal(6.66666666666667))*(cj1)*(py)))+(((IkReal(-6.66666666666667))*(px)*(sj1))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(0.333333333333333))*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((IkReal(15.4000000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(py)*(sj1)*(x895)))+(((IkReal(3.00000000000000))*(cj2)))+(((IkReal(-1.00000000000000))*(cj1)*(px)*(x895)))+(((IkReal(-4.00000000000000))*(sj3)))+(((IkReal(20.0000000000000))*(pz)*(sj2))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(6.66666666666667))*(cj1)*(py)))+(((IkReal(-6.66666666666667))*(px)*(sj1)))))+IKsqr(((IkReal(0.333333333333333))*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((IkReal(15.4000000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(py)*(sj1)*(x895)))+(((IkReal(3.00000000000000))*(cj2)))+(((IkReal(-1.00000000000000))*(cj1)*(px)*(x895)))+(((IkReal(-4.00000000000000))*(sj3)))+(((IkReal(20.0000000000000))*(pz)*(sj2)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((IkReal(6.66666666666667))*(cj1)*(py)))+(((IkReal(-6.66666666666667))*(px)*(sj1)))), ((IkReal(0.333333333333333))*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((IkReal(15.4000000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(py)*(sj1)*(x895)))+(((IkReal(3.00000000000000))*(cj2)))+(((IkReal(-1.00000000000000))*(cj1)*(px)*(x895)))+(((IkReal(-4.00000000000000))*(sj3)))+(((IkReal(20.0000000000000))*(pz)*(sj2)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x896=IKcos(j4);
IkReal x897=((IkReal(1.00000000000000))*(pz));
IkReal x898=((cj1)*(px));
IkReal x899=((IkReal(1.00000000000000))*(py));
IkReal x900=((IkReal(0.150000000000000))*(x896));
evalcond[0]=((((px)*(sj1)))+(((IkReal(0.150000000000000))*(IKsin(j4))))+(((IkReal(-1.00000000000000))*(cj1)*(x899))));
evalcond[1]=((((IkReal(-0.770000000000000))*(cj3)))+(((cj2)*(x898)))+(((IkReal(-0.150000000000000))*(cj2)))+(((sj3)*(x900)))+(((cj2)*(py)*(sj1)))+(((IkReal(0.200000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(sj2)*(x897))));
evalcond[2]=((IkReal(0.614000000000000))+(((IkReal(-1.00000000000000))*(cj2)*(x897)))+(((IkReal(0.200000000000000))*(cj3)))+(((cj3)*(x900)))+(((IkReal(-1.00000000000000))*(sj1)*(sj2)*(x899)))+(((IkReal(-1.00000000000000))*(sj2)*(x898)))+(((IkReal(0.770000000000000))*(sj3)))+(((IkReal(0.150000000000000))*(sj2))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
IkReal x901=((cj1)*(r00));
IkReal x902=((IkReal(1.00000000000000))*(r01));
IkReal x903=((IkReal(1.00000000000000))*(sj2));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j5)), IkReal(6.28318530717959))));
evalcond[1]=((((r00)*(sj1)))+(((IkReal(-1.00000000000000))*(cj1)*(x902))));
evalcond[2]=((cj3)+(((cj2)*(x901)))+(((cj2)*(r01)*(sj1)))+(((IkReal(-1.00000000000000))*(r02)*(x903))));
evalcond[3]=((((IkReal(-1.00000000000000))*(sj1)*(sj2)*(x902)))+(((IkReal(-1.00000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(x901)*(x903)))+(((IkReal(-1.00000000000000))*(cj2)*(r02))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=sj3;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=cj3;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
IkReal x904=((cj1)*(r00));
IkReal x905=((IkReal(1.00000000000000))*(cj1));
IkReal x906=((IkReal(1.00000000000000))*(cj2));
IkReal x907=((IkReal(1.00000000000000))*(sj2));
IkReal x908=((r01)*(sj1));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j3)), IkReal(6.28318530717959))));
evalcond[1]=((((r00)*(sj1)))+(((IkReal(-1.00000000000000))*(r01)*(x905))));
evalcond[2]=((((cj2)*(x904)))+(((cj2)*(x908)))+(((IkReal(-1.00000000000000))*(r02)*(x907))));
evalcond[3]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(r02)*(x906)))+(((IkReal(-1.00000000000000))*(x904)*(x907)))+(((IkReal(-1.00000000000000))*(x907)*(x908))));
evalcond[4]=((IkReal(1.12400000000000))+(((IkReal(-1.00000000000000))*(pz)*(x906)))+(((IkReal(-1.00000000000000))*(px)*(sj2)*(x905)))+(((IkReal(-1.00000000000000))*(py)*(sj1)*(x907)))+(((IkReal(0.150000000000000))*(sj2))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x909=((IkReal(6.66666666666667))*(px));
IkReal x910=((IkReal(6.66666666666667))*(py));
if( IKabs(((((IkReal(-1.00000000000000))*(cj1)*(x910)))+(((sj1)*(x909))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(1.33333333333333))+(((IkReal(-6.66666666666667))*(pz)*(sj2)))+(((cj2)*(sj1)*(x910)))+(((IkReal(-1.00000000000000))*(cj2)))+(((cj1)*(cj2)*(x909))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(cj1)*(x910)))+(((sj1)*(x909)))))+IKsqr(((IkReal(1.33333333333333))+(((IkReal(-6.66666666666667))*(pz)*(sj2)))+(((cj2)*(sj1)*(x910)))+(((IkReal(-1.00000000000000))*(cj2)))+(((cj1)*(cj2)*(x909)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((IkReal(-1.00000000000000))*(cj1)*(x910)))+(((sj1)*(x909)))), ((IkReal(1.33333333333333))+(((IkReal(-6.66666666666667))*(pz)*(sj2)))+(((cj2)*(sj1)*(x910)))+(((IkReal(-1.00000000000000))*(cj2)))+(((cj1)*(cj2)*(x909)))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((((IkReal(-0.150000000000000))*(IKsin(j4))))+(((IkReal(-1.00000000000000))*(cj1)*(py)))+(((px)*(sj1))));
evalcond[1]=((IkReal(0.200000000000000))+(((cj1)*(cj2)*(px)))+(((IkReal(-0.150000000000000))*(cj2)))+(((IkReal(-0.150000000000000))*(IKcos(j4))))+(((cj2)*(py)*(sj1)))+(((IkReal(-1.00000000000000))*(pz)*(sj2))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x911=((cj1)*(r00));
IkReal x912=((IkReal(1.00000000000000))*(cj1));
IkReal x913=((IkReal(1.00000000000000))*(cj2));
IkReal x914=((IkReal(1.00000000000000))*(sj2));
IkReal x915=((r01)*(sj1));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j3)), IkReal(6.28318530717959))));
evalcond[1]=((((r00)*(sj1)))+(((IkReal(-1.00000000000000))*(r01)*(x912))));
evalcond[2]=((((cj2)*(x915)))+(((cj2)*(x911)))+(((IkReal(-1.00000000000000))*(r02)*(x914))));
evalcond[3]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(r02)*(x913)))+(((IkReal(-1.00000000000000))*(x914)*(x915)))+(((IkReal(-1.00000000000000))*(x911)*(x914))));
evalcond[4]=((IkReal(0.104000000000000))+(((IkReal(-1.00000000000000))*(py)*(sj1)*(x914)))+(((IkReal(-1.00000000000000))*(pz)*(x913)))+(((IkReal(-1.00000000000000))*(px)*(sj2)*(x912)))+(((IkReal(0.150000000000000))*(sj2))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x916=((IkReal(6.66666666666667))*(py));
IkReal x917=((IkReal(6.66666666666667))*(px));
if( IKabs(((((IkReal(-1.00000000000000))*(cj1)*(x916)))+(((sj1)*(x917))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(1.33333333333333))+(((IkReal(-1.00000000000000))*(cj2)*(sj1)*(x916)))+(cj2)+(((IkReal(-1.00000000000000))*(cj1)*(cj2)*(x917)))+(((IkReal(6.66666666666667))*(pz)*(sj2))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(cj1)*(x916)))+(((sj1)*(x917)))))+IKsqr(((IkReal(1.33333333333333))+(((IkReal(-1.00000000000000))*(cj2)*(sj1)*(x916)))+(cj2)+(((IkReal(-1.00000000000000))*(cj1)*(cj2)*(x917)))+(((IkReal(6.66666666666667))*(pz)*(sj2)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((IkReal(-1.00000000000000))*(cj1)*(x916)))+(((sj1)*(x917)))), ((IkReal(1.33333333333333))+(((IkReal(-1.00000000000000))*(cj2)*(sj1)*(x916)))+(cj2)+(((IkReal(-1.00000000000000))*(cj1)*(cj2)*(x917)))+(((IkReal(6.66666666666667))*(pz)*(sj2)))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((((IkReal(-0.150000000000000))*(IKsin(j4))))+(((IkReal(-1.00000000000000))*(cj1)*(py)))+(((px)*(sj1))));
evalcond[1]=((IkReal(-0.200000000000000))+(((cj1)*(cj2)*(px)))+(((IkReal(-0.150000000000000))*(cj2)))+(((cj2)*(py)*(sj1)))+(((IkReal(0.150000000000000))*(IKcos(j4))))+(((IkReal(-1.00000000000000))*(pz)*(sj2))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x918=((cj1)*(cj2));
IkReal x919=((IkReal(1.00000000000000))*(cj1));
IkReal x920=((cj2)*(sj1));
IkReal x921=((IkReal(1.00000000000000))*(r02));
IkReal x922=((IkReal(1.00000000000000))*(sj2));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j3)), IkReal(6.28318530717959))));
evalcond[1]=((((r00)*(sj1)))+(((IkReal(-1.00000000000000))*(r01)*(x919))));
evalcond[2]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(sj2)*(x921)))+(((r01)*(x920)))+(((r00)*(x918))));
evalcond[3]=((((IkReal(-1.00000000000000))*(cj2)*(x921)))+(((IkReal(-1.00000000000000))*(r00)*(sj2)*(x919)))+(((IkReal(-1.00000000000000))*(r01)*(sj1)*(x922))));
evalcond[4]=((IkReal(-0.510000000000000))+(((IkReal(-0.150000000000000))*(cj2)))+(((px)*(x918)))+(((py)*(x920)))+(((IkReal(-1.00000000000000))*(pz)*(x922))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x923=((IkReal(6.66666666666667))*(py));
IkReal x924=((IkReal(6.66666666666667))*(px));
if( IKabs(((((sj1)*(x924)))+(((IkReal(-1.00000000000000))*(cj1)*(x923))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(5.42666666666667))+(sj2)+(((IkReal(-6.66666666666667))*(cj2)*(pz)))+(((IkReal(-1.00000000000000))*(sj1)*(sj2)*(x923)))+(((IkReal(-1.00000000000000))*(cj1)*(sj2)*(x924))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((sj1)*(x924)))+(((IkReal(-1.00000000000000))*(cj1)*(x923)))))+IKsqr(((IkReal(5.42666666666667))+(sj2)+(((IkReal(-6.66666666666667))*(cj2)*(pz)))+(((IkReal(-1.00000000000000))*(sj1)*(sj2)*(x923)))+(((IkReal(-1.00000000000000))*(cj1)*(sj2)*(x924)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((sj1)*(x924)))+(((IkReal(-1.00000000000000))*(cj1)*(x923)))), ((IkReal(5.42666666666667))+(sj2)+(((IkReal(-6.66666666666667))*(cj2)*(pz)))+(((IkReal(-1.00000000000000))*(sj1)*(sj2)*(x923)))+(((IkReal(-1.00000000000000))*(cj1)*(sj2)*(x924)))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x925=((IkReal(1.00000000000000))*(sj2));
evalcond[0]=((((IkReal(-0.150000000000000))*(IKsin(j4))))+(((IkReal(-1.00000000000000))*(cj1)*(py)))+(((px)*(sj1))));
evalcond[1]=((IkReal(0.814000000000000))+(((IkReal(-1.00000000000000))*(cj1)*(px)*(x925)))+(((IkReal(-0.150000000000000))*(IKcos(j4))))+(((IkReal(-1.00000000000000))*(cj2)*(pz)))+(((IkReal(-1.00000000000000))*(py)*(sj1)*(x925)))+(((IkReal(0.150000000000000))*(sj2))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x926=((cj1)*(cj2));
IkReal x927=((IkReal(1.00000000000000))*(cj1));
IkReal x928=((cj2)*(sj1));
IkReal x929=((IkReal(1.00000000000000))*(r02));
IkReal x930=((IkReal(1.00000000000000))*(sj2));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j3)), IkReal(6.28318530717959))));
evalcond[1]=((((r00)*(sj1)))+(((IkReal(-1.00000000000000))*(r01)*(x927))));
evalcond[2]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(sj2)*(x929)))+(((r01)*(x928)))+(((r00)*(x926))));
evalcond[3]=((((IkReal(-1.00000000000000))*(cj2)*(x929)))+(((IkReal(-1.00000000000000))*(r00)*(sj2)*(x927)))+(((IkReal(-1.00000000000000))*(r01)*(sj1)*(x930))));
evalcond[4]=((IkReal(0.510000000000000))+(((IkReal(-0.150000000000000))*(cj2)))+(((py)*(x928)))+(((IkReal(-1.00000000000000))*(pz)*(x930)))+(((px)*(x926))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x931=((IkReal(6.66666666666667))*(sj1));
IkReal x932=((IkReal(6.66666666666667))*(cj1));
if( IKabs(((((IkReal(-1.00000000000000))*(py)*(x932)))+(((px)*(x931))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-2.76000000000000))+(((IkReal(-1.00000000000000))*(sj2)))+(((IkReal(6.66666666666667))*(cj2)*(pz)))+(((py)*(sj2)*(x931)))+(((px)*(sj2)*(x932))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(py)*(x932)))+(((px)*(x931)))))+IKsqr(((IkReal(-2.76000000000000))+(((IkReal(-1.00000000000000))*(sj2)))+(((IkReal(6.66666666666667))*(cj2)*(pz)))+(((py)*(sj2)*(x931)))+(((px)*(sj2)*(x932)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((IkReal(-1.00000000000000))*(py)*(x932)))+(((px)*(x931)))), ((IkReal(-2.76000000000000))+(((IkReal(-1.00000000000000))*(sj2)))+(((IkReal(6.66666666666667))*(cj2)*(pz)))+(((py)*(sj2)*(x931)))+(((px)*(sj2)*(x932)))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x933=((IkReal(1.00000000000000))*(sj2));
evalcond[0]=((((IkReal(-0.150000000000000))*(IKsin(j4))))+(((IkReal(-1.00000000000000))*(cj1)*(py)))+(((px)*(sj1))));
evalcond[1]=((IkReal(0.414000000000000))+(((IkReal(-1.00000000000000))*(cj1)*(px)*(x933)))+(((IkReal(0.150000000000000))*(IKcos(j4))))+(((IkReal(-1.00000000000000))*(cj2)*(pz)))+(((IkReal(-1.00000000000000))*(py)*(sj1)*(x933)))+(((IkReal(0.150000000000000))*(sj2))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x934=((IkReal(20.0000000000000))*(sj2));
if( IKabs(((((IkReal(6.66666666666667))*(px)*(sj1)))+(((IkReal(-6.66666666666667))*(cj1)*(py))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(0.333333333333333))*(((IKabs(cj3) != 0)?((IkReal)1/(cj3)):(IkReal)1.0e30))*(((IkReal(12.2800000000000))+(((IkReal(-1.00000000000000))*(cj1)*(px)*(x934)))+(((IkReal(10.2000000000000))*(sj3)))+(((IkReal(4.00000000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(py)*(sj1)*(x934)))+(((IkReal(3.00000000000000))*(sj2)))+(((IkReal(-20.0000000000000))*(cj2)*(pz))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(6.66666666666667))*(px)*(sj1)))+(((IkReal(-6.66666666666667))*(cj1)*(py)))))+IKsqr(((IkReal(0.333333333333333))*(((IKabs(cj3) != 0)?((IkReal)1/(cj3)):(IkReal)1.0e30))*(((IkReal(12.2800000000000))+(((IkReal(-1.00000000000000))*(cj1)*(px)*(x934)))+(((IkReal(10.2000000000000))*(sj3)))+(((IkReal(4.00000000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(py)*(sj1)*(x934)))+(((IkReal(3.00000000000000))*(sj2)))+(((IkReal(-20.0000000000000))*(cj2)*(pz)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((IkReal(6.66666666666667))*(px)*(sj1)))+(((IkReal(-6.66666666666667))*(cj1)*(py)))), ((IkReal(0.333333333333333))*(((IKabs(cj3) != 0)?((IkReal)1/(cj3)):(IkReal)1.0e30))*(((IkReal(12.2800000000000))+(((IkReal(-1.00000000000000))*(cj1)*(px)*(x934)))+(((IkReal(10.2000000000000))*(sj3)))+(((IkReal(4.00000000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(py)*(sj1)*(x934)))+(((IkReal(3.00000000000000))*(sj2)))+(((IkReal(-20.0000000000000))*(cj2)*(pz)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x935=IKcos(j4);
IkReal x936=((IkReal(1.00000000000000))*(pz));
IkReal x937=((cj1)*(px));
IkReal x938=((IkReal(1.00000000000000))*(py));
IkReal x939=((IkReal(0.150000000000000))*(x935));
evalcond[0]=((((IkReal(-0.150000000000000))*(IKsin(j4))))+(((IkReal(-1.00000000000000))*(cj1)*(x938)))+(((px)*(sj1))));
evalcond[1]=((((IkReal(-0.150000000000000))*(cj2)))+(((IkReal(-1.00000000000000))*(sj3)*(x939)))+(((IkReal(-1.00000000000000))*(sj2)*(x936)))+(((cj2)*(py)*(sj1)))+(((IkReal(-0.510000000000000))*(cj3)))+(((cj2)*(x937)))+(((IkReal(0.200000000000000))*(sj3))));
evalcond[2]=((IkReal(0.614000000000000))+(((IkReal(-1.00000000000000))*(cj2)*(x936)))+(((IkReal(0.200000000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(cj3)*(x939)))+(((IkReal(-1.00000000000000))*(sj1)*(sj2)*(x938)))+(((IkReal(-1.00000000000000))*(sj2)*(x937)))+(((IkReal(0.150000000000000))*(sj2)))+(((IkReal(0.510000000000000))*(sj3))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x940=((IkReal(20.0000000000000))*(cj2));
if( IKabs(((((IkReal(6.66666666666667))*(px)*(sj1)))+(((IkReal(-6.66666666666667))*(cj1)*(py))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(0.333333333333333))*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((py)*(sj1)*(x940)))+(((IkReal(-10.2000000000000))*(cj3)))+(((cj1)*(px)*(x940)))+(((IkReal(4.00000000000000))*(sj3)))+(((IkReal(-20.0000000000000))*(pz)*(sj2)))+(((IkReal(-3.00000000000000))*(cj2))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(6.66666666666667))*(px)*(sj1)))+(((IkReal(-6.66666666666667))*(cj1)*(py)))))+IKsqr(((IkReal(0.333333333333333))*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((py)*(sj1)*(x940)))+(((IkReal(-10.2000000000000))*(cj3)))+(((cj1)*(px)*(x940)))+(((IkReal(4.00000000000000))*(sj3)))+(((IkReal(-20.0000000000000))*(pz)*(sj2)))+(((IkReal(-3.00000000000000))*(cj2)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((IkReal(6.66666666666667))*(px)*(sj1)))+(((IkReal(-6.66666666666667))*(cj1)*(py)))), ((IkReal(0.333333333333333))*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((py)*(sj1)*(x940)))+(((IkReal(-10.2000000000000))*(cj3)))+(((cj1)*(px)*(x940)))+(((IkReal(4.00000000000000))*(sj3)))+(((IkReal(-20.0000000000000))*(pz)*(sj2)))+(((IkReal(-3.00000000000000))*(cj2)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x941=IKcos(j4);
IkReal x942=((IkReal(1.00000000000000))*(pz));
IkReal x943=((cj1)*(px));
IkReal x944=((IkReal(1.00000000000000))*(py));
IkReal x945=((IkReal(0.150000000000000))*(x941));
evalcond[0]=((((IkReal(-0.150000000000000))*(IKsin(j4))))+(((IkReal(-1.00000000000000))*(cj1)*(x944)))+(((px)*(sj1))));
evalcond[1]=((((IkReal(-0.150000000000000))*(cj2)))+(((cj2)*(x943)))+(((cj2)*(py)*(sj1)))+(((IkReal(-0.510000000000000))*(cj3)))+(((IkReal(0.200000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(sj3)*(x945)))+(((IkReal(-1.00000000000000))*(sj2)*(x942))));
evalcond[2]=((IkReal(0.614000000000000))+(((IkReal(-1.00000000000000))*(cj2)*(x942)))+(((IkReal(0.200000000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(cj3)*(x945)))+(((IkReal(-1.00000000000000))*(sj1)*(sj2)*(x944)))+(((IkReal(-1.00000000000000))*(sj2)*(x943)))+(((IkReal(0.150000000000000))*(sj2)))+(((IkReal(0.510000000000000))*(sj3))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
IkReal x946=((cj1)*(cj2));
IkReal x947=((IkReal(1.00000000000000))*(sj2));
IkReal x948=((cj2)*(sj1));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j3)), IkReal(6.28318530717959))));
evalcond[1]=((((IkReal(-1.00000000000000))*(r02)*(x947)))+(((IkReal(-1.00000000000000))*(sj5)))+(((r01)*(x948)))+(((r00)*(x946))));
evalcond[2]=((IkReal(-0.640000000000000))+(((IkReal(-0.150000000000000))*(cj5)))+(((IkReal(-0.150000000000000))*(cj2)))+(((IkReal(-1.00000000000000))*(pz)*(x947)))+(((IkReal(-0.130000000000000))*(sj5)))+(((px)*(x946)))+(((py)*(x948))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst0;
gconst0=IKsign(cj5);
dummyeval[0]=cj5;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst1;
gconst1=IKsign(((((IkReal(-0.130000000000000))*(cj5)))+(((IkReal(0.150000000000000))*(sj5)))));
dummyeval[0]=((((IkReal(1.15384615384615))*(sj5)))+(((IkReal(-1.00000000000000))*(cj5))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=((((IkReal(1.15384615384615))*(sj5)))+(((IkReal(-1.00000000000000))*(cj5))));
dummyeval[1]=cj5;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x949=((IkReal(1.00000000000000))*(sj2));
if( IKabs(((((IKabs(((((IkReal(-0.130000000000000))*(cj5)))+(((IkReal(0.150000000000000))*(sj5))))) != 0)?((IkReal)1/(((((IkReal(-0.130000000000000))*(cj5)))+(((IkReal(0.150000000000000))*(sj5)))))):(IkReal)1.0e30))*(((((cj1)*(py)))+(((IkReal(-1.00000000000000))*(px)*(sj1))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IKabs(cj5) != 0)?((IkReal)1/(cj5)):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(r01)*(sj1)*(x949)))+(((IkReal(-1.00000000000000))*(cj1)*(r00)*(x949)))+(((IkReal(-1.00000000000000))*(cj2)*(r02))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(((((IkReal(-0.130000000000000))*(cj5)))+(((IkReal(0.150000000000000))*(sj5))))) != 0)?((IkReal)1/(((((IkReal(-0.130000000000000))*(cj5)))+(((IkReal(0.150000000000000))*(sj5)))))):(IkReal)1.0e30))*(((((cj1)*(py)))+(((IkReal(-1.00000000000000))*(px)*(sj1)))))))+IKsqr(((((IKabs(cj5) != 0)?((IkReal)1/(cj5)):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(r01)*(sj1)*(x949)))+(((IkReal(-1.00000000000000))*(cj1)*(r00)*(x949)))+(((IkReal(-1.00000000000000))*(cj2)*(r02)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((IKabs(((((IkReal(-0.130000000000000))*(cj5)))+(((IkReal(0.150000000000000))*(sj5))))) != 0)?((IkReal)1/(((((IkReal(-0.130000000000000))*(cj5)))+(((IkReal(0.150000000000000))*(sj5)))))):(IkReal)1.0e30))*(((((cj1)*(py)))+(((IkReal(-1.00000000000000))*(px)*(sj1)))))), ((((IKabs(cj5) != 0)?((IkReal)1/(cj5)):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(r01)*(sj1)*(x949)))+(((IkReal(-1.00000000000000))*(cj1)*(r00)*(x949)))+(((IkReal(-1.00000000000000))*(cj2)*(r02)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x950=IKsin(j4);
IkReal x951=IKcos(j4);
IkReal x952=((IkReal(1.00000000000000))*(cj1));
IkReal x953=((IkReal(0.150000000000000))*(sj5));
IkReal x954=((IkReal(1.00000000000000))*(cj2));
IkReal x955=((IkReal(1.00000000000000))*(sj1)*(sj2));
IkReal x956=((cj5)*(x950));
IkReal x957=((cj5)*(x951));
evalcond[0]=((((r00)*(sj1)))+(((IkReal(-1.00000000000000))*(r01)*(x952)))+(((IkReal(-1.00000000000000))*(x956))));
evalcond[1]=((((IkReal(-1.00000000000000))*(py)*(x952)))+(((IkReal(-0.130000000000000))*(x956)))+(((px)*(sj1)))+(((x950)*(x953))));
evalcond[2]=((((IkReal(-1.00000000000000))*(r01)*(x955)))+(((IkReal(-1.00000000000000))*(r00)*(sj2)*(x952)))+(((IkReal(-1.00000000000000))*(x957)))+(((IkReal(-1.00000000000000))*(r02)*(x954))));
evalcond[3]=((IkReal(0.814000000000000))+(((x951)*(x953)))+(((IkReal(-1.00000000000000))*(py)*(x955)))+(((IkReal(-1.00000000000000))*(pz)*(x954)))+(((IkReal(-0.130000000000000))*(x957)))+(((IkReal(-1.00000000000000))*(px)*(sj2)*(x952)))+(((IkReal(0.150000000000000))*(sj2))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((gconst1)*(((((cj1)*(py)))+(((IkReal(-1.00000000000000))*(px)*(sj1))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst1)*(((IkReal(-0.814000000000000))+(((cj2)*(pz)))+(((py)*(sj1)*(sj2)))+(((IkReal(-0.150000000000000))*(sj2)))+(((cj1)*(px)*(sj2))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst1)*(((((cj1)*(py)))+(((IkReal(-1.00000000000000))*(px)*(sj1)))))), ((gconst1)*(((IkReal(-0.814000000000000))+(((cj2)*(pz)))+(((py)*(sj1)*(sj2)))+(((IkReal(-0.150000000000000))*(sj2)))+(((cj1)*(px)*(sj2)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x958=IKsin(j4);
IkReal x959=IKcos(j4);
IkReal x960=((IkReal(1.00000000000000))*(cj1));
IkReal x961=((IkReal(0.150000000000000))*(sj5));
IkReal x962=((IkReal(1.00000000000000))*(cj2));
IkReal x963=((IkReal(1.00000000000000))*(sj1)*(sj2));
IkReal x964=((cj5)*(x958));
IkReal x965=((cj5)*(x959));
evalcond[0]=((((r00)*(sj1)))+(((IkReal(-1.00000000000000))*(x964)))+(((IkReal(-1.00000000000000))*(r01)*(x960))));
evalcond[1]=((((IkReal(-1.00000000000000))*(py)*(x960)))+(((IkReal(-0.130000000000000))*(x964)))+(((px)*(sj1)))+(((x958)*(x961))));
evalcond[2]=((((IkReal(-1.00000000000000))*(r00)*(sj2)*(x960)))+(((IkReal(-1.00000000000000))*(x965)))+(((IkReal(-1.00000000000000))*(r01)*(x963)))+(((IkReal(-1.00000000000000))*(r02)*(x962))));
evalcond[3]=((IkReal(0.814000000000000))+(((IkReal(-1.00000000000000))*(pz)*(x962)))+(((IkReal(-1.00000000000000))*(py)*(x963)))+(((IkReal(-0.130000000000000))*(x965)))+(((IkReal(-1.00000000000000))*(px)*(sj2)*(x960)))+(((x959)*(x961)))+(((IkReal(0.150000000000000))*(sj2))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x966=((IkReal(1.00000000000000))*(cj1));
if( IKabs(((gconst0)*(((((r00)*(sj1)))+(((IkReal(-1.00000000000000))*(r01)*(x966))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst0)*(((((IkReal(-1.00000000000000))*(r00)*(sj2)*(x966)))+(((IkReal(-1.00000000000000))*(r01)*(sj1)*(sj2)))+(((IkReal(-1.00000000000000))*(cj2)*(r02))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst0)*(((((r00)*(sj1)))+(((IkReal(-1.00000000000000))*(r01)*(x966)))))), ((gconst0)*(((((IkReal(-1.00000000000000))*(r00)*(sj2)*(x966)))+(((IkReal(-1.00000000000000))*(r01)*(sj1)*(sj2)))+(((IkReal(-1.00000000000000))*(cj2)*(r02)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x967=IKsin(j4);
IkReal x968=IKcos(j4);
IkReal x969=((IkReal(1.00000000000000))*(cj1));
IkReal x970=((IkReal(0.150000000000000))*(sj5));
IkReal x971=((IkReal(1.00000000000000))*(cj2));
IkReal x972=((IkReal(1.00000000000000))*(sj1)*(sj2));
IkReal x973=((cj5)*(x967));
IkReal x974=((cj5)*(x968));
evalcond[0]=((((r00)*(sj1)))+(((IkReal(-1.00000000000000))*(x973)))+(((IkReal(-1.00000000000000))*(r01)*(x969))));
evalcond[1]=((((IkReal(-1.00000000000000))*(py)*(x969)))+(((IkReal(-0.130000000000000))*(x973)))+(((px)*(sj1)))+(((x967)*(x970))));
evalcond[2]=((((IkReal(-1.00000000000000))*(r01)*(x972)))+(((IkReal(-1.00000000000000))*(x974)))+(((IkReal(-1.00000000000000))*(r00)*(sj2)*(x969)))+(((IkReal(-1.00000000000000))*(r02)*(x971))));
evalcond[3]=((IkReal(0.814000000000000))+(((IkReal(-1.00000000000000))*(py)*(x972)))+(((IkReal(-1.00000000000000))*(pz)*(x971)))+(((IkReal(-0.130000000000000))*(x974)))+(((x968)*(x970)))+(((IkReal(-1.00000000000000))*(px)*(sj2)*(x969)))+(((IkReal(0.150000000000000))*(sj2))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
IkReal x975=((cj1)*(cj2));
IkReal x976=((IkReal(1.00000000000000))*(sj2));
IkReal x977=((cj2)*(sj1));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j3)), IkReal(6.28318530717959))));
evalcond[1]=((sj5)+(((r01)*(x977)))+(((r00)*(x975)))+(((IkReal(-1.00000000000000))*(r02)*(x976))));
evalcond[2]=((IkReal(0.640000000000000))+(((IkReal(-0.150000000000000))*(cj2)))+(((IkReal(-1.00000000000000))*(pz)*(x976)))+(((IkReal(0.130000000000000))*(sj5)))+(((py)*(x977)))+(((IkReal(0.150000000000000))*(cj5)))+(((px)*(x975))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst2;
gconst2=IKsign(cj5);
dummyeval[0]=cj5;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst3;
gconst3=IKsign(((((IkReal(-0.130000000000000))*(cj5)))+(((IkReal(0.150000000000000))*(sj5)))));
dummyeval[0]=((((IkReal(1.15384615384615))*(sj5)))+(((IkReal(-1.00000000000000))*(cj5))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=((((IkReal(1.15384615384615))*(sj5)))+(((IkReal(-1.00000000000000))*(cj5))));
dummyeval[1]=cj5;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((((IKabs(((((IkReal(-0.130000000000000))*(cj5)))+(((IkReal(0.150000000000000))*(sj5))))) != 0)?((IkReal)1/(((((IkReal(-0.130000000000000))*(cj5)))+(((IkReal(0.150000000000000))*(sj5)))))):(IkReal)1.0e30))*(((((cj1)*(py)))+(((IkReal(-1.00000000000000))*(px)*(sj1))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IKabs(cj5) != 0)?((IkReal)1/(cj5)):(IkReal)1.0e30))*(((((cj2)*(r02)))+(((cj1)*(r00)*(sj2)))+(((r01)*(sj1)*(sj2))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(((((IkReal(-0.130000000000000))*(cj5)))+(((IkReal(0.150000000000000))*(sj5))))) != 0)?((IkReal)1/(((((IkReal(-0.130000000000000))*(cj5)))+(((IkReal(0.150000000000000))*(sj5)))))):(IkReal)1.0e30))*(((((cj1)*(py)))+(((IkReal(-1.00000000000000))*(px)*(sj1)))))))+IKsqr(((((IKabs(cj5) != 0)?((IkReal)1/(cj5)):(IkReal)1.0e30))*(((((cj2)*(r02)))+(((cj1)*(r00)*(sj2)))+(((r01)*(sj1)*(sj2)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((IKabs(((((IkReal(-0.130000000000000))*(cj5)))+(((IkReal(0.150000000000000))*(sj5))))) != 0)?((IkReal)1/(((((IkReal(-0.130000000000000))*(cj5)))+(((IkReal(0.150000000000000))*(sj5)))))):(IkReal)1.0e30))*(((((cj1)*(py)))+(((IkReal(-1.00000000000000))*(px)*(sj1)))))), ((((IKabs(cj5) != 0)?((IkReal)1/(cj5)):(IkReal)1.0e30))*(((((cj2)*(r02)))+(((cj1)*(r00)*(sj2)))+(((r01)*(sj1)*(sj2)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x978=IKsin(j4);
IkReal x979=IKcos(j4);
IkReal x980=((IkReal(1.00000000000000))*(cj1));
IkReal x981=((IkReal(1.00000000000000))*(cj2));
IkReal x982=((IkReal(0.150000000000000))*(sj5));
IkReal x983=((IkReal(1.00000000000000))*(sj1)*(sj2));
IkReal x984=((cj5)*(x978));
IkReal x985=((cj5)*(x979));
evalcond[0]=((((r00)*(sj1)))+(((IkReal(-1.00000000000000))*(x984)))+(((IkReal(-1.00000000000000))*(r01)*(x980))));
evalcond[1]=((((IkReal(-1.00000000000000))*(py)*(x980)))+(((IkReal(-0.130000000000000))*(x984)))+(((px)*(sj1)))+(((x978)*(x982))));
evalcond[2]=((((IkReal(-1.00000000000000))*(r00)*(sj2)*(x980)))+(((IkReal(-1.00000000000000))*(r01)*(x983)))+(((IkReal(-1.00000000000000))*(r02)*(x981)))+(x985));
evalcond[3]=((IkReal(0.414000000000000))+(((IkReal(-1.00000000000000))*(pz)*(x981)))+(((IkReal(-1.00000000000000))*(py)*(x983)))+(((IkReal(-1.00000000000000))*(px)*(sj2)*(x980)))+(((IkReal(0.130000000000000))*(x985)))+(((IkReal(-1.00000000000000))*(x979)*(x982)))+(((IkReal(0.150000000000000))*(sj2))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x986=((IkReal(1.00000000000000))*(sj2));
if( IKabs(((gconst3)*(((((cj1)*(py)))+(((IkReal(-1.00000000000000))*(px)*(sj1))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst3)*(((IkReal(0.414000000000000))+(((IkReal(-1.00000000000000))*(py)*(sj1)*(x986)))+(((IkReal(-1.00000000000000))*(cj2)*(pz)))+(((IkReal(-1.00000000000000))*(cj1)*(px)*(x986)))+(((IkReal(0.150000000000000))*(sj2))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst3)*(((((cj1)*(py)))+(((IkReal(-1.00000000000000))*(px)*(sj1)))))), ((gconst3)*(((IkReal(0.414000000000000))+(((IkReal(-1.00000000000000))*(py)*(sj1)*(x986)))+(((IkReal(-1.00000000000000))*(cj2)*(pz)))+(((IkReal(-1.00000000000000))*(cj1)*(px)*(x986)))+(((IkReal(0.150000000000000))*(sj2)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x987=IKsin(j4);
IkReal x988=IKcos(j4);
IkReal x989=((IkReal(1.00000000000000))*(cj1));
IkReal x990=((IkReal(1.00000000000000))*(cj2));
IkReal x991=((IkReal(0.150000000000000))*(sj5));
IkReal x992=((IkReal(1.00000000000000))*(sj1)*(sj2));
IkReal x993=((cj5)*(x987));
IkReal x994=((cj5)*(x988));
evalcond[0]=((((IkReal(-1.00000000000000))*(x993)))+(((r00)*(sj1)))+(((IkReal(-1.00000000000000))*(r01)*(x989))));
evalcond[1]=((((IkReal(-1.00000000000000))*(py)*(x989)))+(((x987)*(x991)))+(((px)*(sj1)))+(((IkReal(-0.130000000000000))*(x993))));
evalcond[2]=((((IkReal(-1.00000000000000))*(r00)*(sj2)*(x989)))+(((IkReal(-1.00000000000000))*(r01)*(x992)))+(((IkReal(-1.00000000000000))*(r02)*(x990)))+(x994));
evalcond[3]=((IkReal(0.414000000000000))+(((IkReal(0.130000000000000))*(x994)))+(((IkReal(-1.00000000000000))*(py)*(x992)))+(((IkReal(-1.00000000000000))*(pz)*(x990)))+(((IkReal(-1.00000000000000))*(px)*(sj2)*(x989)))+(((IkReal(0.150000000000000))*(sj2)))+(((IkReal(-1.00000000000000))*(x988)*(x991))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((gconst2)*(((((r00)*(sj1)))+(((IkReal(-1.00000000000000))*(cj1)*(r01))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst2)*(((((cj2)*(r02)))+(((cj1)*(r00)*(sj2)))+(((r01)*(sj1)*(sj2))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst2)*(((((r00)*(sj1)))+(((IkReal(-1.00000000000000))*(cj1)*(r01)))))), ((gconst2)*(((((cj2)*(r02)))+(((cj1)*(r00)*(sj2)))+(((r01)*(sj1)*(sj2)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x995=IKsin(j4);
IkReal x996=IKcos(j4);
IkReal x997=((IkReal(1.00000000000000))*(cj1));
IkReal x998=((IkReal(1.00000000000000))*(cj2));
IkReal x999=((IkReal(0.150000000000000))*(sj5));
IkReal x1000=((IkReal(1.00000000000000))*(sj1)*(sj2));
IkReal x1001=((cj5)*(x995));
IkReal x1002=((cj5)*(x996));
evalcond[0]=((((r00)*(sj1)))+(((IkReal(-1.00000000000000))*(x1001)))+(((IkReal(-1.00000000000000))*(r01)*(x997))));
evalcond[1]=((((IkReal(-1.00000000000000))*(py)*(x997)))+(((x995)*(x999)))+(((IkReal(-0.130000000000000))*(x1001)))+(((px)*(sj1))));
evalcond[2]=((x1002)+(((IkReal(-1.00000000000000))*(r02)*(x998)))+(((IkReal(-1.00000000000000))*(r01)*(x1000)))+(((IkReal(-1.00000000000000))*(r00)*(sj2)*(x997))));
evalcond[3]=((IkReal(0.414000000000000))+(((IkReal(-1.00000000000000))*(py)*(x1000)))+(((IkReal(-1.00000000000000))*(px)*(sj2)*(x997)))+(((IkReal(-1.00000000000000))*(x996)*(x999)))+(((IkReal(-1.00000000000000))*(pz)*(x998)))+(((IkReal(0.130000000000000))*(x1002)))+(((IkReal(0.150000000000000))*(sj2))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
IkReal x1003=((IkReal(1.00000000000000))*(cj2));
IkReal x1004=((IkReal(1.00000000000000))*(sj2));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j3)), IkReal(6.28318530717959))));
evalcond[1]=((sj5)+(((IkReal(-1.00000000000000))*(cj1)*(r00)*(x1004)))+(((IkReal(-1.00000000000000))*(r02)*(x1003)))+(((IkReal(-1.00000000000000))*(r01)*(sj1)*(x1004))));
evalcond[2]=((IkReal(1.25400000000000))+(((IkReal(-1.00000000000000))*(pz)*(x1003)))+(((IkReal(-1.00000000000000))*(py)*(sj1)*(x1004)))+(((IkReal(0.130000000000000))*(sj5)))+(((IkReal(0.150000000000000))*(cj5)))+(((IkReal(-1.00000000000000))*(cj1)*(px)*(x1004)))+(((IkReal(0.150000000000000))*(sj2))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst4;
gconst4=IKsign(cj5);
dummyeval[0]=cj5;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst5;
gconst5=IKsign(((((IkReal(-0.130000000000000))*(cj5)))+(((IkReal(0.150000000000000))*(sj5)))));
dummyeval[0]=((((IkReal(1.15384615384615))*(sj5)))+(((IkReal(-1.00000000000000))*(cj5))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=((((IkReal(1.15384615384615))*(sj5)))+(((IkReal(-1.00000000000000))*(cj5))));
dummyeval[1]=cj5;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((((IKabs(((((IkReal(-0.130000000000000))*(cj5)))+(((IkReal(0.150000000000000))*(sj5))))) != 0)?((IkReal)1/(((((IkReal(-0.130000000000000))*(cj5)))+(((IkReal(0.150000000000000))*(sj5)))))):(IkReal)1.0e30))*(((((cj1)*(py)))+(((IkReal(-1.00000000000000))*(px)*(sj1))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IKabs(cj5) != 0)?((IkReal)1/(cj5)):(IkReal)1.0e30))*(((((cj2)*(r01)*(sj1)))+(((IkReal(-1.00000000000000))*(r02)*(sj2)))+(((cj1)*(cj2)*(r00))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(((((IkReal(-0.130000000000000))*(cj5)))+(((IkReal(0.150000000000000))*(sj5))))) != 0)?((IkReal)1/(((((IkReal(-0.130000000000000))*(cj5)))+(((IkReal(0.150000000000000))*(sj5)))))):(IkReal)1.0e30))*(((((cj1)*(py)))+(((IkReal(-1.00000000000000))*(px)*(sj1)))))))+IKsqr(((((IKabs(cj5) != 0)?((IkReal)1/(cj5)):(IkReal)1.0e30))*(((((cj2)*(r01)*(sj1)))+(((IkReal(-1.00000000000000))*(r02)*(sj2)))+(((cj1)*(cj2)*(r00)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((IKabs(((((IkReal(-0.130000000000000))*(cj5)))+(((IkReal(0.150000000000000))*(sj5))))) != 0)?((IkReal)1/(((((IkReal(-0.130000000000000))*(cj5)))+(((IkReal(0.150000000000000))*(sj5)))))):(IkReal)1.0e30))*(((((cj1)*(py)))+(((IkReal(-1.00000000000000))*(px)*(sj1)))))), ((((IKabs(cj5) != 0)?((IkReal)1/(cj5)):(IkReal)1.0e30))*(((((cj2)*(r01)*(sj1)))+(((IkReal(-1.00000000000000))*(r02)*(sj2)))+(((cj1)*(cj2)*(r00)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x1005=IKsin(j4);
IkReal x1006=IKcos(j4);
IkReal x1007=((cj1)*(cj2));
IkReal x1008=((IkReal(1.00000000000000))*(cj1));
IkReal x1009=((IkReal(0.150000000000000))*(sj5));
IkReal x1010=((IkReal(1.00000000000000))*(cj5));
IkReal x1011=((IkReal(1.00000000000000))*(sj2));
IkReal x1012=((IkReal(0.130000000000000))*(cj5));
IkReal x1013=((cj2)*(sj1));
evalcond[0]=((((r00)*(sj1)))+(((IkReal(-1.00000000000000))*(x1005)*(x1010)))+(((IkReal(-1.00000000000000))*(r01)*(x1008))));
evalcond[1]=((((IkReal(-1.00000000000000))*(py)*(x1008)))+(((IkReal(-1.00000000000000))*(x1005)*(x1012)))+(((x1005)*(x1009)))+(((px)*(sj1))));
evalcond[2]=((((IkReal(-1.00000000000000))*(r02)*(x1011)))+(((IkReal(-1.00000000000000))*(x1006)*(x1010)))+(((r01)*(x1013)))+(((r00)*(x1007))));
evalcond[3]=((IkReal(0.200000000000000))+(((IkReal(-0.150000000000000))*(cj2)))+(((px)*(x1007)))+(((IkReal(-1.00000000000000))*(pz)*(x1011)))+(((IkReal(-1.00000000000000))*(x1006)*(x1012)))+(((x1006)*(x1009)))+(((py)*(x1013))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1014=((IkReal(1.00000000000000))*(sj1));
if( IKabs(((gconst5)*(((((IkReal(-1.00000000000000))*(px)*(x1014)))+(((cj1)*(py))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst5)*(((IkReal(-0.200000000000000))+(((IkReal(-1.00000000000000))*(cj2)*(py)*(x1014)))+(((pz)*(sj2)))+(((IkReal(-1.00000000000000))*(cj1)*(cj2)*(px)))+(((IkReal(0.150000000000000))*(cj2))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst5)*(((((IkReal(-1.00000000000000))*(px)*(x1014)))+(((cj1)*(py)))))), ((gconst5)*(((IkReal(-0.200000000000000))+(((IkReal(-1.00000000000000))*(cj2)*(py)*(x1014)))+(((pz)*(sj2)))+(((IkReal(-1.00000000000000))*(cj1)*(cj2)*(px)))+(((IkReal(0.150000000000000))*(cj2)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x1015=IKsin(j4);
IkReal x1016=IKcos(j4);
IkReal x1017=((cj1)*(cj2));
IkReal x1018=((IkReal(1.00000000000000))*(cj1));
IkReal x1019=((IkReal(0.150000000000000))*(sj5));
IkReal x1020=((IkReal(1.00000000000000))*(cj5));
IkReal x1021=((IkReal(1.00000000000000))*(sj2));
IkReal x1022=((IkReal(0.130000000000000))*(cj5));
IkReal x1023=((cj2)*(sj1));
evalcond[0]=((((r00)*(sj1)))+(((IkReal(-1.00000000000000))*(x1015)*(x1020)))+(((IkReal(-1.00000000000000))*(r01)*(x1018))));
evalcond[1]=((((IkReal(-1.00000000000000))*(py)*(x1018)))+(((IkReal(-1.00000000000000))*(x1015)*(x1022)))+(((x1015)*(x1019)))+(((px)*(sj1))));
evalcond[2]=((((r01)*(x1023)))+(((IkReal(-1.00000000000000))*(r02)*(x1021)))+(((IkReal(-1.00000000000000))*(x1016)*(x1020)))+(((r00)*(x1017))));
evalcond[3]=((IkReal(0.200000000000000))+(((py)*(x1023)))+(((x1016)*(x1019)))+(((IkReal(-0.150000000000000))*(cj2)))+(((IkReal(-1.00000000000000))*(pz)*(x1021)))+(((IkReal(-1.00000000000000))*(x1016)*(x1022)))+(((px)*(x1017))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((gconst4)*(((((r00)*(sj1)))+(((IkReal(-1.00000000000000))*(cj1)*(r01))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst4)*(((((cj2)*(r01)*(sj1)))+(((IkReal(-1.00000000000000))*(r02)*(sj2)))+(((cj1)*(cj2)*(r00))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst4)*(((((r00)*(sj1)))+(((IkReal(-1.00000000000000))*(cj1)*(r01)))))), ((gconst4)*(((((cj2)*(r01)*(sj1)))+(((IkReal(-1.00000000000000))*(r02)*(sj2)))+(((cj1)*(cj2)*(r00)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x1024=IKsin(j4);
IkReal x1025=IKcos(j4);
IkReal x1026=((cj1)*(cj2));
IkReal x1027=((IkReal(1.00000000000000))*(cj1));
IkReal x1028=((IkReal(0.150000000000000))*(sj5));
IkReal x1029=((IkReal(1.00000000000000))*(cj5));
IkReal x1030=((IkReal(1.00000000000000))*(sj2));
IkReal x1031=((IkReal(0.130000000000000))*(cj5));
IkReal x1032=((cj2)*(sj1));
evalcond[0]=((((r00)*(sj1)))+(((IkReal(-1.00000000000000))*(r01)*(x1027)))+(((IkReal(-1.00000000000000))*(x1024)*(x1029))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x1024)*(x1031)))+(((IkReal(-1.00000000000000))*(py)*(x1027)))+(((px)*(sj1)))+(((x1024)*(x1028))));
evalcond[2]=((((IkReal(-1.00000000000000))*(r02)*(x1030)))+(((IkReal(-1.00000000000000))*(x1025)*(x1029)))+(((r01)*(x1032)))+(((r00)*(x1026))));
evalcond[3]=((IkReal(0.200000000000000))+(((IkReal(-0.150000000000000))*(cj2)))+(((IkReal(-1.00000000000000))*(x1025)*(x1031)))+(((IkReal(-1.00000000000000))*(pz)*(x1030)))+(((py)*(x1032)))+(((px)*(x1026)))+(((x1025)*(x1028))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
IkReal x1033=((IkReal(1.00000000000000))*(cj2));
IkReal x1034=((IkReal(1.00000000000000))*(sj2));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j3)), IkReal(6.28318530717959))));
evalcond[1]=((((IkReal(-1.00000000000000))*(r01)*(sj1)*(x1034)))+(((IkReal(-1.00000000000000))*(sj5)))+(((IkReal(-1.00000000000000))*(cj1)*(r00)*(x1034)))+(((IkReal(-1.00000000000000))*(r02)*(x1033))));
evalcond[2]=((IkReal(-0.0260000000000000))+(((IkReal(-0.150000000000000))*(cj5)))+(((IkReal(-1.00000000000000))*(pz)*(x1033)))+(((IkReal(-1.00000000000000))*(py)*(sj1)*(x1034)))+(((IkReal(-0.130000000000000))*(sj5)))+(((IkReal(0.150000000000000))*(sj2)))+(((IkReal(-1.00000000000000))*(cj1)*(px)*(x1034))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst6;
gconst6=IKsign(cj5);
dummyeval[0]=cj5;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst7;
gconst7=IKsign(((((IkReal(-0.130000000000000))*(cj5)))+(((IkReal(0.150000000000000))*(sj5)))));
dummyeval[0]=((((IkReal(1.15384615384615))*(sj5)))+(((IkReal(-1.00000000000000))*(cj5))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=((((IkReal(1.15384615384615))*(sj5)))+(((IkReal(-1.00000000000000))*(cj5))));
dummyeval[1]=cj5;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1035=((IkReal(1.00000000000000))*(sj1));
if( IKabs(((((IKabs(((((IkReal(-0.130000000000000))*(cj5)))+(((IkReal(0.150000000000000))*(sj5))))) != 0)?((IkReal)1/(((((IkReal(-0.130000000000000))*(cj5)))+(((IkReal(0.150000000000000))*(sj5)))))):(IkReal)1.0e30))*(((((cj1)*(py)))+(((IkReal(-1.00000000000000))*(px)*(x1035))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IKabs(cj5) != 0)?((IkReal)1/(cj5)):(IkReal)1.0e30))*(((((r02)*(sj2)))+(((IkReal(-1.00000000000000))*(cj1)*(cj2)*(r00)))+(((IkReal(-1.00000000000000))*(cj2)*(r01)*(x1035))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(((((IkReal(-0.130000000000000))*(cj5)))+(((IkReal(0.150000000000000))*(sj5))))) != 0)?((IkReal)1/(((((IkReal(-0.130000000000000))*(cj5)))+(((IkReal(0.150000000000000))*(sj5)))))):(IkReal)1.0e30))*(((((cj1)*(py)))+(((IkReal(-1.00000000000000))*(px)*(x1035)))))))+IKsqr(((((IKabs(cj5) != 0)?((IkReal)1/(cj5)):(IkReal)1.0e30))*(((((r02)*(sj2)))+(((IkReal(-1.00000000000000))*(cj1)*(cj2)*(r00)))+(((IkReal(-1.00000000000000))*(cj2)*(r01)*(x1035)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((IKabs(((((IkReal(-0.130000000000000))*(cj5)))+(((IkReal(0.150000000000000))*(sj5))))) != 0)?((IkReal)1/(((((IkReal(-0.130000000000000))*(cj5)))+(((IkReal(0.150000000000000))*(sj5)))))):(IkReal)1.0e30))*(((((cj1)*(py)))+(((IkReal(-1.00000000000000))*(px)*(x1035)))))), ((((IKabs(cj5) != 0)?((IkReal)1/(cj5)):(IkReal)1.0e30))*(((((r02)*(sj2)))+(((IkReal(-1.00000000000000))*(cj1)*(cj2)*(r00)))+(((IkReal(-1.00000000000000))*(cj2)*(r01)*(x1035)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x1036=IKsin(j4);
IkReal x1037=IKcos(j4);
IkReal x1038=((cj1)*(cj2));
IkReal x1039=((IkReal(1.00000000000000))*(cj1));
IkReal x1040=((IkReal(1.00000000000000))*(sj2));
IkReal x1041=((IkReal(0.150000000000000))*(sj5));
IkReal x1042=((cj2)*(sj1));
IkReal x1043=((cj5)*(x1036));
IkReal x1044=((cj5)*(x1037));
evalcond[0]=((((r00)*(sj1)))+(((IkReal(-1.00000000000000))*(x1043)))+(((IkReal(-1.00000000000000))*(r01)*(x1039))));
evalcond[1]=((((IkReal(-1.00000000000000))*(py)*(x1039)))+(((x1036)*(x1041)))+(((px)*(sj1)))+(((IkReal(-0.130000000000000))*(x1043))));
evalcond[2]=((((IkReal(-1.00000000000000))*(r02)*(x1040)))+(((r00)*(x1038)))+(x1044)+(((r01)*(x1042))));
evalcond[3]=((IkReal(-0.200000000000000))+(((IkReal(-0.150000000000000))*(cj2)))+(((px)*(x1038)))+(((py)*(x1042)))+(((IkReal(-1.00000000000000))*(x1037)*(x1041)))+(((IkReal(-1.00000000000000))*(pz)*(x1040)))+(((IkReal(0.130000000000000))*(x1044))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((gconst7)*(((((cj1)*(py)))+(((IkReal(-1.00000000000000))*(px)*(sj1))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst7)*(((IkReal(-0.200000000000000))+(((cj1)*(cj2)*(px)))+(((IkReal(-0.150000000000000))*(cj2)))+(((cj2)*(py)*(sj1)))+(((IkReal(-1.00000000000000))*(pz)*(sj2))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst7)*(((((cj1)*(py)))+(((IkReal(-1.00000000000000))*(px)*(sj1)))))), ((gconst7)*(((IkReal(-0.200000000000000))+(((cj1)*(cj2)*(px)))+(((IkReal(-0.150000000000000))*(cj2)))+(((cj2)*(py)*(sj1)))+(((IkReal(-1.00000000000000))*(pz)*(sj2)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x1045=IKsin(j4);
IkReal x1046=IKcos(j4);
IkReal x1047=((cj1)*(cj2));
IkReal x1048=((IkReal(1.00000000000000))*(cj1));
IkReal x1049=((IkReal(1.00000000000000))*(sj2));
IkReal x1050=((IkReal(0.150000000000000))*(sj5));
IkReal x1051=((cj2)*(sj1));
IkReal x1052=((cj5)*(x1045));
IkReal x1053=((cj5)*(x1046));
evalcond[0]=((((IkReal(-1.00000000000000))*(r01)*(x1048)))+(((r00)*(sj1)))+(((IkReal(-1.00000000000000))*(x1052))));
evalcond[1]=((((IkReal(-1.00000000000000))*(py)*(x1048)))+(((px)*(sj1)))+(((IkReal(-0.130000000000000))*(x1052)))+(((x1045)*(x1050))));
evalcond[2]=((((IkReal(-1.00000000000000))*(r02)*(x1049)))+(x1053)+(((r00)*(x1047)))+(((r01)*(x1051))));
evalcond[3]=((IkReal(-0.200000000000000))+(((IkReal(-0.150000000000000))*(cj2)))+(((IkReal(-1.00000000000000))*(x1046)*(x1050)))+(((px)*(x1047)))+(((py)*(x1051)))+(((IkReal(-1.00000000000000))*(pz)*(x1049)))+(((IkReal(0.130000000000000))*(x1053))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1054=((IkReal(1.00000000000000))*(r01));
if( IKabs(((gconst6)*(((((r00)*(sj1)))+(((IkReal(-1.00000000000000))*(cj1)*(x1054))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst6)*(((((r02)*(sj2)))+(((IkReal(-1.00000000000000))*(cj2)*(sj1)*(x1054)))+(((IkReal(-1.00000000000000))*(cj1)*(cj2)*(r00))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst6)*(((((r00)*(sj1)))+(((IkReal(-1.00000000000000))*(cj1)*(x1054)))))), ((gconst6)*(((((r02)*(sj2)))+(((IkReal(-1.00000000000000))*(cj2)*(sj1)*(x1054)))+(((IkReal(-1.00000000000000))*(cj1)*(cj2)*(r00)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x1055=IKsin(j4);
IkReal x1056=IKcos(j4);
IkReal x1057=((cj1)*(cj2));
IkReal x1058=((IkReal(1.00000000000000))*(cj1));
IkReal x1059=((IkReal(1.00000000000000))*(sj2));
IkReal x1060=((IkReal(0.150000000000000))*(sj5));
IkReal x1061=((cj2)*(sj1));
IkReal x1062=((cj5)*(x1055));
IkReal x1063=((cj5)*(x1056));
evalcond[0]=((((r00)*(sj1)))+(((IkReal(-1.00000000000000))*(r01)*(x1058)))+(((IkReal(-1.00000000000000))*(x1062))));
evalcond[1]=((((IkReal(-0.130000000000000))*(x1062)))+(((x1055)*(x1060)))+(((IkReal(-1.00000000000000))*(py)*(x1058)))+(((px)*(sj1))));
evalcond[2]=((((IkReal(-1.00000000000000))*(r02)*(x1059)))+(x1063)+(((r00)*(x1057)))+(((r01)*(x1061))));
evalcond[3]=((IkReal(-0.200000000000000))+(((IkReal(-0.150000000000000))*(cj2)))+(((px)*(x1057)))+(((py)*(x1061)))+(((IkReal(0.130000000000000))*(x1063)))+(((IkReal(-1.00000000000000))*(pz)*(x1059)))+(((IkReal(-1.00000000000000))*(x1056)*(x1060))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((((IKabs(((((IkReal(-0.130000000000000))*(cj5)))+(((IkReal(0.150000000000000))*(sj5))))) != 0)?((IkReal)1/(((((IkReal(-0.130000000000000))*(cj5)))+(((IkReal(0.150000000000000))*(sj5)))))):(IkReal)1.0e30))*(((((cj1)*(py)))+(((IkReal(-1.00000000000000))*(px)*(sj1))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IKabs(cj5) != 0)?((IkReal)1/(cj5)):(IkReal)1.0e30))*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((cj2)*(r01)*(sj1)))+(((IkReal(-1.00000000000000))*(r02)*(sj2)))+(((IkReal(-1.00000000000000))*(cj3)*(sj5)))+(((cj1)*(cj2)*(r00))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(((((IkReal(-0.130000000000000))*(cj5)))+(((IkReal(0.150000000000000))*(sj5))))) != 0)?((IkReal)1/(((((IkReal(-0.130000000000000))*(cj5)))+(((IkReal(0.150000000000000))*(sj5)))))):(IkReal)1.0e30))*(((((cj1)*(py)))+(((IkReal(-1.00000000000000))*(px)*(sj1)))))))+IKsqr(((((IKabs(cj5) != 0)?((IkReal)1/(cj5)):(IkReal)1.0e30))*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((cj2)*(r01)*(sj1)))+(((IkReal(-1.00000000000000))*(r02)*(sj2)))+(((IkReal(-1.00000000000000))*(cj3)*(sj5)))+(((cj1)*(cj2)*(r00)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((IKabs(((((IkReal(-0.130000000000000))*(cj5)))+(((IkReal(0.150000000000000))*(sj5))))) != 0)?((IkReal)1/(((((IkReal(-0.130000000000000))*(cj5)))+(((IkReal(0.150000000000000))*(sj5)))))):(IkReal)1.0e30))*(((((cj1)*(py)))+(((IkReal(-1.00000000000000))*(px)*(sj1)))))), ((((IKabs(cj5) != 0)?((IkReal)1/(cj5)):(IkReal)1.0e30))*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((cj2)*(r01)*(sj1)))+(((IkReal(-1.00000000000000))*(r02)*(sj2)))+(((IkReal(-1.00000000000000))*(cj3)*(sj5)))+(((cj1)*(cj2)*(r00)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1064=IKsin(j4);
IkReal x1065=IKcos(j4);
IkReal x1066=((cj1)*(cj2));
IkReal x1067=((IkReal(1.00000000000000))*(cj2));
IkReal x1068=((IkReal(0.150000000000000))*(cj3));
IkReal x1069=((cj3)*(sj5));
IkReal x1070=((IkReal(0.150000000000000))*(sj5));
IkReal x1071=((py)*(sj1));
IkReal x1072=((IkReal(1.00000000000000))*(sj2));
IkReal x1073=((IkReal(1.00000000000000))*(cj1));
IkReal x1074=((r01)*(sj1));
IkReal x1075=((sj3)*(sj5));
IkReal x1076=((cj5)*(x1064));
IkReal x1077=((IkReal(1.00000000000000))*(cj5)*(x1065));
IkReal x1078=((IkReal(0.130000000000000))*(cj5)*(x1065));
evalcond[0]=((((r00)*(sj1)))+(((IkReal(-1.00000000000000))*(r01)*(x1073)))+(((IkReal(-1.00000000000000))*(x1076))));
evalcond[1]=((((IkReal(-1.00000000000000))*(py)*(x1073)))+(((px)*(sj1)))+(((IkReal(-0.130000000000000))*(x1076)))+(((x1064)*(x1070))));
evalcond[2]=((((IkReal(-1.00000000000000))*(r02)*(x1072)))+(((IkReal(-1.00000000000000))*(sj3)*(x1077)))+(((cj2)*(x1074)))+(((r00)*(x1066)))+(((IkReal(-1.00000000000000))*(x1069))));
evalcond[3]=((x1075)+(((IkReal(-1.00000000000000))*(r02)*(x1067)))+(((IkReal(-1.00000000000000))*(x1072)*(x1074)))+(((IkReal(-1.00000000000000))*(cj3)*(x1077)))+(((IkReal(-1.00000000000000))*(cj1)*(r00)*(x1072))));
evalcond[4]=((((IkReal(-0.150000000000000))*(cj2)))+(((IkReal(-0.130000000000000))*(x1069)))+(((sj3)*(x1065)*(x1070)))+(((IkReal(-1.00000000000000))*(sj3)*(x1078)))+(((IkReal(-1.00000000000000))*(pz)*(x1072)))+(((cj2)*(x1071)))+(((px)*(x1066)))+(((IkReal(-0.640000000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(cj5)*(x1068)))+(((IkReal(0.200000000000000))*(sj3))));
evalcond[5]=((IkReal(0.614000000000000))+(((IkReal(0.200000000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(x1071)*(x1072)))+(((IkReal(0.150000000000000))*(cj5)*(sj3)))+(((sj5)*(x1065)*(x1068)))+(((IkReal(-1.00000000000000))*(pz)*(x1067)))+(((IkReal(-1.00000000000000))*(cj1)*(px)*(x1072)))+(((IkReal(0.640000000000000))*(sj3)))+(((IkReal(0.130000000000000))*(x1075)))+(((IkReal(-1.00000000000000))*(cj3)*(x1078)))+(((IkReal(0.150000000000000))*(sj2))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1079=((IKabs(cj5) != 0)?((IkReal)1/(cj5)):(IkReal)1.0e30);
IkReal x1080=((IkReal(1.00000000000000))*(cj1));
if( IKabs(((x1079)*(((((r00)*(sj1)))+(((IkReal(-1.00000000000000))*(r01)*(x1080))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1079)*(((IKabs(cj3) != 0)?((IkReal)1/(cj3)):(IkReal)1.0e30))*(((((sj3)*(sj5)))+(((IkReal(-1.00000000000000))*(r00)*(sj2)*(x1080)))+(((IkReal(-1.00000000000000))*(r01)*(sj1)*(sj2)))+(((IkReal(-1.00000000000000))*(cj2)*(r02))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1079)*(((((r00)*(sj1)))+(((IkReal(-1.00000000000000))*(r01)*(x1080)))))))+IKsqr(((x1079)*(((IKabs(cj3) != 0)?((IkReal)1/(cj3)):(IkReal)1.0e30))*(((((sj3)*(sj5)))+(((IkReal(-1.00000000000000))*(r00)*(sj2)*(x1080)))+(((IkReal(-1.00000000000000))*(r01)*(sj1)*(sj2)))+(((IkReal(-1.00000000000000))*(cj2)*(r02)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x1079)*(((((r00)*(sj1)))+(((IkReal(-1.00000000000000))*(r01)*(x1080)))))), ((x1079)*(((IKabs(cj3) != 0)?((IkReal)1/(cj3)):(IkReal)1.0e30))*(((((sj3)*(sj5)))+(((IkReal(-1.00000000000000))*(r00)*(sj2)*(x1080)))+(((IkReal(-1.00000000000000))*(r01)*(sj1)*(sj2)))+(((IkReal(-1.00000000000000))*(cj2)*(r02)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1081=IKsin(j4);
IkReal x1082=IKcos(j4);
IkReal x1083=((cj1)*(cj2));
IkReal x1084=((IkReal(1.00000000000000))*(cj2));
IkReal x1085=((IkReal(0.150000000000000))*(cj3));
IkReal x1086=((cj3)*(sj5));
IkReal x1087=((IkReal(0.150000000000000))*(sj5));
IkReal x1088=((py)*(sj1));
IkReal x1089=((IkReal(1.00000000000000))*(sj2));
IkReal x1090=((IkReal(1.00000000000000))*(cj1));
IkReal x1091=((r01)*(sj1));
IkReal x1092=((sj3)*(sj5));
IkReal x1093=((cj5)*(x1081));
IkReal x1094=((IkReal(1.00000000000000))*(cj5)*(x1082));
IkReal x1095=((IkReal(0.130000000000000))*(cj5)*(x1082));
evalcond[0]=((((r00)*(sj1)))+(((IkReal(-1.00000000000000))*(x1093)))+(((IkReal(-1.00000000000000))*(r01)*(x1090))));
evalcond[1]=((((IkReal(-1.00000000000000))*(py)*(x1090)))+(((x1081)*(x1087)))+(((IkReal(-0.130000000000000))*(x1093)))+(((px)*(sj1))));
evalcond[2]=((((r00)*(x1083)))+(((IkReal(-1.00000000000000))*(x1086)))+(((IkReal(-1.00000000000000))*(r02)*(x1089)))+(((IkReal(-1.00000000000000))*(sj3)*(x1094)))+(((cj2)*(x1091))));
evalcond[3]=((x1092)+(((IkReal(-1.00000000000000))*(cj3)*(x1094)))+(((IkReal(-1.00000000000000))*(x1089)*(x1091)))+(((IkReal(-1.00000000000000))*(cj1)*(r00)*(x1089)))+(((IkReal(-1.00000000000000))*(r02)*(x1084))));
evalcond[4]=((((IkReal(-1.00000000000000))*(pz)*(x1089)))+(((IkReal(-0.150000000000000))*(cj2)))+(((px)*(x1083)))+(((IkReal(-0.640000000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(cj5)*(x1085)))+(((IkReal(-1.00000000000000))*(sj3)*(x1095)))+(((cj2)*(x1088)))+(((IkReal(0.200000000000000))*(sj3)))+(((sj3)*(x1082)*(x1087)))+(((IkReal(-0.130000000000000))*(x1086))));
evalcond[5]=((IkReal(0.614000000000000))+(((IkReal(0.130000000000000))*(x1092)))+(((IkReal(-1.00000000000000))*(pz)*(x1084)))+(((sj5)*(x1082)*(x1085)))+(((IkReal(-1.00000000000000))*(cj3)*(x1095)))+(((IkReal(0.200000000000000))*(cj3)))+(((IkReal(0.150000000000000))*(cj5)*(sj3)))+(((IkReal(-1.00000000000000))*(x1088)*(x1089)))+(((IkReal(0.640000000000000))*(sj3)))+(((IkReal(0.150000000000000))*(sj2)))+(((IkReal(-1.00000000000000))*(cj1)*(px)*(x1089))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1096=((IKabs(cj5) != 0)?((IkReal)1/(cj5)):(IkReal)1.0e30);
if( IKabs(((x1096)*(((((r00)*(sj1)))+(((IkReal(-1.00000000000000))*(cj1)*(r01))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1096)*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((cj2)*(r01)*(sj1)))+(((IkReal(-1.00000000000000))*(r02)*(sj2)))+(((IkReal(-1.00000000000000))*(cj3)*(sj5)))+(((cj1)*(cj2)*(r00))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1096)*(((((r00)*(sj1)))+(((IkReal(-1.00000000000000))*(cj1)*(r01)))))))+IKsqr(((x1096)*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((cj2)*(r01)*(sj1)))+(((IkReal(-1.00000000000000))*(r02)*(sj2)))+(((IkReal(-1.00000000000000))*(cj3)*(sj5)))+(((cj1)*(cj2)*(r00)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x1096)*(((((r00)*(sj1)))+(((IkReal(-1.00000000000000))*(cj1)*(r01)))))), ((x1096)*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((cj2)*(r01)*(sj1)))+(((IkReal(-1.00000000000000))*(r02)*(sj2)))+(((IkReal(-1.00000000000000))*(cj3)*(sj5)))+(((cj1)*(cj2)*(r00)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1097=IKsin(j4);
IkReal x1098=IKcos(j4);
IkReal x1099=((cj1)*(cj2));
IkReal x1100=((IkReal(1.00000000000000))*(cj2));
IkReal x1101=((IkReal(0.150000000000000))*(cj3));
IkReal x1102=((cj3)*(sj5));
IkReal x1103=((IkReal(0.150000000000000))*(sj5));
IkReal x1104=((py)*(sj1));
IkReal x1105=((IkReal(1.00000000000000))*(sj2));
IkReal x1106=((IkReal(1.00000000000000))*(cj1));
IkReal x1107=((r01)*(sj1));
IkReal x1108=((sj3)*(sj5));
IkReal x1109=((cj5)*(x1097));
IkReal x1110=((IkReal(1.00000000000000))*(cj5)*(x1098));
IkReal x1111=((IkReal(0.130000000000000))*(cj5)*(x1098));
evalcond[0]=((((r00)*(sj1)))+(((IkReal(-1.00000000000000))*(r01)*(x1106)))+(((IkReal(-1.00000000000000))*(x1109))));
evalcond[1]=((((x1097)*(x1103)))+(((IkReal(-0.130000000000000))*(x1109)))+(((IkReal(-1.00000000000000))*(py)*(x1106)))+(((px)*(sj1))));
evalcond[2]=((((r00)*(x1099)))+(((IkReal(-1.00000000000000))*(x1102)))+(((IkReal(-1.00000000000000))*(sj3)*(x1110)))+(((IkReal(-1.00000000000000))*(r02)*(x1105)))+(((cj2)*(x1107))));
evalcond[3]=((x1108)+(((IkReal(-1.00000000000000))*(r02)*(x1100)))+(((IkReal(-1.00000000000000))*(cj3)*(x1110)))+(((IkReal(-1.00000000000000))*(cj1)*(r00)*(x1105)))+(((IkReal(-1.00000000000000))*(x1105)*(x1107))));
evalcond[4]=((((IkReal(-0.150000000000000))*(cj2)))+(((IkReal(-1.00000000000000))*(cj5)*(x1101)))+(((IkReal(-0.130000000000000))*(x1102)))+(((IkReal(-1.00000000000000))*(sj3)*(x1111)))+(((IkReal(-0.640000000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(pz)*(x1105)))+(((cj2)*(x1104)))+(((px)*(x1099)))+(((IkReal(0.200000000000000))*(sj3)))+(((sj3)*(x1098)*(x1103))));
evalcond[5]=((IkReal(0.614000000000000))+(((IkReal(0.200000000000000))*(cj3)))+(((IkReal(0.150000000000000))*(cj5)*(sj3)))+(((sj5)*(x1098)*(x1101)))+(((IkReal(-1.00000000000000))*(pz)*(x1100)))+(((IkReal(0.640000000000000))*(sj3)))+(((IkReal(0.130000000000000))*(x1108)))+(((IkReal(-1.00000000000000))*(x1104)*(x1105)))+(((IkReal(-1.00000000000000))*(cj3)*(x1111)))+(((IkReal(0.150000000000000))*(sj2)))+(((IkReal(-1.00000000000000))*(cj1)*(px)*(x1105))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
    }
}
return solutions.GetNumSolutions()>0;
}

static inline bool checkconsistency8(const IkReal* Breal)
{
    IkReal norm = 0.1;
    for(int i = 0; i < 7; ++i) {
        norm += IKabs(Breal[i]);
    }
    IkReal tol = 1e-5*norm; // have to increase the threshold since many computations are involved
    return IKabs(Breal[0]*Breal[1]-Breal[2]) < tol && IKabs(Breal[1]*Breal[1]-Breal[3]) < tol && IKabs(Breal[0]*Breal[3]-Breal[4]) < tol && IKabs(Breal[1]*Breal[3]-Breal[5]) < tol && IKabs(Breal[0]*Breal[5]-Breal[6]) < tol;
}
/// \brief Solve the det Ax^2+Bx+C = 0 problem using the Manocha and Canny method (1994)
///
/// matcoeffs is of length 54*3, for 3 matrices
static inline void solvedialyticpoly8qep(const IkReal* matcoeffs, IkReal* rawroots, int& numroots)
{
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    IkReal IKFAST_ALIGNED16(M[16*16]) = {0};
    IkReal IKFAST_ALIGNED16(A[8*8]);
    IkReal IKFAST_ALIGNED16(work[16*16*15]);
    int ipiv[8];
    int info, coeffindex;
    const int worksize=16*16*15;
    const int matrixdim = 8;
    const int matrixdim2 = 16;
    numroots = 0;
    // first setup M = [0 I; -C -B] and A
    coeffindex = 0;
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = matcoeffs[coeffindex++];
        }
        for(int k = 0; k < 2; ++k) {
            A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
        }
    }
    const IkReal lfpossibilities[4][4] = {{1,-1,1,1},{1,0,-2,1},{1,1,2,0},{1,-1,4,1}};
    int lfindex = -1;
    bool bsingular = true;
    do {
        dgetrf_(&matrixdim,&matrixdim,A,&matrixdim,&ipiv[0],&info);
        if( info == 0 ) {
            bsingular = false;
            for(int j = 0; j < matrixdim; ++j) {
                if( IKabs(A[j*matrixdim+j]) < 100*tol ) {
                    bsingular = true;
                    break;
                }
            }
            if( !bsingular ) {
                break;
            }
        }
        if( lfindex == 3 ) {
            break;
        }
        // transform by the linear functional
        lfindex++;
        const IkReal* lf = lfpossibilities[lfindex];
        // have to reinitialize A
        coeffindex = 0;
        for(int j = 0; j < 4; ++j) {
            for(int k = 0; k < 6; ++k) {
                IkReal a = matcoeffs[coeffindex+48], b = matcoeffs[coeffindex+24], c = matcoeffs[coeffindex];
                A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = lf[0]*lf[0]*a+lf[0]*lf[2]*b+lf[2]*lf[2]*c;
                M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -(lf[1]*lf[1]*a + lf[1]*lf[3]*b + lf[3]*lf[3]*c);
                M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -(2*lf[0]*lf[1]*a + (lf[0]*lf[3]+lf[1]*lf[2])*b + 2*lf[2]*lf[3]*c);
                coeffindex++;
            }
            for(int k = 0; k < 2; ++k) {
                A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
            }
        }
    } while(lfindex<4);

    if( bsingular ) {
        return;
    }
    dgetrs_("No transpose", &matrixdim, &matrixdim2, A, &matrixdim, &ipiv[0], &M[matrixdim], &matrixdim2, &info);
    if( info != 0 ) {
        return;
    }

    // set identity in upper corner
    for(int j = 0; j < matrixdim; ++j) {
        M[matrixdim*2*matrixdim+j+matrixdim*2*j] = 1;
    }
    IkReal IKFAST_ALIGNED16(wr[16]);
    IkReal IKFAST_ALIGNED16(wi[16]);
    IkReal IKFAST_ALIGNED16(vr[16*16]);
    int one=1;
    dgeev_("N", "V", &matrixdim2, M, &matrixdim2, wr, wi,NULL, &one, vr, &matrixdim2, work, &worksize, &info);
    if( info != 0 ) {
        return;
    }
    IkReal Breal[matrixdim-1];
    for(int i = 0; i < matrixdim2; ++i) {
        if( IKabs(wi[i]) < tol*100 ) {
            IkReal* ev = vr+matrixdim2*i;
            if( IKabs(wr[i]) > 1 ) {
                ev += matrixdim;
            }
            // consistency has to be checked!!
            if( IKabs(ev[0]) < tol ) {
                continue;
            }
            IkReal iconst = 1/ev[0];
            for(int j = 1; j < matrixdim; ++j) {
                Breal[j-1] = ev[j]*iconst;
            }
            if( checkconsistency8(Breal) ) {
                if( lfindex >= 0 ) {
                    const IkReal* lf = lfpossibilities[lfindex];
                    rawroots[numroots++] = (wr[i]*lf[0]+lf[1])/(wr[i]*lf[2]+lf[3]);
                }
                else {
                    rawroots[numroots++] = wr[i];
                }
                bool bsmall0=IKabs(ev[0]) > IKabs(ev[2]);
                bool bsmall1=IKabs(ev[0]) > IKabs(ev[1]);
                if( bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[2]/ev[0];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[3]/ev[1];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( !bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[6]/ev[4];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
                else if( !bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[7]/ev[5];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
            }
        }
    }
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:genericrobot - clopema (5fdbe354c2b31d39b906be84114e9e9d)>"; }

IKFAST_API const char* GetIkFastVersion() { return IKFAST_STRINGIZE(IKFAST_VERSION); }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
